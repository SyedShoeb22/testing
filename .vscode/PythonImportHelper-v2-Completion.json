[
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "activate",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "lxpapp",
        "description": "lxpapp",
        "isExtraImport": true,
        "detail": "lxpapp",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "update_session_auth_hash",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "update_session_auth_hash",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "REDIRECT_FIELD_NAME",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "REDIRECT_FIELD_NAME",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "resolve_url",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "UserSocialAuth",
        "importPath": "social_django.models",
        "description": "social_django.models",
        "isExtraImport": true,
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "UserSocialAuth",
        "importPath": "social_django.models",
        "description": "social_django.models",
        "isExtraImport": true,
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "UserSocialAuth",
        "importPath": "social_django.models",
        "description": "social_django.models",
        "isExtraImport": true,
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "UserSocialAuth",
        "importPath": "social_django.models",
        "description": "social_django.models",
        "isExtraImport": true,
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "UserSocialAuth",
        "importPath": "social_django.models",
        "description": "social_django.models",
        "isExtraImport": true,
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "Code",
        "importPath": "social_django.models",
        "description": "social_django.models",
        "isExtraImport": true,
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "Partial",
        "importPath": "social_django.models",
        "description": "social_django.models",
        "isExtraImport": true,
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "UserSocialAuth",
        "importPath": "social_django.models",
        "description": "social_django.models",
        "isExtraImport": true,
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "UserSocialAuth",
        "importPath": "social_django.models",
        "description": "social_django.models",
        "isExtraImport": true,
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "apps",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "cfo",
        "description": "cfo",
        "isExtraImport": true,
        "detail": "cfo",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Exists",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Exists",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Exists",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Exists",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Exists",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Coalesce",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Coalesce",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Coalesce",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Coalesce",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Coalesce",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "get_random_string",
        "importPath": "django.utils.crypto",
        "description": "django.utils.crypto",
        "isExtraImport": true,
        "detail": "django.utils.crypto",
        "documentation": {}
    },
    {
        "label": "get_random_string",
        "importPath": "django.utils.crypto",
        "description": "django.utils.crypto",
        "isExtraImport": true,
        "detail": "django.utils.crypto",
        "documentation": {}
    },
    {
        "label": "quote_plus",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qsl",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlsplit",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlsplit",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlsplit",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlsplit",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlunparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlunparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "DecodeError",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "ExpiredSignatureError",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "decode",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "get_unverified_header",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "DecodeError",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "ExpiredSignatureError",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "decode",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "get_unverified_header",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "cto",
        "description": "cto",
        "isExtraImport": true,
        "detail": "cto",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "google_auth_oauthlib.flow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google_auth_oauthlib.flow",
        "description": "google_auth_oauthlib.flow",
        "detail": "google_auth_oauthlib.flow",
        "documentation": {}
    },
    {
        "label": "PlaylistManager",
        "importPath": "youtubemanager",
        "description": "youtubemanager",
        "isExtraImport": true,
        "detail": "youtubemanager",
        "documentation": {}
    },
    {
        "label": "loader",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "TemplateDoesNotExist",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "loader",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "engines",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "loader",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "Github",
        "importPath": "github",
        "description": "github",
        "isExtraImport": true,
        "detail": "github",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "MediaFileUpload",
        "importPath": "googleapiclient.http",
        "description": "googleapiclient.http",
        "isExtraImport": true,
        "detail": "googleapiclient.http",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "learner",
        "description": "learner",
        "isExtraImport": true,
        "detail": "learner",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "django.contrib.messages",
        "description": "django.contrib.messages",
        "isExtraImport": true,
        "detail": "django.contrib.messages",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "CustomLoginView",
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "isExtraImport": true,
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "ConnectionError",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "humanize",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "humanize",
        "description": "humanize",
        "detail": "humanize",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "UserActivity",
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "isExtraImport": true,
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "ErrorLog",
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "isExtraImport": true,
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "isExtraImport": true,
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "user_logged_in",
        "importPath": "django.contrib.auth.signals",
        "description": "django.contrib.auth.signals",
        "isExtraImport": true,
        "detail": "django.contrib.auth.signals",
        "documentation": {}
    },
    {
        "label": "user_logged_out",
        "importPath": "django.contrib.auth.signals",
        "description": "django.contrib.auth.signals",
        "isExtraImport": true,
        "detail": "django.contrib.auth.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "default_storage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "mentor",
        "description": "mentor",
        "isExtraImport": true,
        "detail": "mentor",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_protect",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "boto3,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3.",
        "description": "boto3.",
        "detail": "boto3.",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl",
        "description": "ssl",
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "RSAAlgorithm",
        "importPath": "jwt.algorithms",
        "description": "jwt.algorithms",
        "isExtraImport": true,
        "detail": "jwt.algorithms",
        "documentation": {}
    },
    {
        "label": "RSAAlgorithm",
        "importPath": "jwt.algorithms",
        "description": "jwt.algorithms",
        "isExtraImport": true,
        "detail": "jwt.algorithms",
        "documentation": {}
    },
    {
        "label": "PyJWTError",
        "importPath": "jwt.exceptions",
        "description": "jwt.exceptions",
        "isExtraImport": true,
        "detail": "jwt.exceptions",
        "documentation": {}
    },
    {
        "label": "BaseOAuth2",
        "importPath": "social_core.backends.oauth",
        "description": "social_core.backends.oauth",
        "isExtraImport": true,
        "detail": "social_core.backends.oauth",
        "documentation": {}
    },
    {
        "label": "BaseOAuth2",
        "importPath": "social_core.backends.oauth",
        "description": "social_core.backends.oauth",
        "isExtraImport": true,
        "detail": "social_core.backends.oauth",
        "documentation": {}
    },
    {
        "label": "BaseOAuth2",
        "importPath": "social_core.backends.oauth",
        "description": "social_core.backends.oauth",
        "isExtraImport": true,
        "detail": "social_core.backends.oauth",
        "documentation": {}
    },
    {
        "label": "BaseOAuth2",
        "importPath": "social_core.backends.oauth",
        "description": "social_core.backends.oauth",
        "isExtraImport": true,
        "detail": "social_core.backends.oauth",
        "documentation": {}
    },
    {
        "label": "BaseOAuth2",
        "importPath": "social_core.backends.oauth",
        "description": "social_core.backends.oauth",
        "isExtraImport": true,
        "detail": "social_core.backends.oauth",
        "documentation": {}
    },
    {
        "label": "BaseOAuth2",
        "importPath": "social_core.backends.oauth",
        "description": "social_core.backends.oauth",
        "isExtraImport": true,
        "detail": "social_core.backends.oauth",
        "documentation": {}
    },
    {
        "label": "BaseOAuth2",
        "importPath": "social_core.backends.oauth",
        "description": "social_core.backends.oauth",
        "isExtraImport": true,
        "detail": "social_core.backends.oauth",
        "documentation": {}
    },
    {
        "label": "BaseOAuth2",
        "importPath": "social_core.backends.oauth",
        "description": "social_core.backends.oauth",
        "isExtraImport": true,
        "detail": "social_core.backends.oauth",
        "documentation": {}
    },
    {
        "label": "AuthFailed",
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "isExtraImport": true,
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthCanceled",
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "isExtraImport": true,
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthTokenError",
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "isExtraImport": true,
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "SocialAuthBaseException",
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "isExtraImport": true,
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "MissingBackend",
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "isExtraImport": true,
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwk",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "serialization",
        "importPath": "cryptography.hazmat.primitives",
        "description": "cryptography.hazmat.primitives",
        "isExtraImport": true,
        "detail": "cryptography.hazmat.primitives",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "urlsafe_b64decode",
        "importPath": "base64",
        "description": "base64",
        "isExtraImport": true,
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "urlsafe_b64encode",
        "importPath": "base64",
        "description": "base64",
        "isExtraImport": true,
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "default_backend",
        "importPath": "cryptography.hazmat.backends",
        "description": "cryptography.hazmat.backends",
        "isExtraImport": true,
        "detail": "cryptography.hazmat.backends",
        "documentation": {}
    },
    {
        "label": "load_der_x509_certificate",
        "importPath": "cryptography.x509",
        "description": "cryptography.x509",
        "isExtraImport": true,
        "detail": "cryptography.x509",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "sha256",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "OpenIdConnectAuth",
        "importPath": "social_core.backends.open_id_connect",
        "description": "social_core.backends.open_id_connect",
        "isExtraImport": true,
        "detail": "social_core.backends.open_id_connect",
        "documentation": {}
    },
    {
        "label": "OpenIdConnectAuth",
        "importPath": "social_core.backends.open_id_connect",
        "description": "social_core.backends.open_id_connect",
        "isExtraImport": true,
        "detail": "social_core.backends.open_id_connect",
        "documentation": {}
    },
    {
        "label": "OpenIdConnectAuth",
        "importPath": "social_core.backends.open_id_connect",
        "description": "social_core.backends.open_id_connect",
        "isExtraImport": true,
        "detail": "social_core.backends.open_id_connect",
        "documentation": {}
    },
    {
        "label": "OpenIdConnectAuth",
        "importPath": "social_core.backends.open_id_connect",
        "description": "social_core.backends.open_id_connect",
        "isExtraImport": true,
        "detail": "social_core.backends.open_id_connect",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "isExtraImport": true,
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "isExtraImport": true,
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "isExtraImport": true,
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "setting_name",
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "isExtraImport": true,
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "setting_name",
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "isExtraImport": true,
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "social_logger",
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "isExtraImport": true,
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "setting_name",
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "isExtraImport": true,
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "setting_name",
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "isExtraImport": true,
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "setting_name",
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "isExtraImport": true,
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "course_member",
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "isExtraImport": true,
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "get_strategy",
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "isExtraImport": true,
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "setting_name",
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "isExtraImport": true,
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "google.appengine.api",
        "description": "google.appengine.api",
        "isExtraImport": true,
        "detail": "google.appengine.api",
        "documentation": {}
    },
    {
        "label": "HTTPBasicAuth",
        "importPath": "requests.auth",
        "description": "requests.auth",
        "isExtraImport": true,
        "detail": "requests.auth",
        "documentation": {}
    },
    {
        "label": "HTTPBasicAuth",
        "importPath": "requests.auth",
        "description": "requests.auth",
        "isExtraImport": true,
        "detail": "requests.auth",
        "documentation": {}
    },
    {
        "label": "SIGNATURE_HMAC",
        "importPath": "oauthlib.oauth1",
        "description": "oauthlib.oauth1",
        "isExtraImport": true,
        "detail": "oauthlib.oauth1",
        "documentation": {}
    },
    {
        "label": "SIGNATURE_TYPE_QUERY",
        "importPath": "oauthlib.oauth1",
        "description": "oauthlib.oauth1",
        "isExtraImport": true,
        "detail": "oauthlib.oauth1",
        "documentation": {}
    },
    {
        "label": "SIGNATURE_TYPE_AUTH_HEADER",
        "importPath": "oauthlib.oauth1",
        "description": "oauthlib.oauth1",
        "isExtraImport": true,
        "detail": "oauthlib.oauth1",
        "documentation": {}
    },
    {
        "label": "SIGNATURE_TYPE_AUTH_HEADER",
        "importPath": "oauthlib.oauth1",
        "description": "oauthlib.oauth1",
        "isExtraImport": true,
        "detail": "oauthlib.oauth1",
        "documentation": {}
    },
    {
        "label": "OAuth1",
        "importPath": "requests_oauthlib",
        "description": "requests_oauthlib",
        "isExtraImport": true,
        "detail": "requests_oauthlib",
        "documentation": {}
    },
    {
        "label": "OAuth1",
        "importPath": "requests_oauthlib",
        "description": "requests_oauthlib",
        "isExtraImport": true,
        "detail": "requests_oauthlib",
        "documentation": {}
    },
    {
        "label": "OAuth1",
        "importPath": "requests_oauthlib",
        "description": "requests_oauthlib",
        "isExtraImport": true,
        "detail": "requests_oauthlib",
        "documentation": {}
    },
    {
        "label": "OAuth1",
        "importPath": "requests_oauthlib",
        "description": "requests_oauthlib",
        "isExtraImport": true,
        "detail": "requests_oauthlib",
        "documentation": {}
    },
    {
        "label": "OAuth1",
        "importPath": "requests_oauthlib",
        "description": "requests_oauthlib",
        "isExtraImport": true,
        "detail": "requests_oauthlib",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sub",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "ax",
        "importPath": "openid.extensions",
        "description": "openid.extensions",
        "isExtraImport": true,
        "detail": "openid.extensions",
        "documentation": {}
    },
    {
        "label": "ax",
        "importPath": "openid.extensions",
        "description": "openid.extensions",
        "isExtraImport": true,
        "detail": "openid.extensions",
        "documentation": {}
    },
    {
        "label": "ax",
        "importPath": "openid.extensions",
        "description": "openid.extensions",
        "isExtraImport": true,
        "detail": "openid.extensions",
        "documentation": {}
    },
    {
        "label": "ax",
        "importPath": "openid.extensions",
        "description": "openid.extensions",
        "isExtraImport": true,
        "detail": "openid.extensions",
        "documentation": {}
    },
    {
        "label": "pape",
        "importPath": "openid.extensions",
        "description": "openid.extensions",
        "isExtraImport": true,
        "detail": "openid.extensions",
        "documentation": {}
    },
    {
        "label": "sreg",
        "importPath": "openid.extensions",
        "description": "openid.extensions",
        "isExtraImport": true,
        "detail": "openid.extensions",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "minidom",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "minidom",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "CANCEL",
        "importPath": "openid.consumer.consumer",
        "description": "openid.consumer.consumer",
        "isExtraImport": true,
        "detail": "openid.consumer.consumer",
        "documentation": {}
    },
    {
        "label": "FAILURE",
        "importPath": "openid.consumer.consumer",
        "description": "openid.consumer.consumer",
        "isExtraImport": true,
        "detail": "openid.consumer.consumer",
        "documentation": {}
    },
    {
        "label": "SUCCESS",
        "importPath": "openid.consumer.consumer",
        "description": "openid.consumer.consumer",
        "isExtraImport": true,
        "detail": "openid.consumer.consumer",
        "documentation": {}
    },
    {
        "label": "Consumer",
        "importPath": "openid.consumer.consumer",
        "description": "openid.consumer.consumer",
        "isExtraImport": true,
        "detail": "openid.consumer.consumer",
        "documentation": {}
    },
    {
        "label": "DiscoveryFailure",
        "importPath": "openid.consumer.discover",
        "description": "openid.consumer.discover",
        "isExtraImport": true,
        "detail": "openid.consumer.discover",
        "documentation": {}
    },
    {
        "label": "timegm",
        "importPath": "calendar",
        "description": "calendar",
        "isExtraImport": true,
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "timegm",
        "importPath": "calendar",
        "description": "calendar",
        "isExtraImport": true,
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "ExpiredSignatureError",
        "importPath": "jose.jwt",
        "description": "jose.jwt",
        "isExtraImport": true,
        "detail": "jose.jwt",
        "documentation": {}
    },
    {
        "label": "JWTClaimsError",
        "importPath": "jose.jwt",
        "description": "jose.jwt",
        "isExtraImport": true,
        "detail": "jose.jwt",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose.jwt",
        "description": "jose.jwt",
        "isExtraImport": true,
        "detail": "jose.jwt",
        "documentation": {}
    },
    {
        "label": "base64url_decode",
        "importPath": "jose.utils",
        "description": "jose.utils",
        "isExtraImport": true,
        "detail": "jose.utils",
        "documentation": {}
    },
    {
        "label": "OneLogin_Saml2_Auth",
        "importPath": "onelogin.saml2.auth",
        "description": "onelogin.saml2.auth",
        "isExtraImport": true,
        "detail": "onelogin.saml2.auth",
        "documentation": {}
    },
    {
        "label": "OneLogin_Saml2_Settings",
        "importPath": "onelogin.saml2.settings",
        "description": "onelogin.saml2.settings",
        "isExtraImport": true,
        "detail": "onelogin.saml2.settings",
        "documentation": {}
    },
    {
        "label": "imp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imp",
        "description": "imp",
        "detail": "imp",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "HTTPretty",
        "importPath": "httpretty",
        "description": "httpretty",
        "isExtraImport": true,
        "detail": "httpretty",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "HTMLParser",
        "importPath": "html.parser",
        "description": "html.parser",
        "isExtraImport": true,
        "detail": "html.parser",
        "documentation": {}
    },
    {
        "label": "oidutil",
        "importPath": "openid",
        "description": "openid",
        "isExtraImport": true,
        "detail": "openid",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "OAuth2Test",
        "importPath": "social_core.tests.backends.oauth",
        "description": "social_core.tests.backends.oauth",
        "isExtraImport": true,
        "detail": "social_core.tests.backends.oauth",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "social_core.tests.backends.test_open_id_connect",
        "description": "social_core.tests.backends.test_open_id_connect",
        "isExtraImport": true,
        "detail": "social_core.tests.backends.test_open_id_connect",
        "documentation": {}
    },
    {
        "label": "ORCIDOAuth2",
        "importPath": "social_core.backends.orcid",
        "description": "social_core.backends.orcid",
        "isExtraImport": true,
        "detail": "social_core.backends.orcid",
        "documentation": {}
    },
    {
        "label": "OssoOAuth2",
        "importPath": "social_core.backends.osso",
        "description": "social_core.backends.osso",
        "isExtraImport": true,
        "detail": "social_core.backends.osso",
        "documentation": {}
    },
    {
        "label": "PayPalOAuth2",
        "importPath": "social_core.backends.paypal",
        "description": "social_core.backends.paypal",
        "isExtraImport": true,
        "detail": "social_core.backends.paypal",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "Association",
        "importPath": "openid.association",
        "description": "openid.association",
        "isExtraImport": true,
        "detail": "openid.association",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "OpenIDStore",
        "importPath": "openid.store.interface",
        "description": "openid.store.interface",
        "isExtraImport": true,
        "detail": "openid.store.interface",
        "documentation": {}
    },
    {
        "label": "SKEW",
        "importPath": "openid.store.nonce",
        "description": "openid.store.nonce",
        "isExtraImport": true,
        "detail": "openid.store.nonce",
        "documentation": {}
    },
    {
        "label": "unicodedata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unicodedata",
        "description": "unicodedata",
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "HTTPAdapter",
        "importPath": "requests.adapters",
        "description": "requests.adapters",
        "isExtraImport": true,
        "detail": "requests.adapters",
        "documentation": {}
    },
    {
        "label": "PoolManager",
        "importPath": "requests.packages.urllib3.poolmanager",
        "description": "requests.packages.urllib3.poolmanager",
        "isExtraImport": true,
        "detail": "requests.packages.urllib3.poolmanager",
        "documentation": {}
    },
    {
        "label": "social_core",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "social_core",
        "description": "social_core",
        "detail": "social_core",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "social_django.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "social_django.fields",
        "description": "social_django.fields",
        "detail": "social_django.fields",
        "documentation": {}
    },
    {
        "label": "social_django.storage",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "social_django.storage",
        "description": "social_django.storage",
        "detail": "social_django.storage",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "SimpleLazyObject",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "Promise",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "user_backends_data",
        "importPath": "social_core.backends.utils",
        "description": "social_core.backends.utils",
        "isExtraImport": true,
        "detail": "social_core.backends.utils",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "FieldDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "MessageFailure",
        "importPath": "django.contrib.messages.api",
        "description": "django.contrib.messages.api",
        "isExtraImport": true,
        "detail": "django.contrib.messages.api",
        "documentation": {}
    },
    {
        "label": "MiddlewareMixin",
        "importPath": "django.utils.deprecation",
        "description": "django.utils.deprecation",
        "isExtraImport": true,
        "detail": "django.utils.deprecation",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "social_core.storage",
        "description": "social_core.storage",
        "isExtraImport": true,
        "detail": "social_core.storage",
        "documentation": {}
    },
    {
        "label": "AssociationMixin",
        "importPath": "social_core.storage",
        "description": "social_core.storage",
        "isExtraImport": true,
        "detail": "social_core.storage",
        "documentation": {}
    },
    {
        "label": "NonceMixin",
        "importPath": "social_core.storage",
        "description": "social_core.storage",
        "isExtraImport": true,
        "detail": "social_core.storage",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "social_core.storage",
        "description": "social_core.storage",
        "isExtraImport": true,
        "detail": "social_core.storage",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "get_language",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "BaseStrategy",
        "importPath": "social_core.strategy",
        "description": "social_core.strategy",
        "isExtraImport": true,
        "detail": "social_core.strategy",
        "documentation": {}
    },
    {
        "label": "BaseTemplateStrategy",
        "importPath": "social_core.strategy",
        "description": "social_core.strategy",
        "isExtraImport": true,
        "detail": "social_core.strategy",
        "documentation": {}
    },
    {
        "label": "require_POST",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {}
    },
    {
        "label": "never_cache",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "do_auth",
        "importPath": "social_core.actions",
        "description": "social_core.actions",
        "isExtraImport": true,
        "detail": "social_core.actions",
        "documentation": {}
    },
    {
        "label": "do_complete",
        "importPath": "social_core.actions",
        "description": "social_core.actions",
        "isExtraImport": true,
        "detail": "social_core.actions",
        "documentation": {}
    },
    {
        "label": "do_disconnect",
        "importPath": "social_core.actions",
        "description": "social_core.actions",
        "isExtraImport": true,
        "detail": "social_core.actions",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "staff",
        "description": "staff",
        "isExtraImport": true,
        "detail": "staff",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "trainer",
        "description": "trainer",
        "isExtraImport": true,
        "detail": "trainer",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "Credentials",
        "importPath": "google.oauth2.credentials",
        "description": "google.oauth2.credentials",
        "isExtraImport": true,
        "detail": "google.oauth2.credentials",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "google.auth.transport.requests",
        "description": "google.auth.transport.requests",
        "isExtraImport": true,
        "detail": "google.auth.transport.requests",
        "documentation": {}
    },
    {
        "label": "googleapiclient.errors",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "googleapiclient.errors",
        "description": "googleapiclient.errors",
        "detail": "googleapiclient.errors",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "blogs.urls",
        "description": "blogs.urls",
        "peekOfCode": "urlpatterns = [\n    path('ushms', TemplateView.as_view(template_name='blogs/ushms.html'),name='ushms'),\n]",
        "detail": "blogs.urls",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def login(request):\n    return render(request, 'loginrelated/userlogin.html')\n@login_required\ndef user_change_password_view(request):\n    try:    \n        sub = forms.ContactusForm()\n        if request.method == 'POST':\n            u = request.user\n            u.set_password(request.POST['passid'])\n            u.save() # Add this line",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "user_change_password_view",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def user_change_password_view(request):\n    try:    \n        sub = forms.ContactusForm()\n        if request.method == 'POST':\n            u = request.user\n            u.set_password(request.POST['passid'])\n            u.save() # Add this line\n            update_session_auth_hash(request, u)\n            return HttpResponseRedirect('indexpage')  \n        return render(request, 'lxpapp/users/changepassword.html')",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def home(request):\n    if request.user.is_authenticated:\n        # user = User.objects.raw('SELECT   auth_user.id,  auth_user.password,  auth_user.last_login,  auth_user.is_superuser,  auth_user.username,  auth_user.first_name,  auth_user.email,  auth_user.is_staff,  auth_user.is_active,  auth_user.date_joined,  auth_user.last_name,  social_auth_usersocialauth.provider,  social_auth_usersocialauth.uid,  social_auth_usersocialauth.extra_data,  social_auth_usersocialauth.user_id,  social_auth_usersocialauth.utype,  social_auth_usersocialauth.status,  social_auth_usersocialauth.modified,  social_auth_usersocialauth.pic,  social_auth_usersocialauth.usercode,  social_auth_usersocialauth.created FROM  social_auth_usersocialauth  INNER JOIN auth_user ON (social_auth_usersocialauth.user_id = auth_user.id)')\n        # update_session_auth_hash(request, user)\n        return HttpResponseRedirect('indexpage')  \n    return render(request,'lxpapp/404page.html')\ndef afterlogin_view(request):\n    user = UserSocialAuth.objects.all().filter(user_id = request.user.id)\n    if not user:\n        request.session['utype'] = 'admin'",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "afterlogin_view",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def afterlogin_view(request):\n    user = UserSocialAuth.objects.all().filter(user_id = request.user.id)\n    if not user:\n        request.session['utype'] = 'admin'\n        return redirect('admin-dashboard')\n    elif user:\n        for xx in user:\n            if xx.utype == 1:\n                if xx.status:\n                    request.session['utype'] = 'trainer'",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "adminclick_view",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def adminclick_view(request):\n    if request.user.is_authenticated:\n        return HttpResponseRedirect('indexpage')\n    return HttpResponseRedirect('userlogin')\n@login_required\ndef admin_dashboard_view(request):\n    try:\n        if str(request.session['utype']) == 'admin':\n            dict={\n            'total_learner':0,",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "admin_dashboard_view",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def admin_dashboard_view(request):\n    try:\n        if str(request.session['utype']) == 'admin':\n            dict={\n            'total_learner':0,\n            'total_trainer':0,\n            'total_exam':0,\n            'total_question':0,\n            }\n            return render(request,'lxpapp/admin_dashboard.html',context=dict)",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "aboutus_view",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def aboutus_view(request):\n    return render(request,'lxpapp/aboutus.html')\ndef contactus_view(request):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            sub = forms.ContactusForm()\n            if request.method == 'POST':\n                sub = forms.ContactusForm(request.POST)\n                if sub.is_valid():\n                    email = sub.cleaned_data['Email']",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "contactus_view",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def contactus_view(request):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            sub = forms.ContactusForm()\n            if request.method == 'POST':\n                sub = forms.ContactusForm(request.POST)\n                if sub.is_valid():\n                    email = sub.cleaned_data['Email']\n                    name=sub.cleaned_data['Name']\n                    message = sub.cleaned_data['Message']",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "getUserTable",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def getUserTable(request):\n    users = UserSocialAuth.objects.raw('SELECT   SOCIAL_AUTH_USERSOCIALAUTH.ID,  SOCIAL_AUTH_USERSOCIALAUTH.USER_ID,  AUTH_USER.FIRST_NAME,  AUTH_USER.LAST_NAME,  LXPAPP_LEARNERDETAILS.MOBILE FROM  SOCIAL_AUTH_USERSOCIALAUTH  LEFT OUTER JOIN AUTH_USER ON (SOCIAL_AUTH_USERSOCIALAUTH.USER_ID = AUTH_USER.ID)  LEFT OUTER JOIN LXPAPP_LEARNERDETAILS ON (AUTH_USER.ID = LXPAPP_LEARNERDETAILS.LEARNER_ID) ORDER BY  AUTH_USER.FIRST_NAME,  AUTH_USER.LAST_NAME')\n    return users\n@login_required\ndef admin_view_user_list_view(request):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            users = getUserTable(request)\n            return render(request,'lxpapp/users/admin_view_user_list.html',{'users':users})\n    except:",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "admin_view_user_list_view",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def admin_view_user_list_view(request):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            users = getUserTable(request)\n            return render(request,'lxpapp/users/admin_view_user_list.html',{'users':users})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef admin_view_user_grid_view(request):\n    try:    ",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "admin_view_user_grid_view",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def admin_view_user_grid_view(request):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            users = getUserTable(request)\n            return render(request,'lxpapp/users/admin_view_user_grid.html',{'users':users})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef update_user_view(request,userfirstname,userlastname,userid,pk):\n    try:    ",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "update_user_view",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def update_user_view(request,userfirstname,userlastname,userid,pk):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            if request.method == 'POST':\n                course = request.POST.getlist('courses[]')\n                active = request.POST.get('active')\n                usertype = request.POST.getlist('utype[]')\n                users = UserSocialAuth.objects.get(id=pk)\n                if active:\n                    users.status = True",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "active_user_view",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def active_user_view(request,userid,pk):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            cursor = connection.cursor()\n            cursor.execute(\"UPDATE social_auth_usersocialauth SET status = 1 WHERE id = \" + str(pk))\n            users = models.User.objects.raw(\"SELECT * FROM social_auth_usersocialauth where user_id = \" + str(pk))\n            isfirstlogin =models.IsFirstLogIn.objects.all().filter(user_id = userid)\n            if not isfirstlogin:\n                isfirstlogin =models.IsFirstLogIn.objects.create(user_id = userid)\n                isfirstlogin.save()",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "inactive_user_view",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def inactive_user_view(request,pk):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            cursor = connection.cursor()\n            cursor.execute(\"UPDATE social_auth_usersocialauth SET status = 0 WHERE id = \" + str(pk))\n            users = models.User.objects.raw(\"SELECT * FROM social_auth_usersocialauth where user_id = \" + str(request.user.id))\n            return HttpResponseRedirect('/admin-view-user-list',{'users':users})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "delete_user_view",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def delete_user_view(request,userid,pk):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            # cursor = connection.cursor()\n            # cursor.execute(\"DELETE FROM lxpapp_BatchTrainer WHERE trainer_id = \" + str(pk))\n            # cursor.execute(\"DELETE FROM lxpapp_UserPics WHERE user_id = \" + str(userid))\n            # cursor.execute(\"DELETE FROM lxpapp_UserCourse WHERE user_id = \" + str(userid))\n            # cursor.execute(\"DELETE FROM lxpapp_LearnerDetails WHERE learner_id = \" + str(userid))\n            # cursor.execute(\"DELETE FROM lxpapp_IsFirstLogIn WHERE user_id = \" + str(userid))\n            # cursor.execute(\"DELETE FROM lxpapp_McqResult WHERE learner_id = \" + str(userid))",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "TrainerConfig",
        "kind": 6,
        "importPath": "cfo.apps",
        "description": "cfo.apps",
        "peekOfCode": "class TrainerConfig(AppConfig):\n    name = 'cfo'",
        "detail": "cfo.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cfo.urls",
        "description": "cfo.urls",
        "peekOfCode": "urlpatterns = [\n    path('cfo-dashboard', views.cfo_dashboard_view,name='cfo-dashboard'),\n    path('cfo-add-coursetype', views.cfo_add_coursetype_view,name='cfo-add-coursetype'),\n    path('cfo-update-coursetype/<int:pk>', views.cfo_update_coursetype_view,name='cfo-update-coursetype'),\n    path('cfo-view-coursetype', views.cfo_view_coursetype_view,name='cfo-view-coursetype'),\n    path('cfo-delete-coursetype/<int:pk>', views.cfo_delete_coursetype_view,name='cfo-delete-coursetype'),\n    path('cfo-add-batch', views.cfo_add_batch_view,name='cfo-add-batch'),\n    path('cfo-update-batch/<int:pk>', views.cfo_update_batch_view,name='cfo-update-batch'),\n    path('cfo-view-batch', views.cfo_view_batch_view,name='cfo-view-batch'),\n    path('cfo-delete-batch/<int:pk>', views.cfo_delete_batch_view,name='cfo-delete-batch'),",
        "detail": "cfo.urls",
        "documentation": {}
    },
    {
        "label": "cfo_dashboard_view",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_dashboard_view(request):\n    try:\n        if str(request.session['utype']) == 'cfo':\n            dict={\n            'total_course':0,\n            'total_exam':0,\n            'total_shortExam':0,\n            'total_question':0,\n            'total_learner':0\n            }",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_add_coursetype_view",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_add_coursetype_view(request):\n    form = LXPFORM.CourseTypeForm(request.POST or None)\n    context = {\n        'form': form,\n        'page_title': 'Add Course Type'\n    }\n    if request.method == 'POST':\n        if form.is_valid():\n            name = form.cleaned_data.get('coursetype_name')\n            coursetype = LXPModel.CourseType.objects.all().filter(coursetype_name__iexact = name)",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_update_coursetype_view",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_update_coursetype_view(request, pk):\n    instance = get_object_or_404(LXPModel.CourseType, id=pk)\n    form = LXPFORM.CourseTypeForm(request.POST or None, instance=instance)\n    context = {\n        'form': form,\n        'coursetype_id': pk,\n        'page_title': 'Edit CourseType'\n    }\n    if request.method == 'POST':\n        if form.is_valid():",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_view_coursetype_view",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_view_coursetype_view(request):\n    try:\n        if str(request.session['utype']) == 'cfo':\n            coursetypes = LXPModel.CourseType.objects.all()\n            return render(request,'cfo/coursetype/cfo_view_coursetype.html',{'coursetypes':coursetypes})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cfo_delete_coursetype_view(request,pk):\n    try:",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_delete_coursetype_view",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_delete_coursetype_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'cfo':  \n            coursetype=LXPModel.CourseType.objects.get(id=pk)\n            coursetype.delete()\n            return HttpResponseRedirect('/cfo/cfo-view-coursetype')\n        coursetypes = LXPModel.CourseType.objects.all()\n        return render(request,'cfo/coursetype/cfo_view_coursetype.html',{'coursetypes':coursetypes})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_add_batch_view",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_add_batch_view(request):\n    try:\n        if str(request.session['utype']) == 'cfo':\n            if request.method=='POST':\n                batchForm=LXPFORM.BatchForm(request.POST)\n                batchtext = batchForm.data[\"batch_name\"]\n                batch = LXPModel.Batch.objects.all().filter(batch_name__iexact = batchtext)\n                if batch:\n                    messages.info(request, 'Batch Name Already Exist')\n                    batchForm=LXPFORM.BatchForm()",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_update_batch_view",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_update_batch_view(request,pk):\n    #try:\n        if str(request.session['utype']) == 'cfo':\n            batch = LXPModel.Batch.objects.get(id=pk)\n            batchForm=LXPFORM.BatchForm(request.POST,instance=batch)\n            if request.method=='POST':\n                if batchForm.is_valid(): \n                    batchtext = batchForm.cleaned_data[\"batch_name\"]\n                    batch = LXPModel.Batch.objects.all().filter(batch_name__iexact = batchtext).exclude(id=pk)\n                    if batch:",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_view_batch_view",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_view_batch_view(request):\n    try:\n        if str(request.session['utype']) == 'cfo':\n            batchs = LXPModel.Batch.objects.all()\n            return render(request,'cfo/batch/cfo_view_batch.html',{'batchs':batchs})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cfo_view_batch_details_view(request,batchname,pk):\n    try:",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_view_batch_details_view",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_view_batch_details_view(request,batchname,pk):\n    try:\n        if str(request.session['utype']) == 'cfo':\n            batchs = LXPModel.Batch.objects.raw(\"SELECT lxpapp_batch.id, GROUP_CONCAT(DISTINCT lxpapp_course.course_name) AS course_name, GROUP_CONCAT(DISTINCT lxpapp_playlist.name) AS video_name, lxpapp_batch.stdate, lxpapp_batch.enddate, GROUP_CONCAT(DISTINCT trainer.first_name || ' ' || trainer.last_name) AS trainer_name, GROUP_CONCAT(DISTINCT learner.first_name || ' ' || learner.last_name) AS learner_name FROM lxpapp_batch LEFT OUTER JOIN lxpapp_batchcourse ON (lxpapp_batchcourse.batch_id = lxpapp_batch.id) LEFT OUTER JOIN lxpapp_batchrecordedvdolist ON (lxpapp_batchrecordedvdolist.batch_id = lxpapp_batch.id) LEFT OUTER JOIN lxpapp_playlist ON (lxpapp_batchrecordedvdolist.playlist_id = lxpapp_playlist.id) LEFT OUTER JOIN lxpapp_batchlearner ON (lxpapp_batch.id = lxpapp_batchlearner.batch_id) LEFT OUTER JOIN lxpapp_batchtrainer ON (lxpapp_batch.id = lxpapp_batchtrainer.batch_id) LEFT OUTER JOIN auth_user trainer ON (lxpapp_batchtrainer.trainer_id = trainer.id) LEFT OUTER JOIN lxpapp_course ON (lxpapp_batchcourse.course_id = lxpapp_course.id) LEFT OUTER JOIN auth_user learner ON (lxpapp_batchlearner.learner_id = learner.id) WHERE lxpapp_batch.id = \" + str(pk))\n            return render(request,'cfo/batch/cfo_view_batch_details.html',{'batchs':batchs,'batchname':batchname})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cfo_delete_batch_view(request,pk):\n    try:",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_delete_batch_view",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_delete_batch_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'cfo':  \n            batch=LXPModel.Batch.objects.get(id=pk)\n            batch.delete()\n        batchs = LXPModel.Batch.objects.all()\n        return render(request,'cfo/batch/cfo_view_batch.html',{'batchs':batchs})\n    except:\n        return render(request,'lxpapp/404page.html')\n# Create Scheduler",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "generate_meeting_link",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def generate_meeting_link(request,meeting_type):\n    type ={'1':'Session',\n           '2':'Interview',\n           '3':'Client Requirment',\n           '4':'Lab Call',\n           '5':'Meeting',\n           '6':'Others'}\n    now = datetime.datetime.now()\n    timestamp = now.strftime(\"%Y%m%d%H%M%S\") + f\"{now.microsecond // 1000:03d}\"\n    base_url = \"https://3.145.162.154/\"  # Replace with your actual meeting service URL",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_create_scheduler",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_create_scheduler(request):\n    if str(request.session['utype']) != 'cfo':\n        return render(request, 'lxpapp/404page.html')\n    if request.method == 'POST':\n        trainer = request.POST.get('trainer')\n        type = request.POST.get('type')\n        subject = request.POST.get('subject')\n        chapter = request.POST.get('chapter')\n        topic = request.POST.get('topic')\n        start = request.POST.get('start')",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_update_scheduler",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_update_scheduler(request, scheduler_id):\n    if str(request.session['utype']) != 'cfo':\n        return render(request,'lxpapp/404page.html')\n    # Get the Scheduler object to be updated\n    scheduler = get_object_or_404(LXPModel.Scheduler, id=scheduler_id)\n    if request.method == \"POST\":\n        trainer = request.POST.get('trainer')\n        type = request.POST.get('type')\n        subject = request.POST.get('subject')\n        chapter = request.POST.get('chapter')",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_scheduler_list",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_scheduler_list(request):\n    if str(request.session['utype']) != 'cfo':\n        return render(request,'lxpapp/404page.html')\n    schedulers = LXPModel.Scheduler.objects.all()\n    return render(request, 'cfo/scheduler/scheduler_list.html', {'schedulers': schedulers})\n# List scheduler_calender\n@login_required\ndef cfo_scheduler_calender(request):\n    if str(request.session['utype']) != 'cfo':\n        return render(request,'lxpapp/404page.html')",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_scheduler_calender",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_scheduler_calender(request):\n    if str(request.session['utype']) != 'cfo':\n        return render(request,'lxpapp/404page.html')\n    schedulers = LXPModel.Scheduler.objects.annotate(\n        status_sum=Coalesce(Sum('schedulerstatus__status'), Value(0)),\n        completion_date=Case(\n            When(status_sum__gte=100, then=Max('schedulerstatus__date')),\n            default=Value(None),\n        )\n    )",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "get_meetings",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def get_meetings(request):\n    meetings = LXPModel.Scheduler.objects.all()\n    events = [\n        {\n            \"title\": f\"{meeting.subject.name if meeting.subject else meeting.eventdetails}\",\n            \"start\": meeting.start.isoformat(),\n            \"end\": meeting.end.isoformat(),\n            \"meeting_link\": meeting.meeting_link,  # Include meeting link\n        }\n        for meeting in meetings",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "cfo_delete_scheduler",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def cfo_delete_scheduler(request, scheduler_id):\n    if str(request.session['utype']) != 'cfo':\n        return render(request,'lxpapp/404page.html')\n    scheduler = get_object_or_404(LXPModel.Scheduler, id=scheduler_id)\n    scheduler.delete()\n    return redirect('scheduler_list')    \n@login_required\ndef get_chapters(request, subject_id):\n    chapters = LXPModel.Chapter.objects.all().filter(subject_id = subject_id)  # Adjust logic if needed\n    return JsonResponse([{'id': chapter.id, 'name': chapter.chapter_name} for chapter in chapters], safe=False)",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "get_chapters",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def get_chapters(request, subject_id):\n    chapters = LXPModel.Chapter.objects.all().filter(subject_id = subject_id)  # Adjust logic if needed\n    return JsonResponse([{'id': chapter.id, 'name': chapter.chapter_name} for chapter in chapters], safe=False)\n@login_required\ndef get_topics(request, chapter_id):\n    topics = LXPModel.Topic.objects.all().filter(chapter_id = chapter_id)\n    return JsonResponse([{'id': topic.id, 'name': topic.topic_name} for topic in topics], safe=False)\nimport jwt\nimport datetime\nimport uuid",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "get_topics",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def get_topics(request, chapter_id):\n    topics = LXPModel.Topic.objects.all().filter(chapter_id = chapter_id)\n    return JsonResponse([{'id': topic.id, 'name': topic.topic_name} for topic in topics], safe=False)\nimport jwt\nimport datetime\nimport uuid\nfrom django.shortcuts import render\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import JsonResponse\nJITSI_SECRET = \"a5f9c73e4d85e0c9f25b2d4394b6d24d5c00f27aaebef34f97f13a9f6f1c9ec7\"",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "generate_jitsi_token",
        "kind": 2,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "def generate_jitsi_token(username, meeting_id, is_host):\n    payload = {\n        \"context\": {\n            \"user\": {\n                \"name\": username,\n                \"id\": username\n            }\n        },\n        \"aud\": \"my_django_app\",\n        \"iss\": \"my_django_app\",",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "JITSI_SECRET",
        "kind": 5,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "JITSI_SECRET = \"a5f9c73e4d85e0c9f25b2d4394b6d24d5c00f27aaebef34f97f13a9f6f1c9ec7\"\nJITSI_SERVER = \"https://34.235.128.110\"  # Replace with your Jitsi Meet server IP\ndef generate_jitsi_token(username, meeting_id, is_host):\n    payload = {\n        \"context\": {\n            \"user\": {\n                \"name\": username,\n                \"id\": username\n            }\n        },",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "JITSI_SERVER",
        "kind": 5,
        "importPath": "cfo.views",
        "description": "cfo.views",
        "peekOfCode": "JITSI_SERVER = \"https://34.235.128.110\"  # Replace with your Jitsi Meet server IP\ndef generate_jitsi_token(username, meeting_id, is_host):\n    payload = {\n        \"context\": {\n            \"user\": {\n                \"name\": username,\n                \"id\": username\n            }\n        },\n        \"aud\": \"my_django_app\",",
        "detail": "cfo.views",
        "documentation": {}
    },
    {
        "label": "ctoConfig",
        "kind": 6,
        "importPath": "cto.apps",
        "description": "cto.apps",
        "peekOfCode": "class ctoConfig(AppConfig):\n    name = 'cto'",
        "detail": "cto.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cto.urls",
        "description": "cto.urls",
        "peekOfCode": "urlpatterns = [\n    path('cto-dashboard', views.cto_dashboard_view,name='cto-dashboard'),\n    path('cto-add-subject', views.cto_add_subject_view,name='cto-add-subject'),\n    path('cto-update-subject/<int:pk>', views.cto_update_subject_view,name='cto-update-subject'),\n    path('cto-view-subject', views.cto_view_subject_view,name='cto-view-subject'),\n    path('cto-delete-subject/<int:pk>', views.cto_delete_subject_view,name='cto-delete-subject'),\n    path('cto-upload-subject-details-csv', views.cto_upload_subject_details_csv_view,name='cto-upload-subject-details-csv'),\n    path('cto-add-chapter', views.cto_add_chapter_view,name='cto-add-chapter'),\n    path('cto-update-chapter/<int:pk>', views.cto_update_chapter_view,name='cto-update-chapter'),\n    path('cto-view-chapter', views.cto_view_chapter_view,name='cto-view-chapter'),",
        "detail": "cto.urls",
        "documentation": {}
    },
    {
        "label": "cto_dashboard_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_dashboard_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            dict={\n            'total_course':0,\n            'total_exam':0,\n            'total_shortCourse':0,\n            'total_question':0,\n            'total_learner':0,\n            'final':'final'",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_add_mainhead_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_add_mainhead_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            form = LXPFORM.MainHeadForm(request.POST or None)\n            context = {\n                'form': form,\n                'page_title': 'Add Main Head'\n            }\n            if request.method == 'POST':\n                if form.is_valid():",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_update_mainhead_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_update_mainhead_view(request, pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            instance = get_object_or_404(LXPModel.MainHead, id=pk)\n            form = LXPFORM.MainHeadForm(request.POST or None, instance=instance)\n            context = {\n                'form': form,\n                'mainhead_id': pk,\n                'page_title': 'Edit Main Head'\n            }",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_mainhead_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_mainhead_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            mainheads = LXPModel.MainHead.objects.all()\n            return render(request,'cto/mainhead/cto_view_mainhead.html',{'mainheads':mainheads})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_delete_mainhead_view(request,pk):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_delete_mainhead_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_delete_mainhead_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'cto':  \n            mainhead=LXPModel.MainHead.objects.get(id=pk)\n            mainhead.delete()\n            return HttpResponseRedirect('/cto/cto-view-mainhead')\n        mainheads = LXPModel.MainHead.objects.all()\n        return render(request,'cto/mainhead/cto_view_mainhead.html',{'mainheads':mainheads})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_add_subhead_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_add_subhead_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            form = LXPFORM.SubHeadForm(request.POST or None)\n            context = {\n                'form': form,\n                'page_title': 'Add Sub Head'\n            }\n            if request.method == 'POST':\n                if form.is_valid():",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_update_subhead_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_update_subhead_view(request, pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            instance = get_object_or_404(LXPModel.SubHead, id=pk)\n            form = LXPFORM.SubHeadForm(request.POST or None, instance=instance)\n            context = {\n                'form': form,\n                'subhead_id': pk,\n                'page_title': 'Edit Sub Head'\n            }",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_subhead_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_subhead_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            subheads = LXPModel.SubHead.objects.all()\n            return render(request,'cto/subhead/cto_view_subhead.html',{'subheads':subheads})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_delete_subhead_view(request,pk):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_delete_subhead_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_delete_subhead_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'cto':  \n            subhead=LXPModel.SubHead.objects.get(id=pk)\n            subhead.delete()\n            subheads = LXPModel.SubHead.objects.all()\n            return render(request,'cto/subhead/cto_view_subhead.html',{'subheads':subheads})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_add_subject_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_add_subject_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            form = LXPFORM.SubjectForm(request.POST or None)\n            context = {\n                'form': form,\n                'page_title': 'Add Subject'\n            }\n            if request.method == 'POST':\n                if form.is_valid():",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_update_subject_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_update_subject_view(request, pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            instance = get_object_or_404(LXPModel.Subject, id=pk)\n            form = LXPFORM.SubjectForm(request.POST or None, instance=instance)\n            context = {\n                'form': form,\n                'subject_id': pk,\n                'page_title': 'Edit Subject'\n            }",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_subject_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_subject_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            subjects = LXPModel.Subject.objects.all()\n            return render(request,'cto/subject/cto_view_subject.html',{'subjects':subjects})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_delete_subject_view(request,pk):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_delete_subject_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_delete_subject_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'cto':  \n            subject=LXPModel.Subject.objects.get(id=pk)\n            subject.delete()\n            return HttpResponseRedirect('/cto/cto-view-subject')\n        subjects = LXPModel.Subject.objects.all()\n        return render(request,'cto/subject/cto_view_subject.html',{'subjects':subjects})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_upload_subject_details_csv_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_upload_subject_details_csv_view(request):\n    #try:\n        if str(request.session['utype']) == 'cto':\n            if request.method=='POST':\n                    file=request.FILES[\"select_file\"]\n                    csv_file = request.FILES[\"select_file\"]\n                    file_data = csv_file.read().decode(\"utf-8\")\t\t\n                    lines = file_data.split(\"\\n\")\n                    oldsub =''\n                    oldchap=''",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_add_chapter_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_add_chapter_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            form = LXPFORM.ChapterForm(request.POST or None)\n            context = {\n                'form': form,\n                'page_title': 'Add Chapter'\n            }\n            if request.method == 'POST':\n                if form.is_valid():",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_update_chapter_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_update_chapter_view(request, pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            instance = get_object_or_404(LXPModel.Chapter, id=pk)\n            form = LXPFORM.ChapterForm(request.POST or None, instance=instance)\n            context = {\n                'form': form,\n                'chapter_id': pk,\n                'page_title': 'Edit Chapter'\n            }",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_chapter_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_chapter_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            c_list = LXPModel.Chapter.objects.all()\n            return render(request,'cto/chapter/cto_view_chapter.html',{'chapters':c_list})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_delete_chapter_view(request,pk):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_delete_chapter_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_delete_chapter_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'cto':  \n            chapter=LXPModel.Chapter.objects.get(id=pk)\n            chapter.delete()\n            chapters = LXPModel.Chapter.objects.all()\n            return render(request,'cto/chapter/cto_view_chapter.html',{'chapters':chapters})\n    except:\n        return render(request,'lxpapp/404page.html')\n    return render(request,'lxpapp/404page.html')",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_add_course_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_add_course_view(request):\n    #try:\n        if str(request.session['utype']) == 'cto':\n            form = LXPFORM.CourseForm(request.POST or None)\n            clist = LXPModel.Subject.objects.raw('SELECT  Distinct  lxpapp_subject.id as id,  lxpapp_chapter.id as chapter_id, lxpapp_subject.subject_name,  lxpapp_chapter.chapter_name  FROM  lxpapp_chapter  INNER JOIN lxpapp_subject ON (lxpapp_chapter.subject_id = lxpapp_subject.id) ORDER BY  lxpapp_subject.subject_name,  lxpapp_chapter.chapter_name')\n            sub = ''\n            oldsub = ''\n            js = '[{' \n            a = 1\n            for x in clist:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_update_course_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_update_course_view(request, pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            course_name = ''\n            description = ''\n            whatlearn = ''\n            includes = ''\n            image = ''\n            price = ''\n            tags = ''",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_course_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_course_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            c_list = LXPModel.Course.objects.raw('SELECT    lxpapp_course.id,  lxpapp_course.course_name,  lxpapp_course.description,  lxpapp_course.whatlearn,  lxpapp_course.includes,  lxpapp_course.themecolor,  lxpapp_course.tags,  lxpapp_course.image,  lxpapp_course.price,  lxpapp_mainhead.mainhead_name,  lxpapp_subhead.subhead_name,  COunt(lxpapp_material.topic) AS lessons FROM  lxpapp_course  LEFT OUTER JOIN lxpapp_mainhead ON (lxpapp_course.mainhead_id = lxpapp_mainhead.id)  LEFT OUTER JOIN lxpapp_subhead ON (lxpapp_course.subhead_id = lxpapp_subhead.id)  LEFT OUTER JOIN lxpapp_coursechapter ON (lxpapp_course.id = lxpapp_coursechapter.course_id)  LEFT OUTER JOIN lxpapp_material ON (lxpapp_coursechapter.chapter_id = lxpapp_material.chapter_id) GROUP BY  lxpapp_course.id,  lxpapp_course.course_name,  lxpapp_course.description,  lxpapp_course.whatlearn,  lxpapp_course.includes,  lxpapp_course.themecolor,  lxpapp_course.tags,  lxpapp_course.image,  lxpapp_course.price,  lxpapp_mainhead.mainhead_name,  lxpapp_subhead.subhead_name')\n            return render(request,'cto/course/cto_view_course.html',{'courses':c_list})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_delete_course_view(request,pk):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_delete_course_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_delete_course_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'cto':  \n            course=LXPModel.Course.objects.get(id=pk)\n            course.delete()\n        c_list = LXPModel.Course.objects.raw('SELECT    lxpapp_course.id,  lxpapp_course.course_name,  lxpapp_course.description,  lxpapp_course.whatlearn,  lxpapp_course.includes,  lxpapp_course.themecolor,  lxpapp_course.tags,  lxpapp_course.image,  lxpapp_course.price,  lxpapp_mainhead.mainhead_name,  lxpapp_subhead.subhead_name,  COunt(lxpapp_material.topic) AS lessons FROM  lxpapp_course  LEFT OUTER JOIN lxpapp_mainhead ON (lxpapp_course.mainhead_id = lxpapp_mainhead.id)  LEFT OUTER JOIN lxpapp_subhead ON (lxpapp_course.subhead_id = lxpapp_subhead.id)  LEFT OUTER JOIN lxpapp_coursechapter ON (lxpapp_course.id = lxpapp_coursechapter.course_id)  LEFT OUTER JOIN lxpapp_material ON (lxpapp_coursechapter.chapter_id = lxpapp_material.chapter_id) GROUP BY  lxpapp_course.id,  lxpapp_course.course_name,  lxpapp_course.description,  lxpapp_course.whatlearn,  lxpapp_course.includes,  lxpapp_course.themecolor,  lxpapp_course.tags,  lxpapp_course.image,  lxpapp_course.price,  lxpapp_mainhead.mainhead_name,  lxpapp_subhead.subhead_name')\n        return render(request,'cto/course/cto_view_course.html',{'courses':c_list})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_topic_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_topic_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            return render(request,'cto/topic/cto_topic.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_add_topic_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_add_topic_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_add_topic_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            form = LXPFORM.TopicForm(request.POST or None)\n            context = {\n                'form': form,\n                'page_title': 'Add Topic'\n            }\n            if request.method == 'POST':\n                if form.is_valid():",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_update_topic_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_update_topic_view(request, pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            instance = get_object_or_404(LXPModel.Topic, id=pk)\n            form = LXPFORM.TopicForm(request.POST or None, instance=instance)\n            context = {\n                'form': form,\n                'topic_id': pk,\n                'page_title': 'Edit Topic'\n            }",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_topic_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_topic_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            c_list = LXPModel.Topic.objects.all()\n            return render(request,'cto/topic/cto_view_topic.html',{'topics':c_list})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_delete_topic_view(request,pk):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_delete_topic_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_delete_topic_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'cto':  \n            topic=LXPModel.Topic.objects.get(id=pk)\n            topic.delete()\n            return HttpResponseRedirect('/cto/cto-view-topic')\n        topics = LXPModel.Topic.objects.all()\n        return render(request,'cto/topic/cto_view_topic.html',{'topics':topics})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_course_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_course_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            return render(request,'cto/course/cto_course.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_add_course_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_add_course_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_add_course_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            if request.method=='POST':\n                courseForm=LXPFORM.CourseForm(request.POST)\n                coursetext = request.POST.get('course_name')\n                course = LXPModel.Course.objects.all().filter(course_name__iexact = coursetext)\n                if course:\n                    messages.info(request, 'Course Name Already Exist')\n                    courseForm=LXPFORM.CourseForm()",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_update_course_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_update_course_view(request,coursename,pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            course = LXPModel.Course.objects.get(id=pk)\n            if request.method=='POST':\n                courseForm=LXPFORM.CourseForm(request.POST,instance=course)\n                coursetext = courseForm.data[\"course_name\"]\n                course = LXPModel.Course.objects.all().filter(course_name__iexact = coursetext).exclude(id=pk)\n                if course:\n                    messages.info(request, 'Course Name Already Exist')",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_course_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_course_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            courses = LXPModel.Course.objects.all()\n            return render(request,'cto/course/cto_view_course.html',{'courses':courses})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_view_course_details_view(request,coursename,pk):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_course_details_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_course_details_view(request,coursename,pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            courses = LXPModel.Course.objects.raw('SELECT 1 as id,  lxpapp_subject.subject_name,  lxpapp_course.course_name,  lxpapp_chapter.chapter_name,  lxpapp_topic.topic_name FROM  lxpapp_coursedetails  INNER JOIN lxpapp_course ON (lxpapp_coursedetails.course_id = lxpapp_course.id)  INNER JOIN lxpapp_subject ON (lxpapp_coursedetails.subject_id = lxpapp_subject.id)  INNER JOIN lxpapp_course ON (lxpapp_coursedetails.course_id = lxpapp_course.id)  INNER JOIN lxpapp_chapter ON (lxpapp_coursedetails.chapter_id = lxpapp_chapter.id)  INNER JOIN lxpapp_topic ON (lxpapp_coursedetails.topic_id = lxpapp_topic.id) WHERE lxpapp_coursedetails.course_id = ' + str(pk) + ' ORDER BY lxpapp_subject.subject_name,  lxpapp_course.course_name,  lxpapp_chapter.chapter_name,  lxpapp_topic.topic_name')\n            return render(request,'cto/course/cto_view_course_details.html',{'courses':courses,'coursename':coursename})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_delete_course_view(request,pk):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_delete_course_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_delete_course_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            coursedet=LXPModel.CourseDetails.objects.filter(course_id=pk).delete()\n            course=LXPModel.Course.objects.filter(id=pk).delete()\n        courses = LXPModel.Course.objects.all()\n        return render(request,'cto/course/cto_view_course.html',{'courses':courses})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_upload_course_details_csv_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_upload_course_details_csv_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            if request.method=='POST':\n                coursetext=request.POST.get('course_name')\n                course = LXPModel.Course.objects.all().filter(course_name__iexact = coursetext)\n                if course:\n                    messages.info(request, 'Course Name Already Exist')\n                elif coursetext == '':\n                    messages.info(request, 'Please enter Course Name')",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_courseset_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_courseset_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            return render(request,'cto/courseset/cto_courseset.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_add_courseset_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_add_courseset_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_add_courseset_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            if request.method=='POST':\n                coursesetForm=LXPFORM.CourseSetForm(request.POST)\n                coursesettext = request.POST.get('courseset_name')\n                courseset = LXPModel.CourseSet.objects.all().filter(courseset_name__iexact = coursesettext)\n                if courseset:\n                    messages.info(request, 'CourseSet Name Already Exist')\n                    coursesetForm=LXPFORM.CourseSetForm()",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_update_courseset_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_update_courseset_view(request,coursesetname,pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            courseset = LXPModel.CourseSet.objects.get(id=pk)\n            if request.method=='POST':\n                coursesetForm=LXPFORM.CourseSetForm(request.POST,instance=courseset)\n                coursesettext = coursesetForm.data[\"courseset_name\"]\n                courseset = LXPModel.CourseSet.objects.all().filter(courseset_name__iexact = coursesettext).exclude(id=pk)\n                if courseset:\n                    messages.info(request, 'CourseSet Name Already Exist')",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_courseset_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_courseset_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            coursesets = LXPModel.CourseSet.objects.all()\n            return render(request,'cto/courseset/cto_view_courseset.html',{'coursesets':coursesets})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_view_courseset_details_view(request,coursesetname,pk):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_courseset_details_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_courseset_details_view(request,coursesetname,pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            coursesets = LXPModel.CourseSet.objects.raw('SELECT 1 as id,  lxpapp_subject.subject_name,  lxpapp_course.course_name,  lxpapp_chapter.chapter_name,  lxpapp_topic.topic_name FROM  lxpapp_coursesetdetails  INNER JOIN lxpapp_courseset ON (lxpapp_coursesetdetails.courseset_id = lxpapp_courseset.id)  INNER JOIN lxpapp_subject ON (lxpapp_coursesetdetails.subject_id = lxpapp_subject.id)  INNER JOIN lxpapp_course ON (lxpapp_coursesetdetails.course_id = lxpapp_course.id)  INNER JOIN lxpapp_chapter ON (lxpapp_coursesetdetails.chapter_id = lxpapp_chapter.id)  INNER JOIN lxpapp_topic ON (lxpapp_coursesetdetails.topic_id = lxpapp_topic.id) WHERE lxpapp_coursesetdetails.courseset_id = ' + str(pk) + ' ORDER BY lxpapp_subject.subject_name,  lxpapp_course.course_name,  lxpapp_chapter.chapter_name,  lxpapp_topic.topic_name')\n            return render(request,'cto/courseset/cto_view_courseset_details.html',{'coursesets':coursesets,'coursesetname':coursesetname})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_delete_courseset_view(request,pk):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_delete_courseset_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_delete_courseset_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            coursesetdet=LXPModel.CourseSetDetails.objects.filter(courseset_id=pk).delete()\n            courseset=LXPModel.CourseSet.objects.filter(id=pk).delete()\n        coursesets = LXPModel.CourseSet.objects.all()\n        return render(request,'cto/courseset/cto_view_courseset.html',{'coursesets':coursesets})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_upload_courseset_details_csv_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_upload_courseset_details_csv_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            if request.method=='POST':\n                if request.POST.get('select_file') == '':\n                    messages.info(request, 'Please select CSV file for upload')\n                else:\n                    csv_file = request.FILES[\"select_file\"]\n                    file_data = csv_file.read().decode(\"utf-8\")\t\t\n                    lines = file_data.split(\"\\n\")",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "load_subheads",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def load_subheads(request):\n    try:\n        mainhead_id = request.GET.get('mainhead')\n        subheads = LXPModel.SubHead.objects.filter(mainhead_id=mainhead_id).order_by('subhead_name')\n        context = {'subheads': subheads}\n        return render(request, 'hr/subhead_dropdown_list_options.html', context)\n    except:\n        return render(request,'lxpapp/404page.html')\ndef load_courses(request):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "load_courses",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def load_courses(request):\n    try:\n        subject_id = request.GET.get('subject')\n        courses = LXPModel.Course.objects.filter(subject_id=subject_id).order_by('course_name')\n        context = {'courses': courses}\n        return render(request, 'hr/course_dropdown_list_options.html', context)\n    except:\n        return render(request,'lxpapp/404page.html')\ndef load_chapters(request):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "load_chapters",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def load_chapters(request):\n    try:\n        subject_id = request.GET.get('subject')\n        chapters = LXPModel.Chapter.objects.filter(subject_id=subject_id).order_by('chapter_name')\n        context = {'chapters': chapters}\n        return render(request, 'hr/chapter_dropdown_list_options.html', context)\n    except:\n        return render(request,'lxpapp/404page.html')\ndef load_topics(request):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "load_topics",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def load_topics(request):\n    try:\n        chapter_id = request.GET.get('chapter')\n        topics = LXPModel.Topic.objects.filter(chapter_id=chapter_id).order_by('topic_name')\n        context = {'topics': topics}\n        return render(request, 'hr/topic_dropdown_list_options.html', context)\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef getcredentials(request):",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "getcredentials",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def getcredentials(request):\n    os.environ[\"OAUTHLIB_INSECURE_TRANSPORT\"] = \"1\"\n    client_secrets_file = \"GoogleCredV1.json\"\n    # Get credentials and create an API client\n    flow = None\n    flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(\n        client_secrets_file, scopes)\n    flow.run_local_server()\n    credentials = flow.credentials\n    return credentials",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_sync_youtube_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_sync_youtube_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n    #pllist = LXPModel.IncludePlaylist.objects.all().filter(playlist_id__in =LXPModel.Playlist.objects.all().order_by('name'))\n            pllist = LXPModel.Playlist.objects.all().order_by('name')\n            return render(request,'cto/youtube/cto_sync_youtube.html',{'pllist':pllist})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_sync_youtube_start_view(request):",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_sync_youtube_start_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_sync_youtube_start_view(request):\n    #try:\n        if str(request.session['utype']) == 'cto':\n            if request.method=='POST':\n                pm = PlaylistManager()\n                credentials = getcredentials(request)\n                alllist = pm.initializePlaylist(credentials)\n                plcount = 1\n                maxcount = alllist.__len__()\n                for PL_ID in alllist:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_sync_youtube_byselected_playlist_start_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_sync_youtube_byselected_playlist_start_view(request):\n    #try:\n        if str(request.session['utype']) == 'cto':\n            if request.method=='POST':\n                if 'dblist' in request.POST:\n                    pllist = LXPModel.Playlist.objects.all().order_by('name')\n                    return render(request,'cto/youtube/cto_sync_youtube.html',{'pllist':pllist})\n                elif 'cloudlist' in request.POST:\n                    pm = PlaylistManager()\n                    credentials = getcredentials(request)",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "get_message_from_httperror",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def get_message_from_httperror(e):\n    return e.error_details[0]['message']\n######################################################################\n@login_required\ndef cto_trainernotification_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            return render(request,'cto/trainernotification/cto_trainernotification.html')\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_trainernotification_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_trainernotification_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            return render(request,'cto/trainernotification/cto_trainernotification.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_add_trainernotification_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_add_trainernotification_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_add_trainernotification_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            if request.method=='POST':\n                trainernotificationForm=LXPFORM.TrainerNotificationForm(request.POST)\n                if trainernotificationForm.is_valid(): \n                    trainernotificationtext = trainernotificationForm.cleaned_data[\"trainernotification_message\"]\n                    trainernotification = LXPModel.TrainerNotification.objects.all().filter(trainernotification_message__iexact = trainernotificationtext)\n                    if trainernotification:\n                        messages.info(request, 'TrainerNotification Name Already Exist')",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_update_trainernotification_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_update_trainernotification_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            trainernotification = LXPModel.TrainerNotification.objects.get(id=pk)\n            trainernotificationForm=LXPFORM.TrainerNotificationForm(request.POST,instance=trainernotification)\n            if request.method=='POST':\n                if trainernotificationForm.is_valid(): \n                    trainernotificationtext = trainernotificationForm.cleaned_data[\"trainernotification_message\"]\n                    trainernotification = LXPModel.TrainerNotification.objects.all().filter(trainernotification_message__iexact = trainernotificationtext).exclude(id=pk)\n                    if trainernotification:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_trainernotification_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_trainernotification_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            trainernotifications = LXPModel.TrainerNotification.objects.all()\n            return render(request,'cto/trainernotification/cto_view_trainernotification.html',{'trainernotifications':trainernotifications})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_delete_trainernotification_view(request,pk):\n    try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_delete_trainernotification_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_delete_trainernotification_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'cto':  \n            trainernotification=LXPModel.TrainerNotification.objects.get(id=pk)\n            trainernotification.delete()\n        trainernotifications = LXPModel.TrainerNotification.objects.all()\n        return render(request,'cto/trainernotification/cto_view_trainernotification.html',{'trainernotifications':trainernotifications})\n    except:\n        return render(request,'lxpapp/404page.html')\nfrom googleapiclient.discovery import build",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_lxp_upload_doc_file_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_lxp_upload_doc_file_view(request):\n    if request.method == 'POST' and request.FILES['file']:\n        emails = request.POST.get('emails-output')\n        emails = str(emails).replace('<span class=\"close\">x</span>','')\n        fields = emails.split(\",\")\n        import googleapiclient.discovery\n        scopes = [\"https://www.googleapis.com/auth/youtube.readonly\"]\n        from social_django.models import UserSocialAuth\n        from apiclient.discovery import build\n        from apiclient.errors import HttpError",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_add_playlist_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_add_playlist_view(request):\n    #try:\n        if str(request.session['utype']) == 'cto':\n            form = LXPFORM.PlayListForm(request.POST or None)\n            context = {\n                'form': form,\n                'page_title': 'Add Play List'\n            }\n            if request.method == 'POST':\n                if form.is_valid():",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_update_playlist_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_update_playlist_view(request, pk):\n    #try:\n        if str(request.session['utype']) == 'cto':\n            instance = get_object_or_404(LXPModel.Playlist, id=pk)\n            form = LXPFORM.PlayListForm(request.POST or None, instance=instance)\n            context = {\n                'form': form,\n                'playlist_id': pk,\n                'page_title': 'Edit Play List'\n            }",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_playlist_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_playlist_view(request):\n    #try:\n        if str(request.session['utype']) == 'cto':\n            playlists = LXPModel.Playlist.objects.all()\n            return render(request,'cto/playlist/cto_view_playlist.html',{'playlists':playlists})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_delete_playlist_view(request,pk):\n    #try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_delete_playlist_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_delete_playlist_view(request,pk):\n    #try:\n        if str(request.session['utype']) == 'cto':  \n            playlist=LXPModel.Playlist.objects.get(id=pk)\n            playlist.delete()\n        playlists = LXPModel.Playlist.objects.all()\n        return render(request,'cto/playlist/cto_view_playlist.html',{'playlists':playlists})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_video_list_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_video_list_view(request):\n    #try:\n        if str(request.session['utype']) == 'cto':\n            c_list = LXPModel.PlaylistItem.objects.raw(' SELECT DISTINCT  lxpapp_playlist.id as id, lxpapp_playlistitem.id as item_id, lxpapp_playlist.name as Pl_Name , lxpapp_video.id as vid_id,  lxpapp_video.name as vid_Name FROM  lxpapp_playlistitem  INNER JOIN lxpapp_playlist ON (lxpapp_playlistitem.playlist_id = lxpapp_playlist.id)  INNER JOIN lxpapp_video ON (lxpapp_playlistitem.video_id = lxpapp_video.id) ORDER BY  lxpapp_playlist.name,  lxpapp_video.name')\n            return render(request,'cto/youtube/cto_view_video_list.html',{'videos':c_list})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef cto_delete_video_view(request,pk,pl_id,vid_id):\n    #try:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_delete_video_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_delete_video_view(request,pk,pl_id,vid_id):\n    #try:\n        if str(request.session['utype']) == 'cto':  \n            delobj = LXPModel.PlaylistItem.objects.all().filter(id = pk).delete()\n            delobj = LXPModel.Video.objects.all().filter(id = vid_id).delete()\n        c_list = LXPModel.PlaylistItem.objects.raw(' SELECT DISTINCT  lxpapp_playlist.id as id, lxpapp_playlistitem.id as item_id, lxpapp_playlist.name as Pl_Name , lxpapp_video.id as vid_id,  lxpapp_video.name as vid_Name FROM  lxpapp_playlistitem  INNER JOIN lxpapp_playlist ON (lxpapp_playlistitem.playlist_id = lxpapp_playlist.id)  INNER JOIN lxpapp_video ON (lxpapp_playlistitem.video_id = lxpapp_video.id) ORDER BY  lxpapp_playlist.name,  lxpapp_video.name')\n        return render(request,'cto/youtube/cto_view_video_list.html',{'videos':c_list})\n    #except:\n        return render(request,'lxpapp/404page.html')\nfrom datetime import datetime",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "sync_playlists_and_videos",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def sync_playlists_and_videos():\n    # Fetch playlists from the channel\n    request = youtube.playlists().list(\n        part='snippet,contentDetails',\n        channelId=CHANNEL_ID,\n        maxResults=50\n    )\n    response = request.execute()\n    for playlist_data in response['items']:\n        playlist, created = LXPModel.Playlist.objects.get_or_create(",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "sync_videos",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def sync_videos(playlist):\n    request = youtube.playlistItems().list(\n        part='snippet,contentDetails',\n        playlistId=playlist.playlist_id,\n        maxResults=50\n    )\n    response = request.execute()\n    for video_data in response['items']:\n        LXPModel.Video.objects.get_or_create(\n            video_id=video_data['contentDetails']['videoId'],",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_add_zaid_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_add_zaid_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            form = LXPFORM.ZaidForm(request.POST or None)\n            context = {\n                'form': form,\n                'page_title': 'Add Zaid'\n            }\n            if request.method == 'POST':\n                if form.is_valid():",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_update_zaid_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_update_zaid_view(request, pk):\n    try:\n        if str(request.session['utype']) == 'cto':\n            instance = get_object_or_404(LXPModel.Zaid, id=pk)\n            form = LXPFORM.ZaidForm(request.POST or None, instance=instance)\n            context = {\n                'form': form,\n                'zaid_id': pk,\n                'page_title': 'Edit Zaid'\n            }",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "cto_view_zaid_view",
        "kind": 2,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "def cto_view_zaid_view(request):\n    try:\n        if str(request.session['utype']) == 'cto':\n            zaids = LXPModel.Zaid.objects.all()\n            return render(request,'cto/zaid/cto_view_zaid.html',{'zaids':zaids})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "scopes",
        "kind": 5,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "scopes = [\"https://www.googleapis.com/auth/youtube.readonly\"]\nfrom django.shortcuts import render, redirect\nfrom django.urls import reverse_lazy\nfrom lxpapp import models as LXPModel\nfrom lxpapp import forms as LXPFORM\nfrom youtubemanager import PlaylistManager\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom django.http import HttpResponse\nfrom django.template import loader",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "API_KEY = 'AIzaSyDBSnyGaMAoCEpFyh_WPj7E3pQV7GJivJA'  # Replace with your API Key\nCHANNEL_ID = 'UCxdhwzsgcGldYghv6u3nrXw'  # Replace with your Channel ID\nyoutube = build('youtube', 'v3', developerKey=API_KEY)\ndef sync_playlists_and_videos():\n    # Fetch playlists from the channel\n    request = youtube.playlists().list(\n        part='snippet,contentDetails',\n        channelId=CHANNEL_ID,\n        maxResults=50\n    )",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "CHANNEL_ID",
        "kind": 5,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "CHANNEL_ID = 'UCxdhwzsgcGldYghv6u3nrXw'  # Replace with your Channel ID\nyoutube = build('youtube', 'v3', developerKey=API_KEY)\ndef sync_playlists_and_videos():\n    # Fetch playlists from the channel\n    request = youtube.playlists().list(\n        part='snippet,contentDetails',\n        channelId=CHANNEL_ID,\n        maxResults=50\n    )\n    response = request.execute()",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "youtube",
        "kind": 5,
        "importPath": "cto.views",
        "description": "cto.views",
        "peekOfCode": "youtube = build('youtube', 'v3', developerKey=API_KEY)\ndef sync_playlists_and_videos():\n    # Fetch playlists from the channel\n    request = youtube.playlists().list(\n        part='snippet,contentDetails',\n        channelId=CHANNEL_ID,\n        maxResults=50\n    )\n    response = request.execute()\n    for playlist_data in response['items']:",
        "detail": "cto.views",
        "documentation": {}
    },
    {
        "label": "LearnerConfig",
        "kind": 6,
        "importPath": "learner.apps",
        "description": "learner.apps",
        "peekOfCode": "class LearnerConfig(AppConfig):\n    name = 'learner'",
        "detail": "learner.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "learner.urls",
        "description": "learner.urls",
        "peekOfCode": "urlpatterns = [\n    path('learner-dashboard', views.learner_dashboard_view,name='learner-dashboard'),\n    path('learner-edit-Learner-details/<int:user_id>', views.learner_edit_Learner_details_view,name='learner-edit-Learner-details'),\n    path('learner-exam', views.learner_exam_view,name='learner-exam'),\n    path('learner-take-exam/<int:pk>', views.learner_take_exam_view,name='learner-take-exam'),\n    path('learner-start-exam/<int:pk>', views.learner_start_exam_view,name='learner-start-exam'),\n    path('learner-show-exam-reuslt/<int:pk>', views.learner_show_exam_reuslt_view,name='learner-show-exam-reuslt'),\n    path('learner-show-exam-reuslt-details/<int:pk>', views.learner_show_exam_reuslt_details_view,name='learner-show-exam-reuslt-details'),\n    path('learner-short-exam', views.learner_short_exam_view,name='learner-short-exam'),\n    path('learner-take-short-exam/<int:pk>', views.learner_take_short_exam_view,name='learner-take-short-exam'),",
        "detail": "learner.urls",
        "documentation": {}
    },
    {
        "label": "learner_dashboard_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_dashboard_view(request):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            dict={\n            'total_Video':0,\n            'total_exam':0,\n            }\n            return render(request,'learner/learner_dashboard.html',context=dict)\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_exam_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_exam_view(request):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            exams=LXPModel.Exam.objects.raw(\"SELECT  lxpapp_exam.id,  lxpapp_batch.batch_name,  lxpapp_exam.exam_name FROM  lxpapp_batch  INNER JOIN lxpapp_batchlearner ON (lxpapp_batch.id = lxpapp_batchlearner.batch_id)  INNER JOIN lxpapp_exam ON (lxpapp_batch.id = lxpapp_exam.batch_id) WHERE lxpapp_exam.questiontpye = 'MCQ' AND lxpapp_batchlearner.learner_id = \" + str(request.user.id)) \n            return render(request,'learner/exam/learner_exam.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_take_exam_view(request,pk):\n    try:    ",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_take_exam_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_take_exam_view(request,pk):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            exam = LXPModel.Exam.objects.all().filter(id=pk)\n            mcqquestion= LXPModel.McqQuestion.objects.filter(exam_id=pk)\n            total_marks = 0\n            total_questions = 0\n            for x in mcqquestion:\n                total_marks = total_marks + x.marks\n                total_questions = total_questions + 1",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_start_exam_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_start_exam_view(request,pk):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            if request.method == 'POST':\n                mcqresult = LXPModel.McqResult.objects.create(learner_id = request.user.id,exam_id =pk,marks=0,wrong=0,correct=0)\n                mcqresult.save()\n                questions=LXPModel.McqQuestion.objects.all().filter(exam_id=pk).order_by('?')\n                score=0\n                wrong=0\n                correct=0",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_show_exam_reuslt_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_show_exam_reuslt_view(request,pk):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            exams=LXPModel.McqResult.objects.all().filter(exam_id__in = LXPModel.Exam.objects.all(), learner_id=request.user.id,exam_id = pk)\n            return render(request,'learner/exam/learner_show_exam_reuslt.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_show_exam_reuslt_details_view(request,pk):\n    try:    ",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_show_exam_reuslt_details_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_show_exam_reuslt_details_view(request,pk):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            exams=LXPModel.McqResultDetails.objects.all().filter(question_id__in = LXPModel.McqQuestion.objects.all(), mcqresult_id = pk)\n            return render(request,'learner/exam/learner_exam_result_details.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_short_exam_view(request):\n    try:    ",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_short_exam_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_short_exam_view(request):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            shortexams=LXPModel.Exam.objects.raw(\"SELECT  lxpapp_exam.id,  lxpapp_batch.batch_name,  lxpapp_exam.exam_name FROM  lxpapp_batch  INNER JOIN lxpapp_batchlearner ON (lxpapp_batch.id = lxpapp_batchlearner.batch_id)  INNER JOIN lxpapp_exam ON (lxpapp_batch.id = lxpapp_exam.batch_id) WHERE lxpapp_exam.questiontpye = 'ShortAnswer' AND lxpapp_batchlearner.learner_id = \" + str(request.user.id)) \n            return render(request,'learner/shortexam/learner_short_exam.html',{'shortexams':shortexams})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_take_short_exam_view(request,pk):\n    try:    ",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_take_short_exam_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_take_short_exam_view(request,pk):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            shortexam = LXPModel.Exam.objects.all().filter(id=pk)\n            mcqquestion= LXPModel.ShortQuestion.objects.filter(exam_id=pk)\n            total_marks = 0\n            total_questions = 0\n            for x in mcqquestion:\n                total_marks = total_marks + x.marks\n                total_questions = total_questions + 1",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_start_short_exam_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_start_short_exam_view(request,pk):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            if request.method == 'POST':\n                shortresult = LXPModel.ShortResult.objects.create(learner_id = request.user.id,exam_id =pk,marks=0)\n                shortresult.save()\n                questions=LXPModel.ShortQuestion.objects.all().filter(exam_id=pk).order_by('?')\n                r_id = 0\n                q_id = 0\n                r_id = shortresult.id",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_show_short_exam_reuslt_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_show_short_exam_reuslt_view(request,pk):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            #shortexams=LXPModel.ShortResult.objects.all().filter(exam_id__in = LXPModel.Exam.objects.all(), learner_id=request.user.id,exam_id = pk)\n            shortexams=LXPModel.ShortResult.objects.raw(\"SELECT DISTINCT  lxpapp_exam.exam_name,  lxpapp_shortresult.datecreate,  SUM(DISTINCT lxpapp_shortresult.marks) AS Obtained,  Sum(lxpapp_shortquestion.marks) AS Tot,  lxpapp_shortresult.learner_id,  lxpapp_shortresult.timetaken,  lxpapp_shortresult.status,  lxpapp_shortresult.id FROM  lxpapp_shortquestion  LEFT OUTER JOIN lxpapp_exam ON (lxpapp_shortquestion.exam_id = lxpapp_exam.id)  LEFT OUTER JOIN lxpapp_shortresult ON (lxpapp_exam.id = lxpapp_shortresult.exam_id) WHERE  lxpapp_exam.id = \" + str(pk) + \" AND  lxpapp_shortresult.learner_id = \" + str(request.user.id) + \" GROUP BY  lxpapp_exam.exam_name,  lxpapp_shortresult.datecreate,  lxpapp_shortresult.learner_id,  lxpapp_shortresult.timetaken,  lxpapp_shortresult.status,  lxpapp_shortresult.id\")\n            return render(request,'learner/shortexam/learner_show_short_exam_reuslt.html',{'shortexams':shortexams})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_show_short_exam_reuslt_details_view(request,pk):",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_show_short_exam_reuslt_details_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_show_short_exam_reuslt_details_view(request,pk):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            shortexams=LXPModel.ShortResultDetails.objects.all().filter(question_id__in = LXPModel.ShortQuestion.objects.all(), shortresult_id = pk)\n            return render(request,'learner/shortexam/learner_short_exam_result_details.html',{'shortexams':shortexams})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_video_Course_view(request):\n    try:    ",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_video_Course_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_video_Course_view(request):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            videos1 = LXPModel.BatchCourseSet.objects.raw('SELECT DISTINCT lxpapp_courseset.id,  lxpapp_courseset.courseset_name FROM  lxpapp_batchcourseset   INNER JOIN lxpapp_courseset ON (lxpapp_batchcourseset.courseset_id = lxpapp_courseset.id)   INNER JOIN lxpapp_batch ON (lxpapp_batchcourseset.batch_id = lxpapp_batch.id)   INNER JOIN lxpapp_batchlearner ON (lxpapp_batchlearner.batch_id = lxpapp_batch.id) WHERE   lxpapp_batchlearner.learner_id = ' + str(request.user.id))\n            return render(request,'learner/video/learner_video_course.html',{'videos':videos1})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_video_Course_subject_view(request):\n    try:    ",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_video_Course_subject_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_video_Course_subject_view(request):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            subject = LXPModel.Playlist.objects.raw('SELECT ID AS id, NAME, VTOTAL, Mtotal, SUM(VWATCHED) AS VWatched,((100*VWATCHED)/VTOTAL) as per, THUMBNAIL_URL FROM (SELECT YYY.ID, YYY.NAME, YYY.THUMBNAIL_URL, ( SELECT COUNT(XX.ID) FROM LXPAPP_PLAYLISTITEM XX WHERE XX.PLAYLIST_ID = YYY.ID ) AS Vtotal, ( SELECT COUNT(zz.ID) FROM LXPAPP_sessionmaterial zz WHERE zz.PLAYLIST_ID = YYY.ID ) AS Mtotal, (SELECT COUNT (LXPAPP_VIDEOWATCHED.ID) AS a FROM LXPAPP_PLAYLISTITEM GHGH LEFT OUTER JOIN LXPAPP_VIDEOWATCHED ON ( GHGH.VIDEO_ID = LXPAPP_VIDEOWATCHED.VIDEO_ID ) WHERE GHGH.PLAYLIST_ID = YYY.ID AND LXPAPP_VIDEOWATCHED.LEARNER_ID = ' + str(request.user.id) + ') AS VWatched FROM LXPAPP_BATCHLEARNER INNER JOIN LXPAPP_BATCH ON (LXPAPP_BATCHLEARNER.BATCH_ID = LXPAPP_BATCH.ID) INNER JOIN LXPAPP_BATCHRECORDEDVDOLIST ON (LXPAPP_BATCH.ID = LXPAPP_BATCHRECORDEDVDOLIST.BATCH_ID) INNER JOIN LXPAPP_PLAYLIST YYY ON (LXPAPP_BATCHRECORDEDVDOLIST.PLAYLIST_ID = YYY.ID) WHERE LXPAPP_BATCHLEARNER.LEARNER_ID = ' + str(request.user.id) + ') GROUP BY ID, NAME, VTOTAL ORDER BY NAME')\n            videocount = LXPModel.LearnerPlaylistCount.objects.all().filter(learner_id = request.user.id)\n            countpresent =False\n            if videocount:\n                countpresent = True\n            per = 0\n            tc = 0",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_video_list_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_video_list_view(request,subject_id):\n#    try:     \n        if str(request.session['utype']) == 'learner':\n            subjectname = LXPModel.Playlist.objects.only('name').get(id=subject_id).name\n            list = LXPModel.PlaylistItem.objects.raw(\"SELECT DISTINCT MAINVID.ID, MAINVID.NAME, IFNULL((SELECT LXPAPP_VIDEOWATCHED.VIDEO_ID FROM LXPAPP_VIDEOWATCHED WHERE LXPAPP_VIDEOWATCHED.LEARNER_ID = \" + str(request.user.id) + \" AND LXPAPP_VIDEOWATCHED.VIDEO_ID = MAINVID.ID), 0 ) AS watched, IFNULL((SELECT LXPAPP_VIDEOTOUNLOCK.VIDEO_ID FROM LXPAPP_VIDEOTOUNLOCK WHERE LXPAPP_VIDEOTOUNLOCK.LEARNER_ID = \" + str(request.user.id) + \" AND LXPAPP_VIDEOTOUNLOCK.VIDEO_ID = MAINVID.ID), 0) AS unlocked, IFNULL((SELECT LXPAPP_SESSIONMATERIAL.ID FROM LXPAPP_SESSIONMATERIAL WHERE LXPAPP_SESSIONMATERIAL.playlist_id = MAINLIST.PLAYLIST_ID AND LXPAPP_SESSIONMATERIAL.VIDEO_ID = MAINVID.ID), 0) AS matid FROM LXPAPP_PLAYLISTITEM MAINLIST INNER JOIN LXPAPP_VIDEO MAINVID ON ( MAINLIST.VIDEO_ID = MAINVID.ID ) WHERE MAINLIST.PLAYLIST_ID = \" + str (subject_id) + \" AND MAINVID.NAME <> 'Deleted video' ORDER BY MAINVID.NAME\")  \n            return render(request,'learner/video/learner_video_list.html',{'list':list,'subjectname':subjectname,'subject_id':subject_id})\n #   except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_video_sesseionmaterial_list_view(request,subject_id,video_id):",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_video_sesseionmaterial_list_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_video_sesseionmaterial_list_view(request,subject_id,video_id):\n    try:     \n        if str(request.session['utype']) == 'learner':\n            subjectname = LXPModel.Playlist.objects.only('name').get(id=subject_id).name\n            list = LXPModel.SessionMaterial.objects.all().filter(playlist_id = str (subject_id),video_id = str (video_id))  \n            return render(request,'learner/video/learner_video_sesseionmaterial_list.html',{'list':list,'subjectname':subjectname,'subject_id':subject_id,'video_id':video_id})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_show_video_view(request,subject_id,video_id):",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_show_video_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_show_video_view(request,subject_id,video_id):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            subjectname = LXPModel.Playlist.objects.only('name').get(id=subject_id).name\n            Videos=LXPModel.Video.objects.all().filter(id=video_id)\n            vunlock=LXPModel.VideoToUnlock.objects.all().filter(video_id__gt= video_id, playlist_id = subject_id)\n            vunlock=LXPModel.VideoToUnlock.objects.raw('SELECT lxpapp_videotounlock.id FROM  lxpapp_videotounlock  WHERE lxpapp_videotounlock.playlist_id = ' + str(subject_id) + ' and lxpapp_videotounlock.video_id > ' + str(video_id) + ' AND  lxpapp_videotounlock.learner_id = ' + str(request.user.id) )\n            nextvalue = LXPModel.PlaylistItem.objects.raw('SELECT  1 AS id,  lxpapp_playlistitem.video_id FROM  lxpapp_playlistitem  INNER JOIN lxpapp_video ON (lxpapp_playlistitem.video_id = lxpapp_video.id) WHERE  lxpapp_playlistitem.video_id > ' + str(video_id) + ' AND  lxpapp_playlistitem.playlist_id = ' + str(subject_id) + ' ORDER BY  lxpapp_video.name LIMIT 1')\n            topicname =''\n            url=''",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_see_sesseionmaterial_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_see_sesseionmaterial_view(request,subject_id,video_id,pk):\n    try:\n        if str(request.session['utype']) == 'learner':\n            details= LXPModel.SessionMaterial.objects.all().filter(id=pk)\n            subjectname = LXPModel.Playlist.objects.only('name').get(id=subject_id).name\n            chaptername = LXPModel.Video.objects.only('name').get(id=video_id).name\n            materialtype = 0\n            for x in details:\n                materialtype = x.mtype\n            if materialtype == \"HTML\":",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_studymaterial_course_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_studymaterial_course_view(request):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            courses = LXPModel.Course.objects.raw('SELECT id, course_name, description, whatlearn, includes, themecolor, image , Topiccount, CASE WHEN watchcount = 0 THEN 0 ELSE watchcount - 1 END as watchcount, ((CASE WHEN watchcount = 0 THEN 0 ELSE watchcount - 1 END)*100)/Topiccount as per FROM ( SELECT mainmod.id, mainmod.course_name, mainmod.description, mainmod.whatlearn, mainmod.includes, mainmod.themecolor, mainmod.image , (SELECT count(chpmod.topic) AS Topiccount FROM lxpapp_coursechapter INNER JOIN lxpapp_material chpmod ON (lxpapp_coursechapter.chapter_id = chpmod.chapter_id) WHERE lxpapp_coursechapter.course_id = mainmod.id ) AS Topiccount, ( SELECT count (lxpapp_learnermaterialwatched.id) as watchcount FROM lxpapp_learnermaterialwatched WHERE lxpapp_learnermaterialwatched.course_id = mainmod.id) as watchcount FROM lxpapp_batchcourse LEFT OUTER JOIN lxpapp_batch ON (lxpapp_batchcourse.batch_id = lxpapp_batch.id) LEFT OUTER JOIN lxpapp_batchlearner ON (lxpapp_batch.id = lxpapp_batchlearner.batch_id) LEFT OUTER JOIN lxpapp_course mainmod ON (lxpapp_batchcourse.course_id = mainmod.id) WHERE lxpapp_batchlearner.learner_id = ' + str(request.user.id) + ' )')\n            if  not courses:\n                return render(request,'learner/studymaterial/learner_studymaterial_nocourse.html')\n            else:        \n                return render(request,'learner/studymaterial/learner_studymaterial_course.html',{'courses':courses})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_studymaterial_course_chapter_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_studymaterial_course_chapter_view(request,course_id):\n#    try:     \n        if str(request.session['utype']) == 'learner':\n            list = LXPModel.Course.objects.raw(\"SELECT  id, srno, chapter_name, chapter_id, topic, mtype, urlvalue, description, per, CASE WHEN ROW_NUMBER() OVER (ORDER BY srno) = 1 THEN 'yes' WHEN LAG(per) OVER (ORDER BY srno) > 0 THEN 'yes' ELSE 'no' END AS flag FROM ( SELECT lxpapp_material.id, ROW_NUMBER() OVER (PARTITION BY lxpapp_chapter.chapter_name) AS srno, lxpapp_chapter.chapter_name, lxpapp_chapter.id AS chapter_id, lxpapp_material.topic, lxpapp_material.mtype, lxpapp_material.urlvalue, lxpapp_material.description, ( SELECT per FROM ( SELECT lxpapp_chapterresult.id, lxpapp_chapterresult.correct * 100 / (lxpapp_chapterresult.wrong + lxpapp_chapterresult.correct) AS per FROM lxpapp_chapterresult WHERE lxpapp_chapterresult.course_id = main.course_id AND lxpapp_chapterresult.chapter_id = main.chapter_id AND lxpapp_chapterresult.learner_id = \" + str(request.user.id) + \" ) a ORDER BY per DESC, 1 ) AS per FROM lxpapp_coursechapter main LEFT OUTER JOIN lxpapp_material ON (main.chapter_id = lxpapp_material.chapter_id) LEFT OUTER JOIN lxpapp_chapter ON (main.chapter_id = lxpapp_chapter.id) WHERE main.course_id = \" + str(course_id) + \" ) order By chapter_name, id\")\n            #list = LXPModel.Course.objects.raw(\"SELECT DISTINCT * FROM (SELECT lxpapp_material.id, ROW_NUMBER() OVER(PARTITION BY lxpapp_chapter.chapter_name) as srno,  lxpapp_chapter.chapter_name,  lxpapp_chapter.id as chapter_id,  lxpapp_material.topic,  lxpapp_material.mtype,  lxpapp_material.urlvalue,  lxpapp_material.description FROM  lxpapp_coursechapter  LEFT OUTER JOIN lxpapp_material ON (lxpapp_coursechapter.chapter_id = lxpapp_material.chapter_id)  LEFT OUTER JOIN lxpapp_chapter ON (lxpapp_coursechapter.chapter_id = lxpapp_chapter.id) WHERE lxpapp_coursechapter.course_id = \" + str(course_id) + \") WHERE id > 0\")\n            #list = LXPModel.Course.objects.raw(\"SELECT id, srno, chapter_name, chapter_id, topic, mtype, urlvalue, description, questions, per, CASE WHEN questions = 0 THEN 'yes' WHEN Row_number() OVER ( ORDER BY srno) = 1 THEN 'yes' WHEN Lag(per) OVER ( ORDER BY srno) > 0 THEN 'yes' ELSE 'no' END AS flag FROM (SELECT lxpapp_material.id, Row_number() OVER ( partition BY lxpapp_chapter.chapter_name) AS srno, lxpapp_chapter.chapter_name, lxpapp_chapter.id AS chapter_id, lxpapp_material.topic, lxpapp_material.mtype, lxpapp_material.urlvalue, lxpapp_material.description, (SELECT Count (lxpapp_chapterquestion.id) AS questions FROM lxpapp_chapterquestion WHERE lxpapp_chapterquestion.chapter_id = main.chapter_id) AS questions, (SELECT per FROM (SELECT lxpapp_chapterresult.id, lxpapp_chapterresult.correct * 100 / ( lxpapp_chapterresult.wrong + lxpapp_chapterresult.correct ) AS per FROM lxpapp_chapterresult WHERE lxpapp_chapterresult.course_id = main.course_id AND lxpapp_chapterresult.chapter_id = main.chapter_id AND lxpapp_chapterresult.learner_id = \" + str(request.user.id) + \") a ORDER BY per DESC, 1) AS per FROM lxpapp_coursechapter main LEFT OUTER JOIN lxpapp_material ON ( main.chapter_id = lxpapp_material.chapter_id ) LEFT OUTER JOIN lxpapp_chapter ON ( main.chapter_id = lxpapp_chapter.id ) WHERE main.course_id = \" + str(course_id) + \") subquery\")\n            # from django.db.models import F, Max, Case, When, IntegerField, CharField, Value\n            # from django.db.models.functions import RowNumber\n            # from django.db.models.expressions import Window, Subquery, OuterRef\n            # per_subquery = (",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_studymaterial_chapter_show_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_studymaterial_chapter_show_view(request,chapter_id,course_id):\n#    try:     \n        if str(request.session['utype']) == 'learner':\n            chapter_name = ''\n            topiccount = 0\n            Topiccount = 0\n            watchcount = 0\n            per = 0\n            count = LXPModel.Course.objects.raw('SELECT 1 as id, Topiccount, CASE WHEN watchcount = 0 THEN 0 ELSE watchcount - 1 END  as watchcount, ((CASE WHEN watchcount = 0 THEN 0 ELSE watchcount - 1 END)*100)/Topiccount as per FROM ( (SELECT count(lxpapp_material.topic) AS Topiccount FROM lxpapp_coursechapter INNER JOIN lxpapp_material ON (lxpapp_coursechapter.chapter_id = lxpapp_material.chapter_id) WHERE lxpapp_coursechapter.course_id = ' + str(course_id) + ' AND lxpapp_material.chapter_id = ' + str(chapter_id) + ') AS Topiccount, ( SELECT count (lxpapp_learnermaterialwatched.id) as watchcount FROM lxpapp_learnermaterialwatched WHERE lxpapp_learnermaterialwatched.course_id = ' + str(course_id) + ' AND lxpapp_learnermaterialwatched.learner_id = ' + str(request.user.id) + ' AND lxpapp_learnermaterialwatched.chapter_id = ' + str(chapter_id) + ' ) as watchcount )')\n            result = LXPModel.Chapter.objects.raw(\"SELECT 1 as id,   lxpapp_chapter.chapter_name,  Count(lxpapp_material.id) as count FROM  lxpapp_material  INNER JOIN lxpapp_chapter ON (lxpapp_material.chapter_id = lxpapp_chapter.id) WHERE lxpapp_chapter.id = \" + str(chapter_id) + \" GROUP BY lxpapp_chapter.chapter_name\")",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "save_topic",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def save_topic(request):\n    try:\n        if request.method == 'POST':\n            id = request.body\n            id = str(id).replace(\"'\",'')\n            id = str(id).replace(\"bid=\",'')\n            id = str (id).replace(\"&course_id=\",',')\n            id = str (id).replace(\"&chapter_id=\",',')\n            x = id.split(\",\")\n            matid= x[0]",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_show_studymaterial_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_show_studymaterial_view(request,studymaterialtype,pk):\n    try:\n        if str(request.session['utype']) == 'learner':\n            details= LXPModel.Material.objects.raw('SELECT lxpapp_material.id,  lxpapp_material.topic,  lxpapp_material.mtype,  lxpapp_material.urlvalue,  lxpapp_material.description FROM  lxpapp_material WHERE  lxpapp_material.id = ' + str(pk))\n            if studymaterialtype == 'HTML':\n                return render(request,'learner/studymaterial/learner_studymaterial_htmlshow.html',{'details':details})\n            if studymaterialtype == 'URL':\n                return render(request,'learner/studymaterial/learner_studymaterial_urlshow.html',{'details':details})\n            if studymaterialtype == 'PDF':\n                return render(request,'learner/studymaterial/learner_studymaterial_pdfshow.html',{'details':details})",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_availablecourse_course_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_availablecourse_course_view(request):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            courses = LXPModel.Course.objects.all().order_by('course_name')\n            return render(request,'learner/availablecourse/learner_availablecourse_course.html',{'courses':courses})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_availablecourse_course_chapter_view(request,coursename,course_id):\n#    try:     ",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_availablecourse_course_chapter_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_availablecourse_course_chapter_view(request,coursename,course_id):\n#    try:     \n        if str(request.session['utype']) == 'learner':\n            list = LXPModel.Course.objects.raw(\"SELECT lxpapp_material.id, ROW_NUMBER() OVER(PARTITION BY lxpapp_chapter.chapter_name) as srno,  lxpapp_chapter.chapter_name,  lxpapp_chapter.id as chapter_id,  lxpapp_material.topic,  lxpapp_material.mtype,  lxpapp_material.urlvalue,  lxpapp_material.description FROM  lxpapp_coursechapter  LEFT OUTER JOIN lxpapp_material ON (lxpapp_coursechapter.chapter_id = lxpapp_material.chapter_id)  LEFT OUTER JOIN lxpapp_chapter ON (lxpapp_coursechapter.chapter_id = lxpapp_chapter.id) WHERE lxpapp_coursechapter.course_id = \" + str(course_id) )\n            moddet = LXPModel.Course.objects.raw(\"SELECT lxpapp_course.id, lxpapp_course.description,  lxpapp_course.whatlearn,  lxpapp_course.includes,  lxpapp_course.themecolor,  lxpapp_course.tags,  lxpapp_course.image,  lxpapp_course.price,  lxpapp_mainhead.mainhead_name,  lxpapp_subhead.subhead_name FROM  lxpapp_course  INNER JOIN lxpapp_mainhead ON (lxpapp_course.mainhead_id = lxpapp_mainhead.id)  INNER JOIN lxpapp_subhead ON (lxpapp_course.subhead_id = lxpapp_subhead.id) WHERE lxpapp_course.id = \" + str(course_id) )\n            return render(request,'learner/availablecourse/learner_availablecourse_chapter_topic.html',{'list':list,'coursename':coursename,'course_id':course_id,'moddet':moddet})\n #   except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_chapterexam_view(request,chapter_id,course_id):",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_chapterexam_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_chapterexam_view(request,chapter_id,course_id):\n    #try:    \n        if str(request.session['utype']) == 'learner':\n            chapterexams=LXPModel.Chapter.objects.all().filter(id =  chapter_id) \n            coursename = LXPModel.Course.objects.only('course_name').get(id=course_id).course_name\n            chaptername = LXPModel.Chapter.objects.only('chapter_name').get(id=chapter_id).chapter_name\n            return render(request,'learner/studymaterial/chapterexam/learner_chapterexam.html',{'chapterexams':chapterexams,'coursename':coursename,'course_id':course_id,'chaptername':chaptername,'chapter_id':chapter_id})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_take_chapterexam_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_take_chapterexam_view(request,chapter_id,course_id):\n    #try:    \n        if str(request.session['utype']) == 'learner':\n            coursename = LXPModel.Course.objects.only('course_name').get(id=course_id).course_name\n            chaptername = LXPModel.Chapter.objects.only('chapter_name').get(id=chapter_id).chapter_name\n            mcqquestion= LXPModel.ChapterQuestion.objects.filter(chapter_id=chapter_id)\n            total_marks = 0\n            total_questions = 0\n            for x in mcqquestion:\n                total_marks = total_marks + x.marks",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_start_chapterexam_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_start_chapterexam_view(request,chapter_id,course_id):\n    #try:    \n        if str(request.session['utype']) == 'learner':\n            coursename = LXPModel.Course.objects.only('course_name').get(id=course_id).course_name\n            chaptername = LXPModel.Chapter.objects.only('chapter_name').get(id=chapter_id).chapter_name\n            if request.method == 'POST':\n                mcqresult = LXPModel.ChapterResult.objects.create(learner_id = request.user.id,course_id =course_id,chapter_id =chapter_id,marks=0,wrong=0,correct=0)\n                mcqresult.save()\n                questions=LXPModel.ChapterQuestion.objects.all().filter(chapter_id=chapter_id).order_by('?')\n                score=0",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_show_chapterexam_reuslt_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_show_chapterexam_reuslt_view(request,chapter_id,course_id):\n    #try:    \n        if str(request.session['utype']) == 'learner':\n            chapterexams=LXPModel.ChapterResult.objects.all().filter(chapter_id = chapter_id,learner_id=request.user.id)\n            coursename = LXPModel.Course.objects.only('course_name').get(id=course_id).course_name\n            chaptername = LXPModel.Chapter.objects.only('chapter_name').get(id=chapter_id).chapter_name\n            return render(request,'learner/studymaterial/chapterexam/learner_show_chapterexam_reuslt.html',{'chapterexams':chapterexams,'coursename':coursename,'course_id':course_id,'chaptername':chaptername,'chapter_id':chapter_id})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_show_chapterexam_reuslt_details_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_show_chapterexam_reuslt_details_view(request,result_id,attempt,chapter_id,course_id):\n    try:    \n        if str(request.session['utype']) == 'learner':\n            coursename = LXPModel.Course.objects.only('course_name').get(id=course_id).course_name\n            chaptername = LXPModel.Chapter.objects.only('chapter_name').get(id=chapter_id).chapter_name\n            chapterexams=LXPModel.ChapterResultDetails.objects.all().filter(question_id__in = LXPModel.ChapterQuestion.objects.all(), chapterresult_id = result_id)\n            return render(request,'learner/studymaterial/chapterexam/learner_chapterexam_result_details.html',{'chapterexams':chapterexams,'attempt':attempt,'coursename':coursename,'course_id':course_id,'chaptername':chaptername,'chapter_id':chapter_id})\n    except:\n        return render(request,'lxpapp/404page.html')\ndef save_cart(request):",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "save_cart",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def save_cart(request):\n    try:\n        if request.method == 'POST':\n            id = request.POST.get('id')\n            # id = str(id).replace(\"'\",'')\n            # id = str(id).replace(\"bid=\",'')\n            # id = str (id).replace(\"&course_id=\",',')\n            # id = str (id).replace(\"&chapter_id=\",',')\n            cart =LXPModel.LearnerCart.objects.all().filter(learner_id = request.user.id,course_id=id)\n            if not cart:",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_check_k8sterminal_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_check_k8sterminal_view(request):\n    try:\n        if str(request.session['utype']) == 'learner':\n            if request.method=='POST':\n                password = request.POST.get(\"password\")\n                if password == '' or password is None:\n                    messages.info(request, 'Please Enter password')\n                    return render(request,'learner/labs/k8sterminal/learner_check_k8sterminal.html')\n                usage = LXPModel.K8STerminal.objects.all().filter(learner_id= request.user.id)\n                if not usage:",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_python_terminal_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_python_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'learner':  \n            return render(request,'learner/labs/python/learner_python_terminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_linux_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'learner':  ",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_linux_terminal_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_linux_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'learner':  \n            return render(request,'learner/labs/linux/learner_linux_terminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_cloudshell_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'learner':  ",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_cloudshell_terminal_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_cloudshell_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'learner':  \n            return render(request,'learner/labs/cloudshell/learner_cloudshell_terminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef learner_edit_Learner_details_view(request, user_id):\n    user = get_object_or_404(LXPModel.LearnerDetails, learner_id=user_id)\n    if request.method == \"POST\":",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "learner_edit_Learner_details_view",
        "kind": 2,
        "importPath": "learner.views",
        "description": "learner.views",
        "peekOfCode": "def learner_edit_Learner_details_view(request, user_id):\n    user = get_object_or_404(LXPModel.LearnerDetails, learner_id=user_id)\n    if request.method == \"POST\":\n        form = LXPFORM.LearnerDetailsForm(request.POST, request.FILES, instance=user)\n        if form.is_valid():\n            form.save()\n            return redirect('learner-edit-Learner-details', user_id=user_id)  # Redirect to the user's profile or any other page\n    else:\n        form = LXPFORM.LearnerDetailsForm(instance=user)\n    return render(request, 'learner/learner_edit_details.html', {'form': form, 'user': user})",
        "detail": "learner.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "LXP.asgi",
        "description": "LXP.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "LXP.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nTEMPLATE_DIR = os.path.join(BASE_DIR,'templates')\nSTATIC_DIR=os.path.join(BASE_DIR,'static')\nMEDIA_ROOT=os.path.join(BASE_DIR,'static')\nMEDIA_ROOT =  os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '@k0#p3kidu)yaaa3u1hplxz)f@^6xiy384*(+n@@s5x#1bx@m5'",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_DIR",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "TEMPLATE_DIR = os.path.join(BASE_DIR,'templates')\nSTATIC_DIR=os.path.join(BASE_DIR,'static')\nMEDIA_ROOT=os.path.join(BASE_DIR,'static')\nMEDIA_ROOT =  os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '@k0#p3kidu)yaaa3u1hplxz)f@^6xiy384*(+n@@s5x#1bx@m5'\n# SECURITY WARNING: don't run with debug turned on in production!",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "MEDIA_ROOT =  os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '@k0#p3kidu)yaaa3u1hplxz)f@^6xiy384*(+n@@s5x#1bx@m5'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['http://127.0.0.1/:8001','lxp.nubeera.com','*']\nINSTALLED_APPS = [",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '@k0#p3kidu)yaaa3u1hplxz)f@^6xiy384*(+n@@s5x#1bx@m5'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['http://127.0.0.1/:8001','lxp.nubeera.com','*']\nINSTALLED_APPS = [\n    'django.contrib.admin',",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "SECRET_KEY = '@k0#p3kidu)yaaa3u1hplxz)f@^6xiy384*(+n@@s5x#1bx@m5'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['http://127.0.0.1/:8001','lxp.nubeera.com','*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['http://127.0.0.1/:8001','lxp.nubeera.com','*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'lxpapp',",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['http://127.0.0.1/:8001','lxp.nubeera.com','*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'lxpapp',\n    'cto',",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'lxpapp',\n    'cto',\n    'cfo',",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    #'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'social_django.middleware.SocialAuthExceptionMiddleware', #add \n    'lxpapp.userlinktraking.RequestMiddleware',",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "ROOT_URLCONF = 'LXP.urls'\nCSRF_TRUSTED_ORIGINS = ['https://live.nubeera.com','https://*.nubeera.com']\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [TEMPLATE_DIR,],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = ['https://live.nubeera.com','https://*.nubeera.com']\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [TEMPLATE_DIR,],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [TEMPLATE_DIR,],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "WSGI_APPLICATION = 'LXP.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'LXP.sqlite3'),\n    }\n}\n# Password validation",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'LXP.sqlite3'),\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE =  'Asia/Kolkata'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nDATE_FORMAT = \"%d/%m/%Y\"\nDATE_INPUT_FORMATS = ['%d-%m-%Y', '%Y-%m-%d']\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSITE_ID = 1",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "TIME_ZONE =  'Asia/Kolkata'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nDATE_FORMAT = \"%d/%m/%Y\"\nDATE_INPUT_FORMATS = ['%d-%m-%Y', '%Y-%m-%d']\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSITE_ID = 1\nSTATIC_URL = '/static/'",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nDATE_FORMAT = \"%d/%m/%Y\"\nDATE_INPUT_FORMATS = ['%d-%m-%Y', '%Y-%m-%d']\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSITE_ID = 1\nSTATIC_URL = '/static/'\nDEFAULT_AUTO_FIELD='django.db.models.AutoField' ",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\nDATE_FORMAT = \"%d/%m/%Y\"\nDATE_INPUT_FORMATS = ['%d-%m-%Y', '%Y-%m-%d']\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSITE_ID = 1\nSTATIC_URL = '/static/'\nDEFAULT_AUTO_FIELD='django.db.models.AutoField' \nSTATICFILES_DIRS=[",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "USE_TZ = True\nDATE_FORMAT = \"%d/%m/%Y\"\nDATE_INPUT_FORMATS = ['%d-%m-%Y', '%Y-%m-%d']\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSITE_ID = 1\nSTATIC_URL = '/static/'\nDEFAULT_AUTO_FIELD='django.db.models.AutoField' \nSTATICFILES_DIRS=[\nSTATIC_DIR,",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "DATE_FORMAT",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "DATE_FORMAT = \"%d/%m/%Y\"\nDATE_INPUT_FORMATS = ['%d-%m-%Y', '%Y-%m-%d']\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSITE_ID = 1\nSTATIC_URL = '/static/'\nDEFAULT_AUTO_FIELD='django.db.models.AutoField' \nSTATICFILES_DIRS=[\nSTATIC_DIR,\n ]",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "DATE_INPUT_FORMATS",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "DATE_INPUT_FORMATS = ['%d-%m-%Y', '%Y-%m-%d']\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSITE_ID = 1\nSTATIC_URL = '/static/'\nDEFAULT_AUTO_FIELD='django.db.models.AutoField' \nSTATICFILES_DIRS=[\nSTATIC_DIR,\n ]\nLOGIN_REDIRECT_URL='/userlogin'",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "SITE_ID = 1\nSTATIC_URL = '/static/'\nDEFAULT_AUTO_FIELD='django.db.models.AutoField' \nSTATICFILES_DIRS=[\nSTATIC_DIR,\n ]\nLOGIN_REDIRECT_URL='/userlogin'\n#for contact us give your gmail id and password\nEMAIL_BACKEND ='django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.sendgrid.net'",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nDEFAULT_AUTO_FIELD='django.db.models.AutoField' \nSTATICFILES_DIRS=[\nSTATIC_DIR,\n ]\nLOGIN_REDIRECT_URL='/userlogin'\n#for contact us give your gmail id and password\nEMAIL_BACKEND ='django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.sendgrid.net'\nEMAIL_USE_TLS = True",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.sendgrid.net'\nEMAIL_USE_TLS = True\nEMAIL_PORT = 587\nEMAIL_HOST_USER = 'apikey' # this email will be used to send emails\nEMAIL_HOST_PASSWORD = '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' # host email password required\n# now sign in with your host gmail account in your browser\n# open following link and turn it ON\n# https://myaccount.google.com/lesssecureapps\n# otherwise you will get SMTPAuthenticationError at /contactus\n# this process is required because google blocks apps authentication by default",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_PORT = 587\nEMAIL_HOST_USER = 'apikey' # this email will be used to send emails\nEMAIL_HOST_PASSWORD = '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' # host email password required\n# now sign in with your host gmail account in your browser\n# open following link and turn it ON\n# https://myaccount.google.com/lesssecureapps\n# otherwise you will get SMTPAuthenticationError at /contactus\n# this process is required because google blocks apps authentication by default\nEMAIL_RECEIVING_USER = ['info@nubeera.com'] # email on which you will receive messages sent from website",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_HOST_USER = 'apikey' # this email will be used to send emails\nEMAIL_HOST_PASSWORD = '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' # host email password required\n# now sign in with your host gmail account in your browser\n# open following link and turn it ON\n# https://myaccount.google.com/lesssecureapps\n# otherwise you will get SMTPAuthenticationError at /contactus\n# this process is required because google blocks apps authentication by default\nEMAIL_RECEIVING_USER = ['info@nubeera.com'] # email on which you will receive messages sent from website\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'apikey' # this email will be used to send emails\nEMAIL_HOST_PASSWORD = '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' # host email password required\n# now sign in with your host gmail account in your browser\n# open following link and turn it ON\n# https://myaccount.google.com/lesssecureapps\n# otherwise you will get SMTPAuthenticationError at /contactus\n# this process is required because google blocks apps authentication by default\nEMAIL_RECEIVING_USER = ['info@nubeera.com'] # email on which you will receive messages sent from website\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTHENTICATION_BACKENDS = [",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = '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' # host email password required\n# now sign in with your host gmail account in your browser\n# open following link and turn it ON\n# https://myaccount.google.com/lesssecureapps\n# otherwise you will get SMTPAuthenticationError at /contactus\n# this process is required because google blocks apps authentication by default\nEMAIL_RECEIVING_USER = ['info@nubeera.com'] # email on which you will receive messages sent from website\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTHENTICATION_BACKENDS = [\n    'social_core.backends.google.GoogleOAuth2',",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_RECEIVING_USER",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "EMAIL_RECEIVING_USER = ['info@nubeera.com'] # email on which you will receive messages sent from website\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTHENTICATION_BACKENDS = [\n    'social_core.backends.google.GoogleOAuth2',\n    'django.contrib.auth.backends.ModelBackend',\n]\nLOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'indexpage'\nLOGOUT_URL = 'logout'\nLOGOUT_REDIRECT_URL = 'userlogin'",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTHENTICATION_BACKENDS = [\n    'social_core.backends.google.GoogleOAuth2',\n    'django.contrib.auth.backends.ModelBackend',\n]\nLOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'indexpage'\nLOGOUT_URL = 'logout'\nLOGOUT_REDIRECT_URL = 'userlogin'\n# # # ##########                  Dev",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'social_core.backends.google.GoogleOAuth2',\n    'django.contrib.auth.backends.ModelBackend',\n]\nLOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'indexpage'\nLOGOUT_URL = 'logout'\nLOGOUT_REDIRECT_URL = 'userlogin'\n# # # ##########                  Dev\n# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '709424261438-iq2t80mcempggouuh8t9os1afuhq2h3l.apps.googleusercontent.com'",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "LOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'indexpage'\nLOGOUT_URL = 'logout'\nLOGOUT_REDIRECT_URL = 'userlogin'\n# # # ##########                  Dev\n# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '709424261438-iq2t80mcempggouuh8t9os1afuhq2h3l.apps.googleusercontent.com'\n# SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'\n#########                  Prod\nSOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '699466001074-pt71tbhqafb6pfe4p3247mtp6cktc1sl.apps.googleusercontent.com'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = 'indexpage'\nLOGOUT_URL = 'logout'\nLOGOUT_REDIRECT_URL = 'userlogin'\n# # # ##########                  Dev\n# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '709424261438-iq2t80mcempggouuh8t9os1afuhq2h3l.apps.googleusercontent.com'\n# SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'\n#########                  Prod\nSOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '699466001074-pt71tbhqafb6pfe4p3247mtp6cktc1sl.apps.googleusercontent.com'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_URL",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "LOGOUT_URL = 'logout'\nLOGOUT_REDIRECT_URL = 'userlogin'\n# # # ##########                  Dev\n# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '709424261438-iq2t80mcempggouuh8t9os1afuhq2h3l.apps.googleusercontent.com'\n# SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'\n#########                  Prod\nSOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '699466001074-pt71tbhqafb6pfe4p3247mtp6cktc1sl.apps.googleusercontent.com'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [\n   'https://www.googleapis.com/auth/userinfo.email',",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = 'userlogin'\n# # # ##########                  Dev\n# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '709424261438-iq2t80mcempggouuh8t9os1afuhq2h3l.apps.googleusercontent.com'\n# SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'\n#########                  Prod\nSOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '699466001074-pt71tbhqafb6pfe4p3247mtp6cktc1sl.apps.googleusercontent.com'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [\n   'https://www.googleapis.com/auth/userinfo.email',\n   'https://www.googleapis.com/auth/userinfo.profile',",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "SOCIAL_AUTH_GOOGLE_OAUTH2_KEY",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '699466001074-pt71tbhqafb6pfe4p3247mtp6cktc1sl.apps.googleusercontent.com'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [\n   'https://www.googleapis.com/auth/userinfo.email',\n   'https://www.googleapis.com/auth/userinfo.profile',\n]\nAWS_BUCKET_NAME='bkt-test-08nov'\nAWS_ACCESS_KEY='AKIATZQFG2PZIUPD23GA'\nAWS_SECRET_ACCESS_KEY='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'\nAWS_DOMAIN='http://bkt-test-08nov.s3.amazonaws.com/'",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [\n   'https://www.googleapis.com/auth/userinfo.email',\n   'https://www.googleapis.com/auth/userinfo.profile',\n]\nAWS_BUCKET_NAME='bkt-test-08nov'\nAWS_ACCESS_KEY='AKIATZQFG2PZIUPD23GA'\nAWS_SECRET_ACCESS_KEY='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'\nAWS_DOMAIN='http://bkt-test-08nov.s3.amazonaws.com/'\nMESSAGE_TAGS = {",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [\n   'https://www.googleapis.com/auth/userinfo.email',\n   'https://www.googleapis.com/auth/userinfo.profile',\n]\nAWS_BUCKET_NAME='bkt-test-08nov'\nAWS_ACCESS_KEY='AKIATZQFG2PZIUPD23GA'\nAWS_SECRET_ACCESS_KEY='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'\nAWS_DOMAIN='http://bkt-test-08nov.s3.amazonaws.com/'\nMESSAGE_TAGS = {\n        messages.DEBUG: 'alert-secondary',",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "MESSAGE_TAGS",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "MESSAGE_TAGS = {\n        messages.DEBUG: 'alert-secondary',\n        messages.INFO: 'alert-info',\n        messages.SUCCESS: 'alert-success',\n        messages.WARNING: 'alert-warning',\n        messages.ERROR: 'alert-danger',\n}\nGITHUB_ACCESS_TOKEN = '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'\nGITHUB_REPO_OWNER = 'teamnubeera'\nGITHUB_REPO_NAME = 'LXP_Video_docs'",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "GITHUB_ACCESS_TOKEN",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "GITHUB_ACCESS_TOKEN = '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'\nGITHUB_REPO_OWNER = 'teamnubeera'\nGITHUB_REPO_NAME = 'LXP_Video_docs'\nJITSI_SECRET = \"a5f9c73e4d85e0c9f25b2d4394b6d24d5c00f27aaebef34f97f13a9f6f1c9ec7\"",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "GITHUB_REPO_OWNER",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "GITHUB_REPO_OWNER = 'teamnubeera'\nGITHUB_REPO_NAME = 'LXP_Video_docs'\nJITSI_SECRET = \"a5f9c73e4d85e0c9f25b2d4394b6d24d5c00f27aaebef34f97f13a9f6f1c9ec7\"",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "GITHUB_REPO_NAME",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "GITHUB_REPO_NAME = 'LXP_Video_docs'\nJITSI_SECRET = \"a5f9c73e4d85e0c9f25b2d4394b6d24d5c00f27aaebef34f97f13a9f6f1c9ec7\"",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "JITSI_SECRET",
        "kind": 5,
        "importPath": "LXP.settings",
        "description": "LXP.settings",
        "peekOfCode": "JITSI_SECRET = \"a5f9c73e4d85e0c9f25b2d4394b6d24d5c00f27aaebef34f97f13a9f6f1c9ec7\"",
        "detail": "LXP.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "LXP.urls",
        "description": "LXP.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login, name='login'),\n    path('logout/', auth_views.LogoutView.as_view(), name='logout'),\n    path('switch-user', views.switch_user_view,name='switch-user'),\n    path('social-auth/', include('social_django.urls', namespace='social')),\n    path(\"\", CustomLoginView.as_view(),name='userlogin'),\n    path('cto/',include('cto.urls')),\n    path('cfo/',include('cfo.urls')),",
        "detail": "LXP.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "LXP.wsgi",
        "description": "LXP.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "LXP.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "lxpapp.migrations.0001_initial",
        "description": "lxpapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Batch',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "lxpapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "lxpapp.migrations.0002_scheduler_userprofile_schedulerstatus",
        "description": "lxpapp.migrations.0002_scheduler_userprofile_schedulerstatus",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('lxpapp', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Scheduler',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "lxpapp.migrations.0002_scheduler_userprofile_schedulerstatus",
        "documentation": {}
    },
    {
        "label": "sort_by_name",
        "kind": 2,
        "importPath": "lxpapp.templatetags.lxpapp_filters",
        "description": "lxpapp.templatetags.lxpapp_filters",
        "peekOfCode": "def sort_by_name(users):\n    return sorted(users, key=lambda u: (u.first_name, u.last_name))\n@register.filter\ndef split_by(value, delimiter=','):\n    \"\"\"Splits a string by the given delimiter, handling None values.\"\"\"\n    if value:\n        return value.split(delimiter)\n    return []  # Return an empty list if value is None",
        "detail": "lxpapp.templatetags.lxpapp_filters",
        "documentation": {}
    },
    {
        "label": "split_by",
        "kind": 2,
        "importPath": "lxpapp.templatetags.lxpapp_filters",
        "description": "lxpapp.templatetags.lxpapp_filters",
        "peekOfCode": "def split_by(value, delimiter=','):\n    \"\"\"Splits a string by the given delimiter, handling None values.\"\"\"\n    if value:\n        return value.split(delimiter)\n    return []  # Return an empty list if value is None",
        "detail": "lxpapp.templatetags.lxpapp_filters",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "lxpapp.templatetags.lxpapp_filters",
        "description": "lxpapp.templatetags.lxpapp_filters",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef sort_by_name(users):\n    return sorted(users, key=lambda u: (u.first_name, u.last_name))\n@register.filter\ndef split_by(value, delimiter=','):\n    \"\"\"Splits a string by the given delimiter, handling None values.\"\"\"\n    if value:\n        return value.split(delimiter)\n    return []  # Return an empty list if value is None",
        "detail": "lxpapp.templatetags.lxpapp_filters",
        "documentation": {}
    },
    {
        "label": "activate",
        "kind": 2,
        "importPath": "lxpapp.activate",
        "description": "lxpapp.activate",
        "peekOfCode": "def activate(request, uidb64, token):\n    User = get_user_model()\n    try:\n        uid = urlsafe_base64_decode(uidb64)\n        user = User.objects.get(pk=uidb64)\n    except (TypeError, ValueError, OverflowError, User.DoesNotExist):\n        user = None\n    usertoken = User.objects.raw('SELECT user_id as id, activation_token FROM auth_userprofile WHERE user_id = ' + str(uidb64))\n    for x in usertoken:\n        usertoken = x.activation_token",
        "detail": "lxpapp.activate",
        "documentation": {}
    },
    {
        "label": "QuizConfig",
        "kind": 6,
        "importPath": "lxpapp.apps",
        "description": "lxpapp.apps",
        "peekOfCode": "class QuizConfig(AppConfig):\n    name = 'lxpapp'",
        "detail": "lxpapp.apps",
        "documentation": {}
    },
    {
        "label": "UserRegistrationForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class UserRegistrationForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = [\n                'username', \n                'password', \n                'email', \n                'first_name', \n                'last_name'\n        ]",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "ContactusForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class ContactusForm(forms.Form):\n    Name = forms.CharField(max_length=30)\n    Email = forms.EmailField()\n    Message = forms.CharField(max_length=500,widget=forms.Textarea(attrs={'rows': 3, 'cols': 30}))\nclass SubjectForm(forms.ModelForm):\n    subject_name = forms.CharField(\n        max_length=90000,\n        #  forms ↓\n        widget=forms.TextInput(attrs={'autofocus': True , 'class': 'form-control '})\n    )",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "SubjectForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class SubjectForm(forms.ModelForm):\n    subject_name = forms.CharField(\n        max_length=90000,\n        #  forms ↓\n        widget=forms.TextInput(attrs={'autofocus': True , 'class': 'form-control '})\n    )\n    class Meta:\n        model=models.Subject\n        fields=['subject_name']\nclass ChapterForm(forms.ModelForm):",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "ChapterForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class ChapterForm(forms.ModelForm):\n    def _init_(self, *args, **kwargs):\n        super(ChapterForm, self)._init_(*args, **kwargs)\n        for field in self.fields.values():\n            field.widget.attrs.update({'class': 'form-control mb-3'})  # Add a Bootstrap class or your custom class\n    class Meta:\n        model = models.Chapter\n        fields = ['subject', 'chapter_name']\n        widgets = {\n    'subject': forms.Select(attrs={",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "MainHeadForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class MainHeadForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(MainHeadForm, self).__init__(*args, **kwargs)\n        self.fields['mainhead_name'].label = 'Main Head Name'\n    mainhead_name = forms.CharField(\n        max_length=90000,\n        #  forms ↓\n        widget=forms.TextInput(attrs={'autofocus': True, 'class': 'form-control'})\n    )\n    class Meta:",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "SubHeadForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class SubHeadForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(SubHeadForm, self).__init__(*args, **kwargs)\n        self.fields['mainhead'].label = 'Main Head Name'\n        self.fields['subhead_name'].label = 'Sub Head Name'\n        # Add form-control class to mainhead dropdown\n        self.fields['mainhead'].widget.attrs['class'] = 'form-control mb-5'\n    subhead_name = forms.CharField(\n        max_length=90000,\n        widget=forms.TextInput(attrs={'autofocus': True, 'class': 'form-control'})",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "TopicForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class TopicForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(TopicForm, self).__init__(*args, **kwargs)\n        for field in self.fields.values():\n            field.widget.attrs.update({\n                'class': 'form-control mb-3'  # Add Bootstrap class and margin\n            })\n    class Meta:\n        model = models.Topic\n        fields = ['topic_name', 'chapter']",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "LearnerDetailsForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class LearnerDetailsForm(forms.ModelForm):\n    user_full_name = forms.CharField(\n        max_length=90000,\n        widget=forms.TextInput(attrs={'autofocus': True, 'class': 'form-control'}),\n        required=True  # Explicitly required\n    )\n    mobile = forms.CharField(\n        widget=forms.TextInput(attrs={'class': 'form-control'}),\n        required=True  # Explicitly required\n    )",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "CourseForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class CourseForm(forms.ModelForm):\n    class Meta:\n        model=models.Course \n        fields=['mainhead','subhead','themecolor']\n    def _init_(self, *args, **kwargs):\n        super(CourseForm, self)._init_(*args, **kwargs)\nclass CourseForm(forms.ModelForm):\n    class Meta:\n        model = models.Course\n        fields = ('course_name', 'subject', 'course', 'chapter', 'topic')",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "CourseForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class CourseForm(forms.ModelForm):\n    class Meta:\n        model = models.Course\n        fields = ('course_name', 'subject', 'course', 'chapter', 'topic')\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\nclass CourseSetForm(forms.ModelForm):\n    class Meta:\n        model = models.CourseSet\n        fields = ('courseset_name', 'subject', 'course', 'chapter', 'topic')",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "CourseSetForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class CourseSetForm(forms.ModelForm):\n    class Meta:\n        model = models.CourseSet\n        fields = ('courseset_name', 'subject', 'course', 'chapter', 'topic')\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\nclass TrainerNotificationForm(forms.ModelForm):\n    trainerID=forms.ModelChoiceField(queryset=UserSocialAuth.objects.all().filter(utype = '1',user_id__in=models.User.objects.all().order_by('first_name')),empty_label=\"Trainer Name\", to_field_name=\"id\")\n    trainernotification_message = forms.CharField(\n        max_length=255,",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "TrainerNotificationForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class TrainerNotificationForm(forms.ModelForm):\n    trainerID=forms.ModelChoiceField(queryset=UserSocialAuth.objects.all().filter(utype = '1',user_id__in=models.User.objects.all().order_by('first_name')),empty_label=\"Trainer Name\", to_field_name=\"id\")\n    trainernotification_message = forms.CharField(\n        max_length=255,\n        #  forms ↓\n        widget=forms.TextInput(attrs={'autofocus': True})\n    )\n    class Meta:\n        model=models.TrainerNotification\n        fields=['trainernotification_message']        ",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "MaterialForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class MaterialForm(forms.ModelForm):\n    class Meta:\n        model = models.Material\n        fields = ('subject', 'chapter','topic','mtype','urlvalue','description')\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\nclass CourseTypeForm(forms.ModelForm):\n    coursetype_name = forms.CharField(\n        max_length=90000,\n        #  forms ↓",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "CourseTypeForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class CourseTypeForm(forms.ModelForm):\n    coursetype_name = forms.CharField(\n        max_length=90000,\n        #  forms ↓\n        widget=forms.TextInput(attrs={'autofocus': True, 'class': 'form-control'})\n    )\n    class Meta:\n        model=models.CourseType\n        fields=['coursetype_name']\nclass BatchForm(forms.ModelForm):",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "BatchForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class BatchForm(forms.ModelForm):\n    coursetypeID=forms.ModelChoiceField(queryset=models.CourseType.objects.all(),empty_label=\"Course Type Name\", to_field_name=\"id\")\n    batch_name = forms.CharField(\n        max_length=255,\n        #  forms ↓\n        widget=forms.TextInput(attrs={'autofocus': True})\n    )\n    class Meta:\n        model=models.Batch\n        fields=['batch_name','stdate','enddate']",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "ExamForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class ExamForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(ExamForm, self).__init__(*args, **kwargs)\n        self.fields['questiontpye'].label = 'Question Type'\n    class Meta:\n        model=models.Exam\n        fields=['exam_name','questiontpye','batch']\nclass McqQuestionForm(forms.ModelForm):\n    examID=forms.ModelChoiceField(queryset=models.Exam.objects.all().filter(questiontpye='MCQ'),empty_label=\"Exam Name\", to_field_name=\"id\")\n    class Meta:",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "McqQuestionForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class McqQuestionForm(forms.ModelForm):\n    examID=forms.ModelChoiceField(queryset=models.Exam.objects.all().filter(questiontpye='MCQ'),empty_label=\"Exam Name\", to_field_name=\"id\")\n    class Meta:\n        model=models.McqQuestion\n        fields=['marks','question','option1','option2','option3','option4','answer']\n        widgets = {\n            'question': forms.Textarea(attrs={'rows': 3, 'cols': 50,'autofocus': True})\n        }\nclass ShortQuestionForm(forms.ModelForm):\n    examID=forms.ModelChoiceField(queryset=models.Exam.objects.all().filter(questiontpye='ShortAnswer'),empty_label=\"Exam Name\", to_field_name=\"id\")",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "ShortQuestionForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class ShortQuestionForm(forms.ModelForm):\n    examID=forms.ModelChoiceField(queryset=models.Exam.objects.all().filter(questiontpye='ShortAnswer'),empty_label=\"Exam Name\", to_field_name=\"id\")\n    class Meta:\n        model=models.McqQuestion\n        fields=['marks','question']\n        widgets = {\n            'question': forms.Textarea(attrs={'rows': 3, 'cols': 50, 'autofocus': True})\n        }\nclass YTExamQuestionForm(forms.ModelForm):\n    playlistID=forms.ModelChoiceField(queryset=models.Playlist.objects.all(),empty_label=\"Play List Name\", to_field_name=\"id\")",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "YTExamQuestionForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class YTExamQuestionForm(forms.ModelForm):\n    playlistID=forms.ModelChoiceField(queryset=models.Playlist.objects.all(),empty_label=\"Play List Name\", to_field_name=\"id\")\n    videoID=forms.ModelChoiceField(queryset=models.Video.objects.all(),empty_label=\"Video Name\", to_field_name=\"id\")\n    class Meta:\n        model=models.YTExamQuestion\n        fields=['marks','question','option1','option2','option3','option4','answer']\n        widgets = {\n            'question': forms.Textarea(attrs={'rows': 3, 'cols': 50,'autofocus': True})\n        }\nclass SessionMaterialForm(forms.ModelForm):",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "SessionMaterialForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class SessionMaterialForm(forms.ModelForm):\n    class Meta:\n        model = models.SessionMaterial\n        fields = ('playlist', 'video','mtype','urlvalue','description')\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields['video'].queryset = models.Video.objects.none()\n        if 'playlist' in self.data:\n            try:\n                playlist_id = int(self.data.get('playlist'))",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "ChapterQuestionForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class ChapterQuestionForm(forms.ModelForm):\n    class Meta:\n        model=models.ChapterQuestion\n        fields=['subject', 'chapter','marks','question','option1','option2','option3','option4','answer']\n        widgets = {\n            'question': forms.Textarea(attrs={'rows': 3, 'cols': 50,'autofocus': True})\n        }\nclass K8STerminalForm(forms.ModelForm):\n    learnerID=forms.ModelChoiceField(queryset= User.objects.all().filter(id__in = UserSocialAuth.objects.all().filter(Q(utype=0) | Q(utype=2),status = 1)),empty_label=\"Learner Name\", to_field_name=\"id\")\n    class Meta:",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "K8STerminalForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class K8STerminalForm(forms.ModelForm):\n    learnerID=forms.ModelChoiceField(queryset= User.objects.all().filter(id__in = UserSocialAuth.objects.all().filter(Q(utype=0) | Q(utype=2),status = 1)),empty_label=\"Learner Name\", to_field_name=\"id\")\n    class Meta:\n        model=models.K8STerminal\n        fields=['Password','usagevalue']\nclass PlayListForm(forms.ModelForm):\n    name = forms.CharField(\n        max_length=90000,\n        #  forms ↓\n        widget=forms.TextInput(attrs={'autofocus': True})",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "PlayListForm",
        "kind": 6,
        "importPath": "lxpapp.forms",
        "description": "lxpapp.forms",
        "peekOfCode": "class PlayListForm(forms.ModelForm):\n    name = forms.CharField(\n        max_length=90000,\n        #  forms ↓\n        widget=forms.TextInput(attrs={'autofocus': True})\n    )\n    channel_id = forms.CharField(\n        max_length=90000,\n        #  forms ↓\n        widget=forms.TextInput(attrs={'value': 'UCxdhwzsgcGldYghv6u3nrXw'})",
        "detail": "lxpapp.forms",
        "documentation": {}
    },
    {
        "label": "UserLog",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class UserLog(models.Model):\n    user=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    login =  models.DateTimeField(default=datetime.datetime.now)\n    logout = models.DateTimeField(default=datetime.datetime.now)\n    dur = models.CharField(default='',max_length=200)\n    session_id = models.CharField(default='',max_length=200)\nclass UserProfile(models.Model):\n    user=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    regdate =  models.DateTimeField(default=datetime.datetime.now)\n    contactno = models.CharField(default='',max_length=200)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class UserProfile(models.Model):\n    user=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    regdate =  models.DateTimeField(default=datetime.datetime.now)\n    contactno = models.CharField(default='',max_length=200)\n    skills = models.CharField(default='',max_length=200)\n    bio = models.CharField(default='',max_length=2000)\n    profile_img = models.ImageField(upload_to='profile_img/', blank=True, null=True)\nclass UserPics(models.Model):\n    user=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    picpath = models.TextField(default='')",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "UserPics",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class UserPics(models.Model):\n    user=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    picpath = models.TextField(default='')\n    pic = models.ImageField()\nclass LearnerDetails(models.Model):\n        learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n        user_full_name = models.CharField(max_length=200)\n        mobile = models.CharField(max_length=10)\n        whatsappno = models.CharField(max_length=10,default='')\n        profile_pic = models.ImageField(upload_to='profile_pics/', blank=True, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "LearnerDetails",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class LearnerDetails(models.Model):\n        learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n        user_full_name = models.CharField(max_length=200)\n        mobile = models.CharField(max_length=10)\n        whatsappno = models.CharField(max_length=10,default='')\n        profile_pic = models.ImageField(upload_to='profile_pics/', blank=True, null=True)\nclass IsFirstLogIn(models.Model):\n    user=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    def __str__(self):\n        return self.user",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "IsFirstLogIn",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class IsFirstLogIn(models.Model):\n    user=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    def __str__(self):\n        return self.user\n#Need to del\nclass Subject(models.Model):\n    subject_name = models.CharField(max_length=200)\n    def __str__(self):\n        try:\n            return self.subject_name",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Subject(models.Model):\n    subject_name = models.CharField(max_length=200)\n    def __str__(self):\n        try:\n            return self.subject_name\n        except:\n            return self\nclass Chapter(models.Model):\n    chapter_name = models.CharField(max_length=200)\n    subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Chapter",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Chapter(models.Model):\n    chapter_name = models.CharField(max_length=200)\n    subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, null=True)\n    def __str__(self):\n        return self.chapter_name\n# class Course(models.Model):\n#     subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, null=True)\n#     course_name = models.CharField(max_length=200)\n#     def __str__(self):\n#         return self.course_name",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "MainHead",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class MainHead(models.Model):\n    mainhead_name = models.CharField(max_length=200)\n    def __str__(self):\n        try:\n            return self.mainhead_name\n        except:\n            return self\nclass SubHead(models.Model):\n    mainhead = models.ForeignKey(MainHead, on_delete=models.SET_NULL, null=True)\n    subhead_name = models.CharField(max_length=200)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "SubHead",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class SubHead(models.Model):\n    mainhead = models.ForeignKey(MainHead, on_delete=models.SET_NULL, null=True)\n    subhead_name = models.CharField(max_length=200)\n    def __str__(self):\n        return self.subhead_name\nclass Course(models.Model):\n    mainhead = models.ForeignKey(MainHead, on_delete=models.SET_NULL, null=True)\n    subhead = models.ForeignKey(SubHead, on_delete=models.SET_NULL, null=True)\n    course_name = models.CharField(max_length=200)\n    description = models.CharField(max_length=1000,default='')",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Course",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Course(models.Model):\n    mainhead = models.ForeignKey(MainHead, on_delete=models.SET_NULL, null=True)\n    subhead = models.ForeignKey(SubHead, on_delete=models.SET_NULL, null=True)\n    course_name = models.CharField(max_length=200)\n    description = models.CharField(max_length=1000,default='')\n    whatlearn = models.CharField(max_length=1000,default='')\n    includes = models.CharField(max_length=1000,default='')\n    cat=(('1','Red'),('2','Green'),('3','Blue'),('4','Orange'))\n    themecolor=models.CharField(max_length=200,choices=cat,default='Green')\n    tags = models.CharField(max_length=10000,default='')",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "CourseChapter",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class CourseChapter(models.Model):\n    course = models.ForeignKey(Course, on_delete=models.SET_NULL, null=True)\n    subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, null=True)\n    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, null=True)\n    def __str__(self):\n        return self.chapter.chapter_name\nclass Topic(models.Model):\n    topic_name = models.CharField(max_length=200)\n    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, null=True)\n    def __str__(self):",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Topic",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Topic(models.Model):\n    topic_name = models.CharField(max_length=200)\n    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, null=True)\n    def __str__(self):\n        return self.topic_name\nclass Course(models.Model):\n    course_name = models.CharField(max_length=200)\n    subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, null=True,blank=True)\n    course = models.ForeignKey(Course, on_delete=models.SET_NULL, null=True,blank=True)\n    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, null=True,blank=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Course",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Course(models.Model):\n    course_name = models.CharField(max_length=200)\n    subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, null=True,blank=True)\n    course = models.ForeignKey(Course, on_delete=models.SET_NULL, null=True,blank=True)\n    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, null=True,blank=True)\n    topic = models.ForeignKey(Topic, on_delete=models.SET_NULL, null=True,blank=True)\n    def __str__(self):\n        return self.course_name\nclass CourseDetails(models.Model):\n    course = models.ForeignKey(Course, on_delete=models.SET_NULL, null=True,blank=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "CourseDetails",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class CourseDetails(models.Model):\n    course = models.ForeignKey(Course, on_delete=models.SET_NULL, null=True,blank=True)\n    subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, null=True,blank=True)\n    course = models.ForeignKey(Course, on_delete=models.SET_NULL, null=True,blank=True)\n    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, null=True,blank=True)\n    topic = models.ForeignKey(Topic, on_delete=models.SET_NULL, null=True,blank=True)\n    def __str__(self):\n        return self.course\n    def to_dict(c):\n            if isinstance(c, CourseDetails):",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "CourseSet",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class CourseSet(models.Model):\n    courseset_name = models.CharField(max_length=200)\n    subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, null=True,blank=True)\n    course = models.ForeignKey(Course, on_delete=models.SET_NULL, null=True,blank=True)\n    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, null=True,blank=True)\n    topic = models.ForeignKey(Topic, on_delete=models.SET_NULL, null=True,blank=True)\n    def __str__(self):\n        return self.courseset_name\nclass CourseSetDetails(models.Model):\n    courseset = models.ForeignKey(CourseSet, on_delete=models.SET_NULL, null=True,blank=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "CourseSetDetails",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class CourseSetDetails(models.Model):\n    courseset = models.ForeignKey(CourseSet, on_delete=models.SET_NULL, null=True,blank=True)\n    subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, null=True,blank=True)\n    course = models.ForeignKey(Course, on_delete=models.SET_NULL, null=True,blank=True)\n    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, null=True,blank=True)\n    topic = models.ForeignKey(Topic, on_delete=models.SET_NULL, null=True,blank=True)\n    def __str__(self):\n        return self.courseset\n    def to_dict(c):\n            if isinstance(c, CourseSetDetails):",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Tag(models.Model):\n    name = models.CharField(max_length=69)\n    created_by = models.ForeignKey(User, related_name=\"playlist_tags\", on_delete=models.SET_NULL, null=True)\n    times_viewed = models.IntegerField(default=0)\n    times_viewed_per_week = models.IntegerField(default=0)\n    # type = models.CharField(max_length=10)  # either 'playlist' or 'video'\n    last_views_reset = models.DateTimeField(default=datetime.datetime.now)\nclass Video(models.Model):\n    # video details\n    video_id = models.CharField(max_length=100)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Video",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Video(models.Model):\n    # video details\n    video_id = models.CharField(max_length=100)\n    name = models.CharField(max_length=100, blank=True)\n    duration = models.CharField(max_length=100, blank=True)\n    duration_in_seconds = models.BigIntegerField(default=0)\n    thumbnail_url = models.TextField(blank=True)\n    published_at = models.DateTimeField(default=datetime.datetime.now)\n    description = models.TextField(default=\"\")\n    has_cc = models.BooleanField(default=False, blank=True, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Playlist",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Playlist(models.Model):\n    tags = models.ManyToManyField(Tag, related_name=\"playlists\")\n    # playlist is made by this channel\n    channel_id = models.TextField(blank=True)\n    channel_name = models.TextField(blank=True)\n    # playlist details\n    is_yt_mix = models.BooleanField(default=False)\n    playlist_id = models.CharField(max_length=150)\n    name = models.CharField(max_length=150, blank=True)  # YT PLAYLIST NAMES CAN ONLY HAVE MAX OF 150 CHARS\n    thumbnail_url = models.TextField(blank=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "PlaylistItem",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class PlaylistItem(models.Model):\n    playlist = models.ForeignKey(Playlist, related_name=\"playlist_items\",\n                                 on_delete=models.SET_NULL, null=True)  # playlist this pl item belongs to\n    video = models.ForeignKey(Video, on_delete=models.SET_NULL, null=True)\n    # details\n    playlist_item_id = models.CharField(max_length=100)  # the item id of the playlist this video beo\n    video_position = models.IntegerField(blank=True)  # video position in the playlist\n    published_at = models.DateTimeField(default=datetime.datetime.now)  # snippet.publishedAt - The date and time that the item was added to the playlist\n    channel_id = models.CharField(null=True,\n                                  max_length=250)  # snippet.channelId - The ID that YouTube uses to uniquely identify the user that added the item to the playlist.",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Pin",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Pin(models.Model):\n    kind = models.CharField(max_length=100)  # \"playlist\", \"video\"\n    playlist = models.ForeignKey(Playlist, on_delete=models.SET_NULL, null=True)\n    video = models.ForeignKey(Video, on_delete=models.SET_NULL, null=True)\n##############################################################################\nclass TrainerNotification(models.Model):\n    trainernotification_message = models.CharField(max_length=200)\n    status = models.BooleanField(default=False)\n    trainer = models.ForeignKey(User, related_name=\"trainers\",\n                                 on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "TrainerNotification",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class TrainerNotification(models.Model):\n    trainernotification_message = models.CharField(max_length=200)\n    status = models.BooleanField(default=False)\n    trainer = models.ForeignKey(User, related_name=\"trainers\",\n                                 on_delete=models.SET_NULL, null=True)\n    sender = models.ForeignKey(User, related_name=\"senders\",\n                                 on_delete=models.SET_NULL, null=True)\n    def __str__(self):\n        return self.trainernotification_message\nclass Material(models.Model):",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Material",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Material(models.Model):\n    subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, null=True)\n    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, null=True)\n    id = models.AutoField(primary_key=True)\n    serial_number = models.IntegerField(default=0)\n    topic = models.CharField(max_length=200)\n    cat = (('PDF', 'PDF'), ('HTML', 'HTML'), ('Video', 'Video'), ('URL', 'URL'))\n    mtype = models.CharField(max_length=200, choices=cat, default='PDF')\n    urlvalue = models.CharField(max_length=2000)\n    description = models.CharField(max_length=200)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "CourseType",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class CourseType(models.Model):\n    coursetype_name = models.CharField(max_length=200)\n    def __str__(self):\n        return self.coursetype_name\nclass Batch(models.Model):\n   batch_name = models.CharField(max_length=50)\n   coursetype=models.ForeignKey(CourseType,on_delete=models.SET_NULL, null=True)\n   stdate = models.DateField()\n   enddate = models.DateField()\n   def __str__(self):",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Batch",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Batch(models.Model):\n   batch_name = models.CharField(max_length=50)\n   coursetype=models.ForeignKey(CourseType,on_delete=models.SET_NULL, null=True)\n   stdate = models.DateField()\n   enddate = models.DateField()\n   def __str__(self):\n      return self.batch_name\nclass BatchCourse(models.Model):\n   batch=models.ForeignKey(Batch,on_delete=models.SET_NULL, null=True)\n   course=models.ForeignKey(Course,on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "BatchCourse",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class BatchCourse(models.Model):\n   batch=models.ForeignKey(Batch,on_delete=models.SET_NULL, null=True)\n   course=models.ForeignKey(Course,on_delete=models.SET_NULL, null=True)\nclass BatchRecordedVDOList(models.Model):\n   batch=models.ForeignKey(Batch,on_delete=models.SET_NULL, null=True)\n   playlist=models.ForeignKey(Playlist,on_delete=models.SET_NULL, null=True)\nclass BatchTrainer(models.Model):\n   batch=models.ForeignKey(Batch,on_delete=models.SET_NULL, null=True)\n   trainer=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\nclass Batchlearner(models.Model):",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "BatchRecordedVDOList",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class BatchRecordedVDOList(models.Model):\n   batch=models.ForeignKey(Batch,on_delete=models.SET_NULL, null=True)\n   playlist=models.ForeignKey(Playlist,on_delete=models.SET_NULL, null=True)\nclass BatchTrainer(models.Model):\n   batch=models.ForeignKey(Batch,on_delete=models.SET_NULL, null=True)\n   trainer=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\nclass Batchlearner(models.Model):\n   batch=models.ForeignKey(Batch,on_delete=models.SET_NULL, null=True)\n   learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n   fee = models.IntegerField(default=0)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "BatchTrainer",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class BatchTrainer(models.Model):\n   batch=models.ForeignKey(Batch,on_delete=models.SET_NULL, null=True)\n   trainer=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\nclass Batchlearner(models.Model):\n   batch=models.ForeignKey(Batch,on_delete=models.SET_NULL, null=True)\n   learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n   fee = models.IntegerField(default=0)\nclass Exam(models.Model):\n   batch=models.ForeignKey(Batch,on_delete=models.SET_NULL, null=True)\n   exam_name = models.CharField(max_length=50)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Batchlearner",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Batchlearner(models.Model):\n   batch=models.ForeignKey(Batch,on_delete=models.SET_NULL, null=True)\n   learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n   fee = models.IntegerField(default=0)\nclass Exam(models.Model):\n   batch=models.ForeignKey(Batch,on_delete=models.SET_NULL, null=True)\n   exam_name = models.CharField(max_length=50)\n   cat=(('MCQ','MCQ'),('ShortAnswer','ShortAnswer'))\n   questiontpye=models.CharField(max_length=200,choices=cat,default='')\n   def __str__(self):",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Exam",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Exam(models.Model):\n   batch=models.ForeignKey(Batch,on_delete=models.SET_NULL, null=True)\n   exam_name = models.CharField(max_length=50)\n   cat=(('MCQ','MCQ'),('ShortAnswer','ShortAnswer'))\n   questiontpye=models.CharField(max_length=200,choices=cat,default='')\n   def __str__(self):\n        return self.exam_name\nclass McqQuestion(models.Model):\n   exam=models.ForeignKey(Exam,on_delete=models.SET_NULL, null=True)\n   question=models.CharField(max_length=600)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "McqQuestion",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class McqQuestion(models.Model):\n   exam=models.ForeignKey(Exam,on_delete=models.SET_NULL, null=True)\n   question=models.CharField(max_length=600)\n   option1=models.CharField(max_length=200)\n   option2=models.CharField(max_length=200)\n   option3=models.CharField(max_length=200)\n   option4=models.CharField(max_length=200)\n   cat=(('1','Option1'),('2','Option2'),('3','Option3'),('4','Option4'))\n   answer=models.CharField(max_length=200,choices=cat)\n   marks=models.IntegerField(default=0)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "McqResult",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class McqResult(models.Model):\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    exam = models.ForeignKey(Exam,on_delete=models.SET_NULL, null=True)\n    marks = models.PositiveIntegerField()\n    wrong = models.PositiveIntegerField()\n    correct = models.PositiveIntegerField()\n    timetaken = models.CharField(max_length=200)\n    date = models.DateTimeField(auto_now=True)\nclass McqResultDetails(models.Model):\n    mcqresult=models.ForeignKey(McqResult,on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "McqResultDetails",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class McqResultDetails(models.Model):\n    mcqresult=models.ForeignKey(McqResult,on_delete=models.SET_NULL, null=True)\n    question = models.ForeignKey(McqQuestion,on_delete=models.SET_NULL, null=True)\n    selected=models.CharField(max_length=200)\nclass ShortQuestion(models.Model):\n   exam=models.ForeignKey(Exam,on_delete=models.SET_NULL, null=True)\n   question=models.CharField(max_length=600)\n   marks=models.IntegerField(default=0)\nclass ShortResult(models.Model):\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "ShortQuestion",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class ShortQuestion(models.Model):\n   exam=models.ForeignKey(Exam,on_delete=models.SET_NULL, null=True)\n   question=models.CharField(max_length=600)\n   marks=models.IntegerField(default=0)\nclass ShortResult(models.Model):\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    exam = models.ForeignKey(Exam,on_delete=models.SET_NULL, null=True)\n    marks = models.PositiveIntegerField()\n    datecreate = models.DateTimeField(auto_now=True)\n    status= models.BooleanField(default=False)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "ShortResult",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class ShortResult(models.Model):\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    exam = models.ForeignKey(Exam,on_delete=models.SET_NULL, null=True)\n    marks = models.PositiveIntegerField()\n    datecreate = models.DateTimeField(auto_now=True)\n    status= models.BooleanField(default=False)\n    timetaken = models.CharField(max_length=200)\nclass ShortResultDetails(models.Model):\n    shortresult=models.ForeignKey(ShortResult,on_delete=models.SET_NULL, null=True)\n    question=models.ForeignKey(ShortQuestion,on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "ShortResultDetails",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class ShortResultDetails(models.Model):\n    shortresult=models.ForeignKey(ShortResult,on_delete=models.SET_NULL, null=True)\n    question=models.ForeignKey(ShortQuestion,on_delete=models.SET_NULL, null=True)\n    marks=models.PositiveIntegerField()\n    answer=models.CharField(max_length=200)\n    feedback=models.CharField(max_length=200,default='')\nclass YTExamQuestion(models.Model):\n   playlist=models.ForeignKey(Playlist,on_delete=models.SET_NULL, null=True)\n   video=models.ForeignKey(Video,on_delete=models.SET_NULL, null=True)\n   question=models.CharField(max_length=600)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "YTExamQuestion",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class YTExamQuestion(models.Model):\n   playlist=models.ForeignKey(Playlist,on_delete=models.SET_NULL, null=True)\n   video=models.ForeignKey(Video,on_delete=models.SET_NULL, null=True)\n   question=models.CharField(max_length=600)\n   option1=models.CharField(max_length=200)\n   option2=models.CharField(max_length=200)\n   option3=models.CharField(max_length=200)\n   option4=models.CharField(max_length=200)\n   cat=(('1','Option1'),('2','Option2'),('3','Option3'),('4','Option4'))\n   answer=models.CharField(max_length=200,choices=cat)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "YTExamResult",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class YTExamResult(models.Model):\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    ytexamquestion = models.ForeignKey(YTExamQuestion,on_delete=models.SET_NULL, null=True)\n    marks = models.PositiveIntegerField()\n    wrong = models.PositiveIntegerField()\n    correct = models.PositiveIntegerField()\n    timetaken = models.CharField(max_length=200)\n    date = models.DateTimeField(auto_now=True)\nclass YTExamResultDetails(models.Model):\n    ytexamresult=models.ForeignKey(YTExamResult,on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "YTExamResultDetails",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class YTExamResultDetails(models.Model):\n    ytexamresult=models.ForeignKey(YTExamResult,on_delete=models.SET_NULL, null=True)\n    question = models.ForeignKey(YTExamQuestion,on_delete=models.SET_NULL, null=True)\n    selected=models.CharField(max_length=200)\nclass VideoToUnlock(models.Model):\n    playlist=models.ForeignKey(Playlist,on_delete=models.SET_NULL, null=True)\n    video=models.ForeignKey(Video,on_delete=models.SET_NULL, null=True)\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\nclass VideoWatched(models.Model):\n    video=models.ForeignKey(Video,on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "VideoToUnlock",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class VideoToUnlock(models.Model):\n    playlist=models.ForeignKey(Playlist,on_delete=models.SET_NULL, null=True)\n    video=models.ForeignKey(Video,on_delete=models.SET_NULL, null=True)\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\nclass VideoWatched(models.Model):\n    video=models.ForeignKey(Video,on_delete=models.SET_NULL, null=True)\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\nclass LearnerPlaylistCount(models.Model):\n    playlist=models.ForeignKey(Playlist,on_delete=models.SET_NULL, null=True)\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "VideoWatched",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class VideoWatched(models.Model):\n    video=models.ForeignKey(Video,on_delete=models.SET_NULL, null=True)\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\nclass LearnerPlaylistCount(models.Model):\n    playlist=models.ForeignKey(Playlist,on_delete=models.SET_NULL, null=True)\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    count = models.PositiveIntegerField(default=0)\nclass SessionMaterial(models.Model):\n    playlist=models.ForeignKey(Playlist,on_delete=models.SET_NULL, null=True)\n    video=models.ForeignKey(Video,on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "LearnerPlaylistCount",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class LearnerPlaylistCount(models.Model):\n    playlist=models.ForeignKey(Playlist,on_delete=models.SET_NULL, null=True)\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    count = models.PositiveIntegerField(default=0)\nclass SessionMaterial(models.Model):\n    playlist=models.ForeignKey(Playlist,on_delete=models.SET_NULL, null=True)\n    video=models.ForeignKey(Video,on_delete=models.SET_NULL, null=True)\n    cat=(('PDF','PDF'),('HTML','HTML'),('Video','Video'),('URL','URL'))\n    mtype=models.CharField(max_length=200,choices=cat, default= 'PDF')\n    urlvalue=models.CharField(max_length=200)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "SessionMaterial",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class SessionMaterial(models.Model):\n    playlist=models.ForeignKey(Playlist,on_delete=models.SET_NULL, null=True)\n    video=models.ForeignKey(Video,on_delete=models.SET_NULL, null=True)\n    cat=(('PDF','PDF'),('HTML','HTML'),('Video','Video'),('URL','URL'))\n    mtype=models.CharField(max_length=200,choices=cat, default= 'PDF')\n    urlvalue=models.CharField(max_length=200)\n    description=models.CharField(max_length=200)\nclass LearnerMaterialWatched(models.Model):\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    course=models.ForeignKey(Course,on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "LearnerMaterialWatched",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class LearnerMaterialWatched(models.Model):\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    course=models.ForeignKey(Course,on_delete=models.SET_NULL, null=True)\n    chapter=models.ForeignKey(Chapter,on_delete=models.SET_NULL, null=True)\n    material=models.ForeignKey(Material,on_delete=models.SET_NULL, null=True)\nclass LastUserLogin(models.Model):\n    user=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\nclass ChapterQuestion(models.Model):\n   subject=models.ForeignKey(Subject,on_delete=models.SET_NULL, null=True)\n   chapter=models.ForeignKey(Chapter,on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "LastUserLogin",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class LastUserLogin(models.Model):\n    user=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\nclass ChapterQuestion(models.Model):\n   subject=models.ForeignKey(Subject,on_delete=models.SET_NULL, null=True)\n   chapter=models.ForeignKey(Chapter,on_delete=models.SET_NULL, null=True)\n   question=models.CharField(max_length=600)\n   option1=models.CharField(max_length=200)\n   option2=models.CharField(max_length=200)\n   option3=models.CharField(max_length=200)\n   option4=models.CharField(max_length=200)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "ChapterQuestion",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class ChapterQuestion(models.Model):\n   subject=models.ForeignKey(Subject,on_delete=models.SET_NULL, null=True)\n   chapter=models.ForeignKey(Chapter,on_delete=models.SET_NULL, null=True)\n   question=models.CharField(max_length=600)\n   option1=models.CharField(max_length=200)\n   option2=models.CharField(max_length=200)\n   option3=models.CharField(max_length=200)\n   option4=models.CharField(max_length=200)\n   cat=(('1','Option1'),('2','Option2'),('3','Option3'),('4','Option4'))\n   answer=models.CharField(max_length=200,choices=cat)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "ChapterResult",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class ChapterResult(models.Model):\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    course = models.ForeignKey(Course,on_delete=models.SET_NULL, null=True)\n    subject = models.ForeignKey(Subject,on_delete=models.SET_NULL, null=True)\n    chapter = models.ForeignKey(Chapter,on_delete=models.SET_NULL, null=True)\n    marks = models.PositiveIntegerField()\n    wrong = models.PositiveIntegerField()\n    correct = models.PositiveIntegerField()\n    timetaken = models.CharField(max_length=200)\n    date = models.DateTimeField(auto_now=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "ChapterResultDetails",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class ChapterResultDetails(models.Model):\n    chapterresult=models.ForeignKey(ChapterResult,on_delete=models.SET_NULL, null=True)\n    question = models.ForeignKey(ChapterQuestion,on_delete=models.SET_NULL, null=True)\n    selected=models.CharField(max_length=200)\nclass UserActivity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    url = models.CharField(max_length=2048)\n    method = models.CharField(max_length=16)\n    status_code = models.IntegerField(blank=True, null=True)\n    timestamp = models.DateTimeField(auto_now_add=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "UserActivity",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class UserActivity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    url = models.CharField(max_length=2048)\n    method = models.CharField(max_length=16)\n    status_code = models.IntegerField(blank=True, null=True)\n    timestamp = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        ordering = ['-timestamp']\n    def __str__(self):\n        return f'{self.user.username} accessed {self.url} ({self.status_code})'",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "ErrorLog",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class ErrorLog(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, blank=True, null=True)\n    url = models.CharField(max_length=2048)\n    exception = models.TextField()\n    traceback = models.TextField()\n    timestamp = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        ordering = ['-timestamp']\n    def __str__(self):\n        return f'Error occurred while processing {self.url}'",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "LearnerCart",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class LearnerCart(models.Model):\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    course = models.ForeignKey(Course,on_delete=models.SET_NULL, null=True)\n    status=models.IntegerField(default=0)\nclass K8STerminal(models.Model):\n    trainer=models.ForeignKey(User,on_delete=models.SET_NULL, null=True, related_name='%(class)s_requests_trainer')\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True, related_name='%(class)s_requests_learner')\n    Password=models.TextField()\n    usagevalue=models.PositiveIntegerField(default=0)\nclass K8STerminalLearnerCount(models.Model):",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "K8STerminal",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class K8STerminal(models.Model):\n    trainer=models.ForeignKey(User,on_delete=models.SET_NULL, null=True, related_name='%(class)s_requests_trainer')\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True, related_name='%(class)s_requests_learner')\n    Password=models.TextField()\n    usagevalue=models.PositiveIntegerField(default=0)\nclass K8STerminalLearnerCount(models.Model):\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    usedvalue=models.PositiveIntegerField(default=0)\nclass Scheduler(models.Model):\n    trainer=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "K8STerminalLearnerCount",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class K8STerminalLearnerCount(models.Model):\n    learner=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    usedvalue=models.PositiveIntegerField(default=0)\nclass Scheduler(models.Model):\n    trainer=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    cat=(('1','Session'),('2','Interview'),('3','Client Requirment'),('4','Lab Call'),('5','Meeting'),('6','Others'))\n    type=models.CharField(max_length=200,choices=cat,null=True)\n    subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, null=True)\n    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, null=True)\n    topic = models.ForeignKey(Topic, on_delete=models.SET_NULL, null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "Scheduler",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class Scheduler(models.Model):\n    trainer=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    cat=(('1','Session'),('2','Interview'),('3','Client Requirment'),('4','Lab Call'),('5','Meeting'),('6','Others'))\n    type=models.CharField(max_length=200,choices=cat,null=True)\n    subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, null=True)\n    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, null=True)\n    topic = models.ForeignKey(Topic, on_delete=models.SET_NULL, null=True)\n    start = models.DateTimeField()\n    end = models.DateTimeField(null=True, blank=True)\n    eventdetails=models.CharField(max_length=200,null=True)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "SchedulerStatus",
        "kind": 6,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "class SchedulerStatus(models.Model): \n    date = models.DateField()\n    scheduler=models.ForeignKey(Scheduler,on_delete=models.SET_NULL, null=True)\n    trainer=models.ForeignKey(User,on_delete=models.SET_NULL, null=True)\n    status=models.PositiveIntegerField(default=0)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "getHumanizedTimeString",
        "kind": 2,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "def getHumanizedTimeString(seconds):\n      return humanize.precisedelta(\n         datetime.timedelta(seconds=seconds)).upper(). \\\n         replace(\" month\".upper(), \"m.\").replace(\" months\".upper(), \"m.\").replace(\" days\".upper(), \"d.\").replace(\n         \" day\".upper(), \"d.\").replace(\" hours\".upper(), \"hrs.\").replace(\" hour\".upper(), \"hr.\").replace(\n         \" minutes\".upper(), \"mins.\").replace(\" minute\".upper(), \"min.\").replace(\n         \"and\".upper(), \"\").replace(\" seconds\".upper(), \"secs.\").replace(\" second\".upper(), \"sec.\").replace(\",\", \"\")\nSECRETS = {\"SECRET_KEY\": 'django-insecure-ycs22y+20sq67y(6dm6ynqw=dlhg!)%vuqpd@$p6rf3!#1h$u=',\n           \"YOUTUBE_V3_API_KEY\": 'AIzaSyCBOucAIJ5PdLeqzTfkTQ_6twsjNaMecS8',\n           \"GOOGLE_OAUTH_CLIENT_ID\": \"699466001074-biu4pjifnphoh1raipgi5mm5bf72h1ot.apps.googleusercontent.com\",",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "SECRETS",
        "kind": 5,
        "importPath": "lxpapp.models",
        "description": "lxpapp.models",
        "peekOfCode": "SECRETS = {\"SECRET_KEY\": 'django-insecure-ycs22y+20sq67y(6dm6ynqw=dlhg!)%vuqpd@$p6rf3!#1h$u=',\n           \"YOUTUBE_V3_API_KEY\": 'AIzaSyCBOucAIJ5PdLeqzTfkTQ_6twsjNaMecS8',\n           \"GOOGLE_OAUTH_CLIENT_ID\": \"699466001074-biu4pjifnphoh1raipgi5mm5bf72h1ot.apps.googleusercontent.com\",\n           \"GOOGLE_OAUTH_CLIENT_SECRET\": \"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\",\n           \"GOOGLE_OAUTH_SCOPES\": ['https://www.googleapis.com/auth/youtube']}\nclass Tag(models.Model):\n    name = models.CharField(max_length=69)\n    created_by = models.ForeignKey(User, related_name=\"playlist_tags\", on_delete=models.SET_NULL, null=True)\n    times_viewed = models.IntegerField(default=0)\n    times_viewed_per_week = models.IntegerField(default=0)",
        "detail": "lxpapp.models",
        "documentation": {}
    },
    {
        "label": "RequestMiddleware",
        "kind": 6,
        "importPath": "lxpapp.userlinktraking",
        "description": "lxpapp.userlinktraking",
        "peekOfCode": "class RequestMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        thread_locals = threading.local()\n        thread_locals.request = request\n        response = self.get_response(request)\n        return response\n    @staticmethod\n    def get_current_request():",
        "detail": "lxpapp.userlinktraking",
        "documentation": {}
    },
    {
        "label": "ErrorMiddleware",
        "kind": 6,
        "importPath": "lxpapp.userlinktraking",
        "description": "lxpapp.userlinktraking",
        "peekOfCode": "class ErrorMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        response = None\n        try:\n            response = self.get_response(request)\n        except Exception as e:\n            logger = logging.getLogger(__name__)\n            logger.exception('An error occurred during view processing')",
        "detail": "lxpapp.userlinktraking",
        "documentation": {}
    },
    {
        "label": "UserActivityMiddleware",
        "kind": 6,
        "importPath": "lxpapp.userlinktraking",
        "description": "lxpapp.userlinktraking",
        "peekOfCode": "class UserActivityMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        response = None\n        try:\n            response = self.get_response(request)\n        except Exception as e:\n            logger = logging.getLogger(__name__)\n            logger.exception('An error occurred during view processing')",
        "detail": "lxpapp.userlinktraking",
        "documentation": {}
    },
    {
        "label": "CustomLoginView",
        "kind": 6,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "class CustomLoginView(LoginView):\n    template_name = 'loginrelated/userlogin.html'  # Your login template path\n    def get(self, request, *args, **kwargs):\n        if request.user.is_authenticated:\n            return redirect('indexpage')  # Replace 'indexpage' with your indexpage URL name\n        return super().get(request, *args, **kwargs)\n@login_required\ndef switch_user_view(request):\n    logout(request)\n    google_auth_url = reverse('social:begin', args=['google-oauth2'])",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "switch_user_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def switch_user_view(request):\n    logout(request)\n    google_auth_url = reverse('social:begin', args=['google-oauth2'])\n    redirect_uri = request.build_absolute_uri(reverse('social:complete', args=['google-oauth2']))\n    authorize_url = reverse('social:begin', args=['google-oauth2'])\n    return redirect('/social-auth/login/google-oauth2/')\ndef signup(request):\n        if request.method==\"POST\":\n            first_name = str(request.POST['first_name']).strip()\n            last_name = str(request.POST['last_name']).strip()",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def signup(request):\n        if request.method==\"POST\":\n            first_name = str(request.POST['first_name']).strip()\n            last_name = str(request.POST['last_name']).strip()\n            import datetime\n            username = first_name.replace(' ','_')+ '_' + last_name.replace(' ','_') + '_' + str( User.objects.all().values_list('id', flat=True).order_by('-id').first())\n            password = request.POST['password']\n            email = request.POST['email']\n            newuser = User.objects.create_user(\n                first_name=first_name, ",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "session_expire_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def session_expire_view(request):\n    A = models.LastUserLogin.objects.all()\n    if A:\n        for x in A:\n            id = x.id\n            logout_time = datetime.now()\n            dur = str( logout_time - login_time).split(\".\")[0]\n            userlog = models.UserLog.objects.create(\n                    user_id = id,\n                    login = login_time,",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def login(request):\n    return render(request, 'loginrelated/userlogin.html')\n@receiver(user_logged_in)\ndef post_login(sender, user, request, **kwargs):\n    if not user.is_staff:\n        pic = UserSocialAuth.objects.only('pic').get(user_id=user.id).pic\n    login_time = datetime.now()\n@receiver(user_logged_out)\ndef post_logout(sender, user, request, **kwargs):\n    logout_time = datetime.now()",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "post_login",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def post_login(sender, user, request, **kwargs):\n    if not user.is_staff:\n        pic = UserSocialAuth.objects.only('pic').get(user_id=user.id).pic\n    login_time = datetime.now()\n@receiver(user_logged_out)\ndef post_logout(sender, user, request, **kwargs):\n    logout_time = datetime.now()\n    dur = str( logout_time - login_time).split(\".\")[0]\n    userlog = models.UserLog.objects.create(\n              user = user,",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "post_logout",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def post_logout(sender, user, request, **kwargs):\n    logout_time = datetime.now()\n    dur = str( logout_time - login_time).split(\".\")[0]\n    userlog = models.UserLog.objects.create(\n              user = user,\n              login = login_time,\n              logout = logout_time,\n              dur = dur\n            )\n    userlog.save()",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "user_change_password_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def user_change_password_view(request):\n    try:    \n        sub = forms.ContactusForm()\n        if request.method == 'POST':\n            u = request.user\n            u.set_password(request.POST['passid'])\n            u.save() # Add this line\n            update_session_auth_hash(request, u)\n            return HttpResponseRedirect('indexpage')  \n        return render(request, 'loginrelated/changepassword.html')",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def home(request):\n    if request.user.is_authenticated:\n        # user = User.objects.raw('SELECT   auth_user.id,  auth_user.password,  auth_user.last_login,  auth_user.is_superuser,  auth_user.username,  auth_user.first_name,  auth_user.email,  auth_user.is_staff,  auth_user.is_active,  auth_user.date_joined,  auth_user.last_name,  social_auth_usersocialauth.provider,  social_auth_usersocialauth.uid,  social_auth_usersocialauth.extra_data,  social_auth_usersocialauth.user_id,  social_auth_usersocialauth.utype,  social_auth_usersocialauth.status,  social_auth_usersocialauth.modified,  social_auth_usersocialauth.pic,  social_auth_usersocialauth.usercode,  social_auth_usersocialauth.created FROM  social_auth_usersocialauth  INNER JOIN auth_user ON (social_auth_usersocialauth.user_id = auth_user.id)')\n        # update_session_auth_hash(request, user)\n        return HttpResponseRedirect(reverse('indexpage'))\n    return render(request,'lxpapp/404page.html')\ndef afterlogin_view(request):\n    user = UserSocialAuth.objects.all().filter(user_id = request.user.id)\n    if not user:\n        request.session['utype'] = 'admin'",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "afterlogin_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def afterlogin_view(request):\n    user = UserSocialAuth.objects.all().filter(user_id = request.user.id)\n    if not user:\n        request.session['utype'] = 'admin'\n        return redirect('admin-view-user-list')\n    elif user:\n        for xx in user:\n            if not xx.status:\n                return render(request,'loginrelated/wait_for_approval.html')\n            if xx.utype == 1:",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "adminclick_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def adminclick_view(request):\n    if request.user.is_authenticated:\n        return HttpResponseRedirect('indexpage')\n    return HttpResponseRedirect('userlogin')\n@login_required\ndef admin_dashboard_view(request):\n    #try:\n        if str(request.session['utype']) == 'admin':\n            dict={\n            'total_learner':0,",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "admin_dashboard_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def admin_dashboard_view(request):\n    #try:\n        if str(request.session['utype']) == 'admin':\n            dict={\n            'total_learner':0,\n            'total_trainer':0,\n            'total_exam':0,\n            'total_question':0,\n            }\n            return render(request,'lxpapp/admin_dashboard.html',context=dict)",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "aboutus_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def aboutus_view(request):\n    return render(request,'lxpapp/aboutus.html')\ndef contactus_view(request):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            sub = forms.ContactusForm()\n            if request.method == 'POST':\n                sub = forms.ContactusForm(request.POST)\n                if sub.is_valid():\n                    email = sub.cleaned_data['Email']",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "contactus_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def contactus_view(request):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            sub = forms.ContactusForm()\n            if request.method == 'POST':\n                sub = forms.ContactusForm(request.POST)\n                if sub.is_valid():\n                    email = sub.cleaned_data['Email']\n                    name=sub.cleaned_data['Name']\n                    message = sub.cleaned_data['Message']",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "getUserTable",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def getUserTable(request):\n    users = UserSocialAuth.objects.raw('SELECT   SOCIAL_AUTH_USERSOCIALAUTH.ID,  SOCIAL_AUTH_USERSOCIALAUTH.USER_ID,  AUTH_USER.FIRST_NAME,  AUTH_USER.LAST_NAME,  LXPAPP_LEARNERDETAILS.MOBILE FROM  SOCIAL_AUTH_USERSOCIALAUTH  LEFT OUTER JOIN AUTH_USER ON (SOCIAL_AUTH_USERSOCIALAUTH.USER_ID = AUTH_USER.ID)  LEFT OUTER JOIN LXPAPP_LEARNERDETAILS ON (AUTH_USER.ID = LXPAPP_LEARNERDETAILS.LEARNER_ID) ORDER BY  AUTH_USER.FIRST_NAME,  AUTH_USER.LAST_NAME')\n    return users\n@login_required\ndef getUserTableWithAdmin(request):\n    users = UserSocialAuth.objects.raw('SELECT   SOCIAL_AUTH_USERSOCIALAUTH.ID,  SOCIAL_AUTH_USERSOCIALAUTH.USER_ID,  AUTH_USER.FIRST_NAME,  AUTH_USER.LAST_NAME,  LXPAPP_LEARNERDETAILS.MOBILE FROM  SOCIAL_AUTH_USERSOCIALAUTH  LEFT OUTER JOIN AUTH_USER ON (SOCIAL_AUTH_USERSOCIALAUTH.USER_ID = AUTH_USER.ID)  LEFT OUTER JOIN LXPAPP_LEARNERDETAILS ON (AUTH_USER.ID = LXPAPP_LEARNERDETAILS.LEARNER_ID) ORDER BY  AUTH_USER.FIRST_NAME,  AUTH_USER.LAST_NAME')\n    return users\n@login_required\ndef admin_view_user_list_view(request):\n    try:    ",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "getUserTableWithAdmin",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def getUserTableWithAdmin(request):\n    users = UserSocialAuth.objects.raw('SELECT   SOCIAL_AUTH_USERSOCIALAUTH.ID,  SOCIAL_AUTH_USERSOCIALAUTH.USER_ID,  AUTH_USER.FIRST_NAME,  AUTH_USER.LAST_NAME,  LXPAPP_LEARNERDETAILS.MOBILE FROM  SOCIAL_AUTH_USERSOCIALAUTH  LEFT OUTER JOIN AUTH_USER ON (SOCIAL_AUTH_USERSOCIALAUTH.USER_ID = AUTH_USER.ID)  LEFT OUTER JOIN LXPAPP_LEARNERDETAILS ON (AUTH_USER.ID = LXPAPP_LEARNERDETAILS.LEARNER_ID) ORDER BY  AUTH_USER.FIRST_NAME,  AUTH_USER.LAST_NAME')\n    return users\n@login_required\ndef admin_view_user_list_view(request):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            users = getUserTable(request)\n            return render(request,'lxpapp/users/admin_view_user_list.html',{'users':users})\n    except:",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "admin_view_user_list_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def admin_view_user_list_view(request):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            users = getUserTable(request)\n            return render(request,'lxpapp/users/admin_view_user_list.html',{'users':users})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef admin_view_user_grid_view(request):\n    try:    ",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "admin_view_user_grid_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def admin_view_user_grid_view(request):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            users = getUserTable(request)\n            return render(request,'lxpapp/users/admin_view_user_grid.html',{'users':users})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef admin_view_user_log_details_view(request,user_id):\n    try:    ",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "admin_view_user_log_details_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def admin_view_user_log_details_view(request,user_id):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            users = models.UserLog.objects.all().filter(user_id = user_id)\n            return render(request,'lxpapp/users/admin_view_user_log_details.html',{'users':users})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef admin_view_user_activity_details_view(request,user_id):\n    #try:    ",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "admin_view_user_activity_details_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def admin_view_user_activity_details_view(request,user_id):\n    #try:    \n        if str(request.session['utype']) == 'admin':\n            users = models.UserActivity.objects.all().filter(user_id = user_id)\n            return render(request,'lxpapp/users/admin_view_user_activity_details.html',{'users':users})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef update_user_view(request,userfirstname,userlastname,userid,pk):\n    try:    ",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "update_user_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def update_user_view(request,userfirstname,userlastname,userid,pk):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            if request.method == 'POST':\n                course = request.POST.getlist('courses[]')\n                active = request.POST.get('active')\n                usertype = request.POST.getlist('utype[]')\n                users = UserSocialAuth.objects.get(id=pk)\n                if active:\n                    users.status = True",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "active_user_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def active_user_view(request,userid,pk):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            cursor = connection.cursor()\n            cursor.execute(\"UPDATE social_auth_usersocialauth SET status = 1, utype = CASE WHEN utype = 0 THEN 2 ELSE utype END WHERE id = \" + str(pk))\n            users = models.User.objects.raw(\"SELECT * FROM social_auth_usersocialauth where user_id = \" + str(pk))\n            isfirstlogin =models.IsFirstLogIn.objects.all().filter(user_id = userid)\n            if not isfirstlogin:\n                isfirstlogin =models.IsFirstLogIn.objects.create(user_id = userid)\n                isfirstlogin.save()",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "admin_user_reset_password_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def admin_user_reset_password_view(request,pk):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            u = request.user\n            usertochange = models.User.objects.all().filter(id = pk)\n            usertochange.set_password('Nubeera@123')\n            usertochange.save() # Add this line\n            update_session_auth_hash(request, u)\n            users = getUserTable(request)\n            return HttpResponseRedirect('/admin-view-user-list',{'users':users})",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "inactive_user_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def inactive_user_view(request,pk):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            cursor = connection.cursor()\n            cursor.execute(\"UPDATE social_auth_usersocialauth SET status = 0 WHERE id = \" + str(pk))\n            users = models.User.objects.raw(\"SELECT * FROM social_auth_usersocialauth where user_id = \" + str(request.user.id))\n            return HttpResponseRedirect('/admin-view-user-list',{'users':users})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "delete_user_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def delete_user_view(request,userid,pk):\n    try:    \n        if str(request.session['utype']) == 'admin':\n            # cursor = connection.cursor()\n            # cursor.execute(\"DELETE FROM lxpapp_BatchTrainer WHERE trainer_id = \" + str(pk))\n            # cursor.execute(\"DELETE FROM lxpapp_UserPics WHERE user_id = \" + str(userid))\n            # cursor.execute(\"DELETE FROM lxpapp_UserCourse WHERE user_id = \" + str(userid))\n            # cursor.execute(\"DELETE FROM lxpapp_LearnerDetails WHERE learner_id = \" + str(userid))\n            # cursor.execute(\"DELETE FROM lxpapp_IsFirstLogIn WHERE user_id = \" + str(userid))\n            # cursor.execute(\"DELETE FROM lxpapp_McqResult WHERE learner_id = \" + str(userid))",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "user_profile_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def user_profile_view(request):\n    userdetails = User.objects.prefetch_related(\n                        'social_auth',  \n                        'userprofile_set'   \n                    ).all().filter(id = request.user.id).first()\n    base_template = 'base.html'  # Default base template\n    if userdetails:\n        if userdetails.social_auth.first().utype == 1:\n            base_template = 'trainer/trainerbase.html'\n        elif userdetails.social_auth.first().utype == 3:",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "user_profile_update_view",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def user_profile_update_view(request):\n    if request.method == 'POST':\n        userdetails = models.UserProfile.objects.all().filter(user_id = request.user.id).first()\n        if not userdetails:\n            userdetails = models.UserProfile.objects.create(user_id=request.user.id)\n        userdetails.regdate = request.POST['regdate']\n        userdetails.contactno = request.POST['contactno']\n        userdetails.skills = request.POST['skills']\n        userdetails.bio = request.POST['bio']\n        userdetails.save()",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "add_emails_to_video",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def add_emails_to_video(request):\n    # Get the video ID and email addresses from the form data\n    # video_id = request.POST.get('video_id')\n    # emails = request.POST.get('emails')\n    video_id = \"OgZSIZiY5Zk\"\n    emails = [\"info@nubeera.com\"]\n    import os\n    import google_auth_oauthlib.flow\n    scopes = [\"https://www.googleapis.com/auth/youtube.force-ssl\"]\n    # Authenticate with the YouTube API using the API key",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "upload_folder",
        "kind": 2,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "def upload_folder(request):\n    if request.method == 'POST':\n        # Get the uploaded folder from the form data\n        uploaded_folder = request.FILES['folder']\n        print('Temporary file path:', uploaded_folder.temporary_file_path())\n        # Upload the folder to S3\n        s3 = boto3.client(\n            \"s3\",\n            aws_access_key_id='AKIATZQFG2PZIUPD23GA',\n            aws_secret_access_key='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'",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "login_time",
        "kind": 5,
        "importPath": "lxpapp.views",
        "description": "lxpapp.views",
        "peekOfCode": "login_time = datetime.now()\nlogout_time  = datetime.now()\nfrom django.http import HttpResponse\nfrom django.contrib.auth import logout\nfrom django.urls import reverse\nfrom lxpapp.models import UserProfile\nfrom django.contrib import messages\nfrom django.core.files.storage import default_storage\nfrom django.contrib.auth.views import LoginView\nfrom django.db.models import Exists, OuterRef,Case, When, Value, IntegerField,F, Value, Q, Sum, Max",
        "detail": "lxpapp.views",
        "documentation": {}
    },
    {
        "label": "mentorConfig",
        "kind": 6,
        "importPath": "mentor.apps",
        "description": "mentor.apps",
        "peekOfCode": "class mentorConfig(AppConfig):\n    name = 'mentor'",
        "detail": "mentor.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "mentor.urls",
        "description": "mentor.urls",
        "peekOfCode": "urlpatterns = [\n    path('mentor-dashboard', views.mentor_dashboard_view,name='mentor-dashboard'),\n    path('mentor-add-material', views.mentor_add_material_view,name='mentor-add-material'),\n    path('mentor-update-material/<int:pk>', views.mentor_update_material_view,name='mentor-update-material'),\n    path('mentor-view-material', views.mentor_view_material_view,name='mentor-view-material'),\n    path('mentor-delete-material/<int:pk>', views.mentor_delete_material_view,name='mentor-delete-material'),\n    path('mentor-show-material/<materialtype>,/<int:pk>', views.mentor_show_material_view,name='mentor-show-material'),\n    path('mentor-material-upload-file', views.mentor_material_upload_file_view,name='mentor-material-upload-file'),\n    path('mentor-material-start-upload-file', views.mentor_material_start_upload_file_view,name='mentor-material-start-upload-file'),\n    path('mentor-upload-material-details-csv', views.mentor_upload_material_details_csv_view,name='mentor-upload-material-details-csv'),",
        "detail": "mentor.urls",
        "documentation": {}
    },
    {
        "label": "mentor_dashboard_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_dashboard_view(request):\n    #try:\n        if str(request.session['utype']) == 'mentor':\n            notification = LXPModel.mentorNotification.objects.all().filter(mentor_id = request.user.id,status = False)\n            mco = LXPModel.Exam.objects.filter(questiontpye='MCQ').count()\n            short = LXPModel.Exam.objects.filter(questiontpye='ShortAnswer').count()\n            mcqques= LXPModel.McqQuestion.objects.all().count()\n            sques= LXPModel.ShortQuestion.objects.all().count()\n            schedulers = LXPModel.Scheduler.objects.annotate(\n                status_sum=Coalesce(Sum('schedulerstatus__status'), Value(0)),",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_add_material_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_add_material_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            if request.method=='POST':\n                materialForm=LXPFORM.MaterialForm(request.POST)\n                subject = request.POST.get('subject')\n                chapter = request.POST.get('chapter')\n                mtype = request.POST.get('mtype')\n                topic = request.POST.get('topic')\n                urlvalue = request.POST.get('urlvalue')",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_update_material_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_update_material_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            materialForm=LXPFORM.MaterialForm(request.POST)\n            if request.method=='POST':\n                subject = request.POST.get('subject')\n                chapter = request.POST.get('chapter')\n                mtype = request.POST.get('mtype')\n                topic = request.POST.get('topic')\n                urlvalue = request.POST.get('urlvalue')",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_view_material_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_view_material_view(request):\n    #try:\n        if str(request.session['utype']) == 'mentor':\n            materials = LXPModel.Material.objects.all()\n            return render(request,'mentor/material/mentor_view_material.html',{'materials':materials})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_delete_material_view(request,pk):\n    try:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_delete_material_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_delete_material_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':  \n            material=LXPModel.Material.objects.get(id=pk)\n            material.delete()\n            materials = LXPModel.Material.objects.all()\n            return render(request,'mentor/material/mentor_view_material.html',{'materials':materials})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_show_material_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_show_material_view(request,materialtype,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            details= LXPModel.Material.objects.all().filter(id=pk)\n            if materialtype == 'HTML':\n                return render(request,'mentor/material/mentor_material_htmlshow.html',{'details':details})\n            if materialtype == 'URL':\n                return render(request,'mentor/material/mentor_material_urlshow.html',{'details':details})\n            if materialtype == 'PDF':\n                return render(request,'mentor/material/mentor_material_pdfshow.html',{'details':details})",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_material_upload_file_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_material_upload_file_view(request):\n    subjects = LXPModel.Playlist.objects.all()\n    context = {'subjects': subjects}\n    return render(request,'mentor/uploadpdf/mentor_material_upload_file.html',context)\nfrom django.conf import settings\nfrom datetime import datetime\nimport boto3, botocore\nALLOWED_EXTENSIONS = set(['pdf'])\ndef allowed_file(name):\n    return \".\" in name and name.split(\".\")[1].lower() in ALLOWED_EXTENSIONS",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "allowed_file",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def allowed_file(name):\n    return \".\" in name and name.split(\".\")[1].lower() in ALLOWED_EXTENSIONS\n# Connect to the s3 service\ns3 = boto3.client(\n    \"s3\",\n    aws_access_key_id='AKIATZQFG2PZIUPD23GA',\n    aws_secret_access_key='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'\n)\n#upload file to s3 w/ acl as public\n@login_required  ",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "upload_material_file_to_s3",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def upload_material_file_to_s3(request,file, bucket_name, acl=\"public-read\"):\n    try:\n        filename = datetime.now().strftime(\"%Y%m%d%H%M%S.pdf\")\n        print(\"intered in function\")\n        s3.upload_fileobj(\n            file,\n            bucket_name,\n            filename,\n            ExtraArgs={\n                \"ACL\": acl,",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_material_start_upload_file_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_material_start_upload_file_view(request):\n    if request.method==\"POST\":\n        file=request.FILES[\"select_file\"]\n        if file == \"\":\n            return \"Please return to previous page and select a file\"\n        if file:\n            output = upload_material_file_to_s3(request, file, settings.AWS_BUCKET_NAME)\n            return output\n        else:\n            return redirect(\"/\")",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_upload_material_details_csv_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_upload_material_details_csv_view(request):\n    if request.method=='POST':\n        if request.POST.get('select_file') == '':\n            messages.info(request, 'Please select CSV file for upload')\n        else:\n            csv_file = request.FILES[\"select_file\"]\n            file_data = csv_file.read().decode(\"utf-8\")\t\t\n            lines = file_data.split(\"\\n\")\n            mat_type =''\n            mat_url =''",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_upload_material_folder_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_upload_material_folder_view(request):\n    return render(request,'mentor/material/mentor_Upload_material_folder.html')\nimport os\nfrom pathlib import Path\ndef upload_folder_to_s3(path, bucket_name):\n    s3 = boto3.client(\n    \"s3\",\n    aws_access_key_id='AKIAVV2TMMSHQ46LTJ6R',\n    aws_secret_access_key='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'\n)",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "upload_folder_to_s3",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def upload_folder_to_s3(path, bucket_name):\n    s3 = boto3.client(\n    \"s3\",\n    aws_access_key_id='AKIAVV2TMMSHQ46LTJ6R',\n    aws_secret_access_key='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'\n)\n    oldsub =''\n    oldchap=''\n    tochk=''\n    subid =0",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_start_upload_material_folder_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_start_upload_material_folder_view(request):\n    if request.method==\"POST\":\n        folder=request.POST[\"select_folder\"]\n        folder = str.replace(folder,'/','\\\\')\n        path ='D:\\\\upload\\\\iLMS'\n        path =folder\n        AWS_BUCKET_NAME='nubeera-study'\n        upload_folder_to_s3(path, AWS_BUCKET_NAME)\n        return  redirect(\"/\")\n@login_required",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_sessionmaterial_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_sessionmaterial_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            return render(request,'mentor/sessionmaterial/mentor_sessionmaterial.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_add_sessionmaterial_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_add_sessionmaterial_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_add_sessionmaterial_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            if request.method=='POST':\n                sessionmaterialForm=LXPFORM.SessionMaterialForm(request.POST)\n                playlist = request.POST.get('playlist')\n                video = request.POST.get('video')\n                mtype = request.POST.get('mtype')\n                urlvalue = request.POST.get('urlvalue')\n                description = request.POST.get('description')",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_update_sessionmaterial_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_update_sessionmaterial_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            sessionmaterialForm=LXPFORM.SessionMaterialForm(request.POST)\n            if request.method=='POST':\n                playlist = request.POST.get('playlist')\n                video = request.POST.get('video')\n                mtype = request.POST.get('mtype')\n                urlvalue = request.POST.get('urlvalue')\n                description = request.POST.get('description')",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_view_sessionmaterial_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_view_sessionmaterial_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            sessionmaterials = LXPModel.SessionMaterial.objects.all()\n            return render(request,'mentor/sessionmaterial/mentor_view_sessionmaterial.html',{'sessionmaterials':sessionmaterials})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_delete_sessionmaterial_view(request,pk):\n    try:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_delete_sessionmaterial_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_delete_sessionmaterial_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':  \n            sessionmaterial=LXPModel.SessionMaterial.objects.get(id=pk)\n            sessionmaterial.delete()\n            sessionmaterials = LXPModel.SessionMaterial.objects.all()\n            return render(request,'mentor/sessionmaterial/mentor_view_sessionmaterial.html',{'sessionmaterials':sessionmaterials})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_show_sessionmaterial_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_show_sessionmaterial_view(request,sessionmaterialtype,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            details= LXPModel.SessionMaterial.objects.all().filter(id=pk)\n            if sessionmaterialtype == 'HTML':\n                return render(request,'mentor/sessionmaterial/mentor_sessionmaterial_htmlshow.html',{'details':details})\n            if sessionmaterialtype == 'URL':\n                return render(request,'mentor/sessionmaterial/mentor_sessionmaterial_urlshow.html',{'details':details})\n            if sessionmaterialtype == 'PDF':\n                return render(request,'mentor/sessionmaterial/mentor_sessionmaterial_pdfshow.html',{'details':details})",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "load_videos",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def load_videos(request):\n    try:\n        playlist_id = request.GET.get('playlist')\n        videos = LXPModel.PlaylistItem.objects.raw('SELECT  lxpapp_video.id as id,lxpapp_video.id as pk, lxpapp_video.name FROM  lxpapp_playlistitem  INNER JOIN lxpapp_video ON (lxpapp_playlistitem.video_id = lxpapp_video.id) WHERE  lxpapp_playlistitem.playlist_id = ' + str(playlist_id) + ' ORDER BY  lxpapp_video.name')\n        context = {'videos': videos}\n        return render(request, 'hr/video_dropdown_list_options.html', context)\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_exam_view(request):",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_exam_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            return render(request,'mentor/exam/mentor_exam.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_add_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_add_exam_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_add_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            form = LXPFORM.ExamForm(request.POST or None)\n            breadcrumblink = []\n            btrnr={}\n            btrnr[\"head\"]='Dashboard'\n            btrnr[\"link\"]='../../../../mentor/mentor-dashboard'\n            breadcrumblink.append(btrnr)\n            btrnr={}",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_update_exam_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_update_exam_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            instance = get_object_or_404(LXPModel.Exam, id=pk)\n            form = LXPFORM.ExamForm(request.POST or None, instance=instance)\n            breadcrumblink = []\n            btrnr={}\n            btrnr[\"head\"]='Dashboard'\n            btrnr[\"link\"]='../../../../mentor/mentor-dashboard'\n            breadcrumblink.append(btrnr)",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_upload_exam_csv_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_upload_exam_csv_view(request):\n    if request.method=='POST':\n        file=request.FILES[\"select_file\"]\n        examtext=request.POST.get('exam_name')\n        batch=request.POST.get('batch')\n        qtype=request.POST.get('examtype')\n        exam = LXPModel.Exam.objects.all().filter(exam_name__iexact = examtext)\n        if exam:\n            messages.info(request, 'Exam Name Already Exist')\n        else:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "upload_csv",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def upload_csv(request):\n\tdata = {}\n\tif \"GET\" == request.method:\n\t\treturn render(request, \"myapp/upload_csv.html\", data)\n    # if not GET, then proceed\n\ttry:\n\t\tcsv_file = request.FILES[\"csv_file\"]\n\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_view_exam_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all())\n            return render(request,'mentor/exam/mentor_view_exam.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')\ndef mentor_view_filter_exam_view(request,type):\n    try:\n        if str(request.session['utype']) == 'mentor':",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_view_filter_exam_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_view_filter_exam_view(request,type):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all(),questiontpye = type)\n            return render(request,'mentor/exam/mentor_view_exam.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_delete_exam_view(request,pk):\n    try:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_delete_exam_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_delete_exam_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':  \n            exam=LXPModel.Exam.objects.get(id=pk)\n            exam.delete()\n            return HttpResponseRedirect('/mentor/mentor-view-exam')\n        exams = LXPModel.Exam.objects.all()\n        return render(request,'mentor/exam/mentor_view_exam.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_mcqquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_mcqquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            return render(request,'mentor/mcqquestion/mentor_mcqquestion.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_add_mcqquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_add_mcqquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_add_mcqquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            storage = messages.get_messages(request)\n            storage.used = True\n            if request.method=='POST':\n                mcqquestionForm=LXPFORM.McqQuestionForm(request.POST)\n                if mcqquestionForm.is_valid(): \n                    questiontext = mcqquestionForm.cleaned_data[\"question\"]\n                    mcqquestion = LXPModel.McqQuestion.objects.all().filter(question__iexact = questiontext)",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_update_mcqquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_update_mcqquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            mcqquestion = LXPModel.McqQuestion.objects.get(id=pk)\n            mcqquestionForm=LXPFORM.McqQuestionForm(request.POST,instance=mcqquestion)\n            if request.method=='POST':\n                if mcqquestionForm.is_valid(): \n                    mcqquestiontext = mcqquestionForm.cleaned_data[\"mcqquestion_name\"]\n                    mcqquestion = LXPModel.McqQuestion.objects.all().filter(mcqquestion_name__iexact = mcqquestiontext).exclude(id=pk)\n                    if mcqquestion:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_view_mcqquestion_exams_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_view_mcqquestion_exams_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            exams = LXPModel.Exam.objects.all().filter(questiontpye='MCQ')\n            return render(request,'mentor/mcqquestion/mentor_view_mcqquestion_exams.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_view_mcqquestion_view(request,examid):\n    try:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_view_mcqquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_view_mcqquestion_view(request,examid):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            mcqquestions = LXPModel.McqQuestion.objects.all().filter(exam_id__in = LXPModel.Exam.objects.all().filter(id=examid))\n            return render(request,'mentor/mcqquestion/mentor_view_mcqquestion.html',{'mcqquestions':mcqquestions})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_delete_mcqquestion_view(request,pk):\n    try:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_delete_mcqquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_delete_mcqquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':  \n            mcqquestion=LXPModel.McqQuestion.objects.get(id=pk)\n            mcqquestion.delete()\n            return HttpResponseRedirect('/mentor/mentor-view-mcqquestion')\n        mcqquestions = LXPModel.McqQuestion.objects.all()\n        return render(request,'mentor/mcqquestion/mentor_view_mcqquestion.html',{'mcqquestions':mcqquestions})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_shortquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_shortquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            return render(request,'mentor/shortquestion/mentor_shortquestion.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_add_shortquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_add_shortquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_add_shortquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            if request.method=='POST':\n                shortquestionForm=LXPFORM.ShortQuestionForm(request.POST)\n                if shortquestionForm.is_valid(): \n                    questiontext = shortquestionForm.cleaned_data[\"question\"]\n                    shortquestion = LXPModel.ShortQuestion.objects.all().filter(question__iexact = questiontext)\n                    if shortquestion:\n                        messages.info(request, 'Short Question Already Exist')",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_update_shortquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_update_shortquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            shortquestion = LXPModel.ShortQuestion.objects.get(id=pk)\n            shortquestionForm=LXPFORM.ShortQuestionForm(request.POST,instance=shortquestion)\n            if request.method=='POST':\n                if shortquestionForm.is_valid(): \n                    shortquestiontext = shortquestionForm.cleaned_data[\"question\"]\n                    shortquestion = LXPModel.ShortQuestion.objects.all().filter(question__iexact = shortquestiontext).exclude(id=pk)\n                    if shortquestion:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_view_shortquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_view_shortquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            shortquestions = LXPModel.ShortQuestion.objects.all().filter(exam_id__in = LXPModel.Exam.objects.all())\n            return render(request,'mentor/shortquestion/mentor_view_shortquestion.html',{'shortquestions':shortquestions})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_delete_shortquestion_view(request,pk):\n    try:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_delete_shortquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_delete_shortquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':  \n            shortquestion=LXPModel.ShortQuestion.objects.get(id=pk)\n            shortquestion.delete()\n            return HttpResponseRedirect('/mentor/mentor-view-shortquestion')\n        shortquestions = LXPModel.ShortQuestion.objects.all()\n        return render(request,'mentor/shortquestion/mentor_view_shortquestion.html',{'shortquestions':shortquestions})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_pending_short_exam_result_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_pending_short_exam_result_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            pending = LXPModel.ShortResult.objects.all().filter( learner_id__in = User.objects.all(),exam_id__in = LXPModel.Exam.objects.all(),status = False)\n            return render(request,'mentor/shortexam/mentor_pending_short_exam_reuslt.html',{'pending':pending})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_update_short_question_result_view(request,pk):\n    try:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_update_short_question_result_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_update_short_question_result_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            resultdetails = LXPModel.ShortResultDetails.objects.all().filter( question_id__in = LXPModel.ShortQuestion.objects.all(),shortresult_id = pk)\n            return render(request,'mentor/shortexam/mentor_update_short_question_result.html',{'resultdetails':resultdetails})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_save_short_question_result_view(request,pk):\n    try:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_save_short_question_result_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_save_short_question_result_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            if request.method==\"POST\":\n                feedback=request.POST['newfeedback']\n                marks=request.POST['newmarks']\n                rid=request.POST['newid']\n                qid=request.POST['newqid']\n                answer=request.POST['newanswer']\n                mainid=request.POST['newmainid']",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_ytexamquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_ytexamquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            return render(request,'mentor/ytexamquestion/mentor_ytexamquestion.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_add_ytexamquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_add_ytexamquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_add_ytexamquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            if request.method=='POST':\n                ytexamquestionForm=LXPFORM.YTExamQuestionForm(request.POST)\n                if ytexamquestionForm.is_valid(): \n                    questiontext = ytexamquestionForm.cleaned_data[\"question\"]\n                    ytexamquestion = LXPModel.YTExamQuestion.objects.all().filter(question__iexact = questiontext)\n                    if ytexamquestion:\n                        messages.info(request, 'Mcq Question Name Already Exist')",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_update_ytexamquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_update_ytexamquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            ytexamquestion = LXPModel.YTExamQuestion.objects.get(id=pk)\n            ytexamquestionForm=LXPFORM.YTExamQuestionForm(request.POST,instance=ytexamquestion)\n            if request.method=='POST':\n                if ytexamquestionForm.is_valid(): \n                    ytexamquestiontext = ytexamquestionForm.cleaned_data[\"ytexamquestion_name\"]\n                    ytexamquestion = LXPModel.YTExamQuestion.objects.all().filter(ytexamquestion_name__iexact = ytexamquestiontext).exclude(id=pk)\n                    if ytexamquestion:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_view_ytexamquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_view_ytexamquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            ytexamquestions = LXPModel.YTExamQuestion.objects.all().filter(playlist_id__in = LXPModel.Playlist.objects.all())\n            return render(request,'mentor/ytexamquestion/mentor_view_ytexamquestion.html',{'ytexamquestions':ytexamquestions})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_delete_ytexamquestion_view(request,pk):\n    try:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_delete_ytexamquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_delete_ytexamquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':  \n            ytexamquestion=LXPModel.YTExamQuestion.objects.get(id=pk)\n            ytexamquestion.delete()\n            return HttpResponseRedirect('/mentor/mentor-view-ytexamquestion')\n        ytexamquestions = LXPModel.YTExamQuestion.objects.all()\n        return render(request,'mentor/ytexamquestion/mentor_view_ytexamquestion.html',{'ytexamquestions':ytexamquestions})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_view_learner_video_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_view_learner_video_view(request):\n    #try:\n        if str(request.session['utype']) == 'mentor':\n            learner = UserSocialAuth.objects.raw('SELECT social_auth_usersocialauth.id, social_auth_usersocialauth.user_id, social_auth_usersocialauth.pic, auth_user.first_name, auth_user.last_name, GROUP_CONCAT(DISTINCT lxpapp_playlist.name) AS courseset_name, lxpapp_learnerdetails.mobile FROM social_auth_usersocialauth LEFT OUTER JOIN auth_user ON (social_auth_usersocialauth.user_id = auth_user.id) LEFT OUTER JOIN lxpapp_batchlearner ON (auth_user.id = lxpapp_batchlearner.learner_id) LEFT OUTER JOIN lxpapp_batchrecordedvdolist ON (lxpapp_batchlearner.batch_id = lxpapp_batchrecordedvdolist.batch_id) LEFT OUTER JOIN lxpapp_playlist ON (lxpapp_batchrecordedvdolist.playlist_id = lxpapp_playlist.id) LEFT OUTER JOIN lxpapp_learnerdetails ON (auth_user.id = lxpapp_learnerdetails.learner_id) WHERE (social_auth_usersocialauth.utype = 0 OR social_auth_usersocialauth.utype = 2) AND social_auth_usersocialauth.status = 1 GROUP BY social_auth_usersocialauth.id, social_auth_usersocialauth.user_id, auth_user.first_name, auth_user.last_name, lxpapp_learnerdetails.mobile ')\n            return render(request,'mentor/learnervideo/mentor_view_learner_video.html',{'learner':learner})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_learner_video_Course_view(request,user_id,userfirstname,userlastname):\n#    try:    ",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_learner_video_Course_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_learner_video_Course_view(request,user_id,userfirstname,userlastname):\n#    try:    \n        if str(request.session['utype']) == 'mentor':\n            videos1 = LXPModel.BatchCourseSet.objects.raw('SELECT DISTINCT lxpapp_courseset.id,  lxpapp_courseset.courseset_name,lxpapp_batchcourseset.batch_id FROM  lxpapp_batchcourseset   INNER JOIN lxpapp_courseset ON (lxpapp_batchcourseset.courseset_id = lxpapp_courseset.id)   INNER JOIN lxpapp_batch ON (lxpapp_batchcourseset.batch_id = lxpapp_batch.id)   INNER JOIN lxpapp_batchlearner ON (lxpapp_batchlearner.batch_id = lxpapp_batch.id) WHERE   lxpapp_batchlearner.learner_id = ' + str(user_id))\n            return render(request,'mentor/learnervideo/mentor_learner_video_course.html',{'videos':videos1,'userfirstname':userfirstname,'userlastname':userlastname,'user_id':user_id})\n #   except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_learner_video_Course_subject_view(request,user_id,userfirstname,userlastname):\n#    try:    ",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_learner_video_Course_subject_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_learner_video_Course_subject_view(request,user_id,userfirstname,userlastname):\n#    try:    \n        if str(request.session['utype']) == 'mentor':\n            subject = LXPModel.Playlist.objects.raw('SELECT ID AS id, NAME, VTOTAL, Mtotal, SUM(VWATCHED) AS VWatched,((100*VWATCHED)/VTOTAL) as per, THUMBNAIL_URL FROM (SELECT YYY.ID, YYY.NAME, YYY.THUMBNAIL_URL, ( SELECT COUNT(XX.ID) FROM LXPAPP_PLAYLISTITEM XX WHERE XX.PLAYLIST_ID = YYY.ID ) AS Vtotal, ( SELECT COUNT(zz.ID) FROM LXPAPP_sessionmaterial zz WHERE zz.PLAYLIST_ID = YYY.ID ) AS Mtotal, (SELECT COUNT (LXPAPP_VIDEOWATCHED.ID) AS a FROM LXPAPP_PLAYLISTITEM GHGH LEFT OUTER JOIN LXPAPP_VIDEOWATCHED ON ( GHGH.VIDEO_ID = LXPAPP_VIDEOWATCHED.VIDEO_ID ) WHERE GHGH.PLAYLIST_ID = YYY.ID AND LXPAPP_VIDEOWATCHED.LEARNER_ID = ' + str( user_id) + ') AS VWatched FROM LXPAPP_BATCHLEARNER INNER JOIN LXPAPP_BATCH ON (LXPAPP_BATCHLEARNER.BATCH_ID = LXPAPP_BATCH.ID) INNER JOIN LXPAPP_BATCHRECORDEDVDOLIST ON (LXPAPP_BATCH.ID = LXPAPP_BATCHRECORDEDVDOLIST.BATCH_ID) INNER JOIN LXPAPP_PLAYLIST YYY ON (LXPAPP_BATCHRECORDEDVDOLIST.PLAYLIST_ID = YYY.ID) WHERE LXPAPP_BATCHLEARNER.LEARNER_ID = ' + str(user_id) + ') GROUP BY ID, NAME, VTOTAL ORDER BY NAME')\n            videocount = LXPModel.LearnerPlaylistCount.objects.all().filter(learner_id = user_id)\n            countpresent =False\n            if videocount:\n                countpresent = True\n            per = 0\n            tc = 0",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_learner_video_list_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_learner_video_list_view(request,subject_id,user_id):\n    try:     \n        if str(request.session['utype']) == 'mentor':\n            subjectname = LXPModel.Playlist.objects.only('name').get(id=subject_id).name\n            list = LXPModel.PlaylistItem.objects.raw('SELECT DISTINCT mainvid.id, mainvid.name, IFNULL((SELECT lxpapp_videowatched.video_id FROM lxpapp_videowatched WHERE lxpapp_videowatched.learner_id = ' + str(user_id) + ' AND lxpapp_videowatched.video_id = mainvid.id), 0) AS watched, IFNULL((SELECT lxpapp_videotounlock.video_id FROM lxpapp_videotounlock WHERE lxpapp_videotounlock.learner_id = ' + str(user_id) + ' AND lxpapp_videotounlock.video_id = mainvid.id), 0) AS unlocked FROM lxpapp_video mainvid INNER JOIN lxpapp_playlistitem ON (mainvid.id = lxpapp_playlistitem.video_id) WHERE lxpapp_playlistitem.playlist_id = ' + str (subject_id) + ' AND mainvid.name <> \"Deleted video\"')  \n            return render(request,'mentor/learnervideo/mentor_learner_video_list.html',{'list':list,'subjectname':subjectname,'subject_id':subject_id,'user_id':user_id})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_learner_approve_video(request,pk,studid):",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_learner_approve_video",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_learner_approve_video(request,pk,studid):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            unlock = LXPModel.VideoToUnlock.objects.create(learner_id=studid,video_id=pk)\n            unlock.save()\n            return HttpResponseRedirect(request.META.get('HTTP_REFERER', '/'))\n    except:\n        return render(request,'lxpapp/404page.html') \n@login_required\ndef mentor_learner_approveall_video(request,userid,subject_id):",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_learner_approveall_video",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_learner_approveall_video(request,userid,subject_id):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            videos=LXPModel.Playlist.objects.raw('SELECT   lxpapp_video.id FROM  lxpapp_playlistitem  INNER JOIN lxpapp_video ON (lxpapp_playlistitem.video_id = lxpapp_video.id) where lxpapp_playlistitem.playlist_id = ' + str (subject_id))\n            for x in videos:\n                unlock = LXPModel.VideoToUnlock.objects.create(learner_id=userid,video_id=x.id)\n                unlock.save()\n            return HttpResponseRedirect(request.META.get('HTTP_REFERER', '/'))\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_learner_show_video_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_learner_show_video_view(request,subject_id,video_id):\n    try:    \n        if str(request.session['utype']) == 'mentor':\n            subjectname = LXPModel.Playlist.objects.only('name').get(id=subject_id).name\n            Videos=LXPModel.Video.objects.all().filter(id=video_id)\n            topicname =''\n            url=''\n            for x in Videos:\n                topicname =x.name\n                url = \"https://www.youtube.com/embed/\" + x.video_id",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_add_chapterquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_add_chapterquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            storage = messages.get_messages(request)\n            storage.used = True\n            if request.method=='POST':\n                chapterquestionForm=LXPFORM.ChapterQuestionForm(request.POST)\n                if chapterquestionForm.is_valid(): \n                    questiontext = chapterquestionForm.cleaned_data[\"question\"]\n                    chapterquestion = LXPModel.ChapterQuestion.objects.all().filter(question__iexact = questiontext)",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_update_chapterquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_update_chapterquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            chapterquestion = LXPModel.ChapterQuestion.objects.get(id=pk)\n            chapterquestionForm=LXPFORM.ChapterQuestionForm(request.POST,instance=chapterquestion)\n            if request.method=='POST':\n                if chapterquestionForm.is_valid(): \n                    chapterquestiontext = chapterquestionForm.cleaned_data[\"chapterquestion_name\"]\n                    chapterquestion = LXPModel.ChapterQuestion.objects.all().filter(chapterquestion_name__iexact = chapterquestiontext).exclude(id=pk)\n                    if chapterquestion:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_view_chapterquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_view_chapterquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            chapterquestions = LXPModel.ChapterQuestion.objects.raw('SELECT DISTINCT  lxpapp_chapter.id,  lxpapp_subject.subject_name,  lxpapp_chapter.chapter_name FROM  lxpapp_chapterquestion  INNER JOIN lxpapp_chapter ON (lxpapp_chapterquestion.chapter_id = lxpapp_chapter.id)  INNER JOIN lxpapp_subject ON (lxpapp_chapterquestion.subject_id = lxpapp_subject.id)')\n            return render(request,'mentor/chapterquestion/mentor_view_chapterquestion.html',{'chapterquestions':chapterquestions})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_view_chapterquestion_chapter_view(request,chapter_id):\n    try:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_view_chapterquestion_chapter_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_view_chapterquestion_chapter_view(request,chapter_id):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            chapterquestions = LXPModel.ChapterQuestion.objects.all().filter(chapter_id__in = LXPModel.Chapter.objects.all().filter(id=chapter_id))\n            chapter_name = LXPModel.Chapter.objects.only('chapter_name').get(id=chapter_id).chapter_name\n            return render(request,'mentor/chapterquestion/mentor_view_chapterquestion_chapter.html',{'chapterquestions':chapterquestions,'chapter_name':chapter_name})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_delete_chapterquestion_view(request,pk):",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_delete_chapterquestion_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_delete_chapterquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':  \n            chapterquestion=LXPModel.ChapterQuestion.objects.get(id=pk)\n            chapterquestion.delete()\n            return HttpResponseRedirect('/mentor/mentor-view-chapterquestion')\n        chapterquestions = LXPModel.ChapterQuestion.objects.all()\n        return render(request,'mentor/chapterquestion/mentor_view_chapterquestion.html',{'chapterquestions':chapterquestions})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_k8sterminal_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_k8sterminal_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            return render(request,'mentor/labs/k8sterminal/mentor_k8sterminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_add_k8sterminal_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_add_k8sterminal_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_add_k8sterminal_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            if request.method=='POST':\n                k8sterminalForm=LXPFORM.K8STerminalForm(request.POST)\n                learner_id = request.POST['user_name']\n                usagevalue = request.POST.get('usagevalue')\n                password1 = request.POST.get(\"password\")\n                password2 = request.POST.get(\"confirmpassword\")\n                if password1 and password2 and password1 != password2:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_update_k8sterminal_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_update_k8sterminal_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            k8sterminal = LXPModel.K8STerminal.objects.get(id=pk)\n            k8sterminalForm=LXPFORM.K8STerminalForm(request.POST,instance=k8sterminal)\n            if request.method=='POST':\n                if k8sterminalForm.is_valid(): \n                    k8sterminaltext = k8sterminalForm.cleaned_data[\"k8sterminal_name\"]\n                    chaptertext = k8sterminalForm.cleaned_data[\"chapterID\"]\n                    subjecttext = k8sterminalForm.cleaned_data[\"subjectID\"]",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_view_k8sterminal_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_view_k8sterminal_view(request):\n    #try:\n        if str(request.session['utype']) == 'mentor':\n            k8sterminals = LXPModel.K8STerminal.objects.all().filter(learner_id__in = User.objects.all().order_by('first_name').filter(id__in=UserSocialAuth.objects.all()))\n            return render(request,'mentor/labs/k8sterminal/mentor_view_k8sterminal.html',{'k8sterminals':k8sterminals})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_delete_k8sterminal_view(request,pk):\n    try:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_delete_k8sterminal_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_delete_k8sterminal_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'mentor':  \n            k8sterminal=LXPModel.K8STerminal.objects.get(id=pk)\n            k8sterminal.delete()\n            return HttpResponseRedirect('/mentor/mentor-view-k8sterminal')\n        k8sterminals = LXPModel.K8STerminal.objects.all()\n        return render(request,'mentor/labs/k8sterminal/mentor_view_k8sterminal.html',{'k8sterminals':k8sterminals})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_python_terminal_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_python_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':  \n            return render(request,'mentor/labs/python/mentor_python_terminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_python_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':  ",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_python_terminal_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_python_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':  \n            return render(request,'mentor/labs/python/mentor_python_terminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_linux_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':  ",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_linux_terminal_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_linux_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':  \n            return render(request,'mentor/labs/linux/mentor_linux_terminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_cloudshell_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':  ",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_cloudshell_terminal_view",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_cloudshell_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':  \n            return render(request,'mentor/labs/cloudshell/mentor_cloudshell_terminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef mentor_scheduler_calender(request):\n    schedulers = LXPModel.Scheduler.objects.annotate(\n        status_sum=Coalesce(Sum('schedulerstatus__status'), Value(0)),",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_scheduler_calender",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_scheduler_calender(request):\n    schedulers = LXPModel.Scheduler.objects.annotate(\n        status_sum=Coalesce(Sum('schedulerstatus__status'), Value(0)),\n        completion_date=Case(\n            When(status_sum__gte=100, then=Max('schedulerstatus__date')),\n            default=Value(None),\n        )\n    ).filter(mentor_id = request.user.id)\n    return render(request, 'mentor/calender/mentor_calender.html', {'schedulers': schedulers})\n@login_required",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_calender",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_calender(request):\n    # Get schedulers for the logged-in mentor and use Coalesce to replace None with 0 for status_sum\n    schedulers = LXPModel.Scheduler.objects.filter(\n        mentor_id=request.user.id\n    ).annotate(\n        status_sum=Coalesce(Sum('schedulerstatus__status'), Value(0))\n    )\n    return render(request, 'mentor/scheduler/mentor_calender.html', {'schedulers': schedulers})\n# Display list of schedulerstatus\n@login_required",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_schedulerstatus_list",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_schedulerstatus_list(request):\n    if str(request.session['utype']) == 'mentor':\n        schedulerstatus = LXPModel.SchedulerStatus.objects.all()\n        return render(request, 'mentor/schedulerstatus/mentor_schedulerstatus_list.html', {'schedulerstatus': schedulerstatus})\n    else:\n        return render(request,'loginrelated/diffrentuser.html')\n# Create a new schedulerstatus\n@login_required\ndef schedulerstatus_create(request):\n    if str(request.session['utype']) == 'mentor':",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "schedulerstatus_create",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def schedulerstatus_create(request):\n    if str(request.session['utype']) == 'mentor':\n        if request.method == 'POST':\n            scheduler = request.POST.get('scheduler')\n            status = request.POST.get('status')\n            tdate_str = request.POST.get('tdate')\n            status_sum = LXPModel.SchedulerStatus.objects.filter(scheduler_id = scheduler).aggregate(Sum('status'))['status__sum']\n            value = status\n            if status_sum:\n                if (float(status) < float(status_sum)) :",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "get_scheduler_status_sum",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def get_scheduler_status_sum(request):\n    # Check if the request is AJAX using the appropriate header\n    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n        scheduler_id = request.GET.get(\"scheduler_id\")\n        # Get the sum of 'status' values for the given scheduler\n        status_sum = LXPModel.SchedulerStatus.objects.filter(scheduler_id=scheduler_id).aggregate(Sum('status'))['status__sum']\n        # If no statuses exist, set sum to 0\n        if status_sum is None:\n            status_sum = 0\n        # Log the status_sum for debugging (you can remove this in production)",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "schedulerstatus_delete",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def schedulerstatus_delete(request, id):\n    if str(request.session['utype']) == 'mentor':\n        schedulerstatus = get_object_or_404(LXPModel.SchedulerStatus, id=id)\n        # Now delete the schedulerstatus instance\n        schedulerstatus.delete()\n        return redirect('mentor-schedulerstatus-list')\n    else:\n        return render(request,'loginrelated/diffrentuser.html')\nimport json\n@login_required",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "mentor_schedulerstatus_mark_done",
        "kind": 2,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "def mentor_schedulerstatus_mark_done(request):\n    if request.method == 'POST':\n        try:\n            data = json.loads(request.body)\n            status_id = int(data.get('id'))  # Convert ID to integer\n            # Get sum of all status values for this scheduler\n            total_status = LXPModel.SchedulerStatus.objects.filter(scheduler_id=status_id).aggregate(\n                total=Sum('status')\n            )['total'] or 0\n            if total_status < 100:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "ALLOWED_EXTENSIONS",
        "kind": 5,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "ALLOWED_EXTENSIONS = set(['pdf'])\ndef allowed_file(name):\n    return \".\" in name and name.split(\".\")[1].lower() in ALLOWED_EXTENSIONS\n# Connect to the s3 service\ns3 = boto3.client(\n    \"s3\",\n    aws_access_key_id='AKIATZQFG2PZIUPD23GA',\n    aws_secret_access_key='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'\n)\n#upload file to s3 w/ acl as public",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 5,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "s3 = boto3.client(\n    \"s3\",\n    aws_access_key_id='AKIATZQFG2PZIUPD23GA',\n    aws_secret_access_key='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'\n)\n#upload file to s3 w/ acl as public\n@login_required  \ndef upload_material_file_to_s3(request,file, bucket_name, acl=\"public-read\"):\n    try:\n        filename = datetime.now().strftime(\"%Y%m%d%H%M%S.pdf\")",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "\tdata",
        "kind": 5,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "\tdata = {}\n\tif \"GET\" == request.method:\n\t\treturn render(request, \"myapp/upload_csv.html\", data)\n    # if not GET, then proceed\n\ttry:\n\t\tcsv_file = request.FILES[\"csv_file\"]\n\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "\t\tcsv_file",
        "kind": 5,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "\t\tcsv_file = request.FILES[\"csv_file\"]\n\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t\n\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "\t\tfile_data",
        "kind": 5,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t\n\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "\t\tlines",
        "kind": 5,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t\n\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tfields",
        "kind": 5,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef mentor_view_exam_view(request):",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict",
        "kind": 5,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef mentor_view_exam_view(request):\n    try:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict[\"name\"]",
        "kind": 5,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef mentor_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict[\"start_date_time\"]",
        "kind": 5,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef mentor_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all())",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict[\"end_date_time\"]",
        "kind": 5,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef mentor_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all())\n            return render(request,'mentor/exam/mentor_view_exam.html',{'exams':exams})",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict[\"notes\"]",
        "kind": 5,
        "importPath": "mentor.views",
        "description": "mentor.views",
        "peekOfCode": "\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef mentor_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'mentor':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all())\n            return render(request,'mentor/exam/mentor_view_exam.html',{'exams':exams})\n    except:",
        "detail": "mentor.views",
        "documentation": {}
    },
    {
        "label": "AmazonOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.amazon",
        "description": "social_core.backends.amazon",
        "peekOfCode": "class AmazonOAuth2(BaseOAuth2):\n    name = 'amazon'\n    ID_KEY = 'user_id'\n    AUTHORIZATION_URL = 'https://www.amazon.com/ap/oa'\n    ACCESS_TOKEN_URL = 'https://api.amazon.com/auth/o2/token'\n    DEFAULT_SCOPE = ['profile']\n    REDIRECT_STATE = False\n    ACCESS_TOKEN_METHOD = 'POST'\n    SSL_PROTOCOL = ssl.PROTOCOL_TLSv1\n    EXTRA_DATA = [",
        "detail": "social_core.backends.amazon",
        "documentation": {}
    },
    {
        "label": "AngelOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.angel",
        "description": "social_core.backends.angel",
        "peekOfCode": "class AngelOAuth2(BaseOAuth2):\n    name = 'angel'\n    AUTHORIZATION_URL = 'https://angel.co/api/oauth/authorize/'\n    ACCESS_TOKEN_METHOD = 'POST'\n    ACCESS_TOKEN_URL = 'https://angel.co/api/oauth/token/'\n    REDIRECT_STATE = False\n    def get_user_details(self, response):\n        \"\"\"Return user details from Angel account\"\"\"\n        username = response['angellist_url'].split('/')[-1]\n        email = response.get('email', '')",
        "detail": "social_core.backends.angel",
        "documentation": {}
    },
    {
        "label": "AOLOpenId",
        "kind": 6,
        "importPath": "social_core.backends.aol",
        "description": "social_core.backends.aol",
        "peekOfCode": "class AOLOpenId(OpenIdAuth):\n    name = 'aol'\n    URL = 'http://openid.aol.com'",
        "detail": "social_core.backends.aol",
        "documentation": {}
    },
    {
        "label": "AppleIdAuth",
        "kind": 6,
        "importPath": "social_core.backends.apple",
        "description": "social_core.backends.apple",
        "peekOfCode": "class AppleIdAuth(BaseOAuth2):\n    name = 'apple-id'\n    JWK_URL = 'https://appleid.apple.com/auth/keys'\n    AUTHORIZATION_URL = 'https://appleid.apple.com/auth/authorize'\n    ACCESS_TOKEN_URL = 'https://appleid.apple.com/auth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    RESPONSE_MODE = None\n    ID_KEY = 'sub'\n    TOKEN_KEY = 'id_token'\n    STATE_PARAMETER = True",
        "detail": "social_core.backends.apple",
        "documentation": {}
    },
    {
        "label": "AppsfuelOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.appsfuel",
        "description": "social_core.backends.appsfuel",
        "peekOfCode": "class AppsfuelOAuth2(BaseOAuth2):\n    name = 'appsfuel'\n    ID_KEY = 'user_id'\n    AUTHORIZATION_URL = 'http://app.appsfuel.com/content/permission'\n    ACCESS_TOKEN_URL = 'https://api.appsfuel.com/v1/live/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    USER_DETAILS_URL = 'https://api.appsfuel.com/v1/live/user'\n    def get_user_details(self, response):\n        \"\"\"Return user details from Appsfuel account\"\"\"\n        email = response.get('email', '')",
        "detail": "social_core.backends.appsfuel",
        "documentation": {}
    },
    {
        "label": "AppsfuelOAuth2Sandbox",
        "kind": 6,
        "importPath": "social_core.backends.appsfuel",
        "description": "social_core.backends.appsfuel",
        "peekOfCode": "class AppsfuelOAuth2Sandbox(AppsfuelOAuth2):\n    name = 'appsfuel-sandbox'\n    AUTHORIZATION_URL = 'https://api.appsfuel.com/v1/sandbox/choose'\n    ACCESS_TOKEN_URL = 'https://api.appsfuel.com/v1/sandbox/oauth/token'\n    USER_DETAILS_URL = 'https://api.appsfuel.com/v1/sandbox/user'",
        "detail": "social_core.backends.appsfuel",
        "documentation": {}
    },
    {
        "label": "ArcGISOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.arcgis",
        "description": "social_core.backends.arcgis",
        "peekOfCode": "class ArcGISOAuth2(BaseOAuth2):\n    name = 'arcgis'\n    ID_KEY = 'username'\n    AUTHORIZATION_URL = 'https://www.arcgis.com/sharing/rest/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://www.arcgis.com/sharing/rest/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [\n        ('expires_in', 'expires_in'),\n        ('refresh_token', 'refresh_token')\n    ]",
        "detail": "social_core.backends.arcgis",
        "documentation": {}
    },
    {
        "label": "AsanaOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.asana",
        "description": "social_core.backends.asana",
        "peekOfCode": "class AsanaOAuth2(BaseOAuth2):\n    name = 'asana'\n    AUTHORIZATION_URL = 'https://app.asana.com/-/oauth_authorize'\n    ACCESS_TOKEN_METHOD = 'POST'\n    ACCESS_TOKEN_URL = 'https://app.asana.com/-/oauth_token'\n    REFRESH_TOKEN_URL = 'https://app.asana.com/-/oauth_token'\n    REDIRECT_STATE = False\n    USER_DATA_URL = 'https://app.asana.com/api/1.0/users/me'\n    EXTRA_DATA = [\n        ('expires_in', 'expires'),",
        "detail": "social_core.backends.asana",
        "documentation": {}
    },
    {
        "label": "AtlassianOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.atlassian",
        "description": "social_core.backends.atlassian",
        "peekOfCode": "class AtlassianOAuth2(BaseOAuth2):\n    name = 'atlassian'\n    AUTHORIZATION_URL = 'https://auth.atlassian.com/authorize'\n    ACCESS_TOKEN_METHOD = 'POST'\n    ACCESS_TOKEN_URL = 'https://auth.atlassian.com/oauth/token'\n    DEFAULT_SCOPE = ['read:jira-user', 'offline_access']\n    ID_KEY = 'accountId'\n    EXTRA_DATA = [\n        ('resources', 'resources'),\n        ('refresh_token', 'refresh_token'),",
        "detail": "social_core.backends.atlassian",
        "documentation": {}
    },
    {
        "label": "Auth0OAuth2",
        "kind": 6,
        "importPath": "social_core.backends.auth0",
        "description": "social_core.backends.auth0",
        "peekOfCode": "class Auth0OAuth2(BaseOAuth2):\n    \"\"\"Auth0 OAuth authentication backend\"\"\"\n    name = 'auth0'\n    SCOPE_SEPARATOR = ' '\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [\n        ('picture', 'picture')\n    ]\n    def api_path(self, path=''):\n        \"\"\"Build API path for Auth0 domain\"\"\"",
        "detail": "social_core.backends.auth0",
        "documentation": {}
    },
    {
        "label": "AzureADOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.azuread",
        "description": "social_core.backends.azuread",
        "peekOfCode": "class AzureADOAuth2(BaseOAuth2):\n    name = 'azuread-oauth2'\n    SCOPE_SEPARATOR = ' '\n    BASE_URL = 'https://{authority_host}/{tenant_id}'\n    AUTHORIZATION_URL = '{base_url}/oauth2/authorize'\n    ACCESS_TOKEN_URL = '{base_url}/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    DEFAULT_SCOPE = ['openid', 'profile', 'user_impersonation', 'email']\n    EXTRA_DATA = [",
        "detail": "social_core.backends.azuread",
        "documentation": {}
    },
    {
        "label": "AzureADB2COAuth2",
        "kind": 6,
        "importPath": "social_core.backends.azuread_b2c",
        "description": "social_core.backends.azuread_b2c",
        "peekOfCode": "class AzureADB2COAuth2(AzureADOAuth2):\n    name = 'azuread-b2c-oauth2'\n    AUTHORIZATION_URL = '{base_url}/oauth2/v2.0/authorize'\n    OPENID_CONFIGURATION_URL = '{base_url}/v2.0/.well-known/openid-configuration?p={policy}'\n    ACCESS_TOKEN_URL = '{base_url}/oauth2/v2.0/token?p={policy}'\n    JWKS_URL = '{base_url}/discovery/v2.0/keys?p={policy}'\n    DEFAULT_SCOPE = ['openid', 'email']\n    EXTRA_DATA = [\n        ('access_token', 'access_token'),\n        ('id_token', 'id_token'),",
        "detail": "social_core.backends.azuread_b2c",
        "documentation": {}
    },
    {
        "label": "AzureADTenantOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.azuread_tenant",
        "description": "social_core.backends.azuread_tenant",
        "peekOfCode": "class AzureADTenantOAuth2(AzureADOAuth2):\n    name = 'azuread-tenant-oauth2'\n    OPENID_CONFIGURATION_URL = \\\n        '{base_url}/.well-known/openid-configuration'\n    JWKS_URL = '{base_url}/discovery/keys'\n    @property\n    def tenant_id(self):\n        return self.setting('TENANT_ID', 'common')\n    def openid_configuration_url(self):\n        return self.OPENID_CONFIGURATION_URL.format(base_url=self.base_url)",
        "detail": "social_core.backends.azuread_tenant",
        "documentation": {}
    },
    {
        "label": "AzureADV2TenantOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.azuread_tenant",
        "description": "social_core.backends.azuread_tenant",
        "peekOfCode": "class AzureADV2TenantOAuth2(AzureADTenantOAuth2):\n    name = 'azuread-v2-tenant-oauth2'\n    OPENID_CONFIGURATION_URL = '{base_url}/v2.0/.well-known/openid-configuration'\n    AUTHORIZATION_URL = '{base_url}/oauth2/v2.0/authorize'\n    ACCESS_TOKEN_URL = '{base_url}/oauth2/v2.0/token'\n    JWKS_URL = '{base_url}/discovery/v2.0/keys'\n    DEFAULT_SCOPE = ['openid', 'profile', 'offline_access']\n    def get_user_id(self, details, response):\n        \"\"\"Use upn as unique id\"\"\"\n        return response.get('preferred_username')",
        "detail": "social_core.backends.azuread_tenant",
        "documentation": {}
    },
    {
        "label": "BaseAuth",
        "kind": 6,
        "importPath": "social_core.backends.base",
        "description": "social_core.backends.base",
        "peekOfCode": "class BaseAuth:\n    \"\"\"A authentication backend that authenticates the user based on\n    the provider response\"\"\"\n    name = ''  # provider name, it's stored in database\n    supports_inactive_user = False  # Django auth\n    ID_KEY = None\n    EXTRA_DATA = None\n    GET_ALL_EXTRA_DATA = False\n    REQUIRES_EMAIL_VALIDATION = False\n    SEND_USER_AGENT = False",
        "detail": "social_core.backends.base",
        "documentation": {}
    },
    {
        "label": "BattleNetOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.battlenet",
        "description": "social_core.backends.battlenet",
        "peekOfCode": "class BattleNetOAuth2(BaseOAuth2):\n    \"\"\" battle.net Oauth2 backend\"\"\"\n    name = 'battlenet-oauth2'\n    ID_KEY = 'accountId'\n    REDIRECT_STATE = False\n    AUTHORIZATION_URL = 'https://eu.battle.net/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://eu.battle.net/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REVOKE_TOKEN_METHOD = 'GET'\n    DEFAULT_SCOPE = ['wow.profile']",
        "detail": "social_core.backends.battlenet",
        "documentation": {}
    },
    {
        "label": "BeatsOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.beats",
        "description": "social_core.backends.beats",
        "peekOfCode": "class BeatsOAuth2(BaseOAuth2):\n    name = 'beats'\n    SCOPE_SEPARATOR = ' '\n    ID_KEY = 'user_context'\n    AUTHORIZATION_URL = \\\n        'https://partner.api.beatsmusic.com/v1/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://partner.api.beatsmusic.com/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    def get_user_id(self, details, response):",
        "detail": "social_core.backends.beats",
        "documentation": {}
    },
    {
        "label": "BehanceOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.behance",
        "description": "social_core.backends.behance",
        "peekOfCode": "class BehanceOAuth2(BaseOAuth2):\n    \"\"\"Behance OAuth authentication backend\"\"\"\n    name = 'behance'\n    AUTHORIZATION_URL = 'https://www.behance.net/v2/oauth/authenticate'\n    ACCESS_TOKEN_URL = 'https://www.behance.net/v2/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = '|'\n    EXTRA_DATA = [('username', 'username')]\n    REDIRECT_STATE = False\n    def get_user_id(self, details, response):",
        "detail": "social_core.backends.behance",
        "documentation": {}
    },
    {
        "label": "BelgiumEIDOpenId",
        "kind": 6,
        "importPath": "social_core.backends.belgiumeid",
        "description": "social_core.backends.belgiumeid",
        "peekOfCode": "class BelgiumEIDOpenId(OpenIdAuth):\n    \"\"\"Belgium e-ID OpenID authentication backend\"\"\"\n    name = 'belgiumeid'\n    URL = 'https://www.e-contract.be/eid-idp/endpoints/openid/auth'",
        "detail": "social_core.backends.belgiumeid",
        "documentation": {}
    },
    {
        "label": "BitbucketOAuthBase",
        "kind": 6,
        "importPath": "social_core.backends.bitbucket",
        "description": "social_core.backends.bitbucket",
        "peekOfCode": "class BitbucketOAuthBase:\n    ID_KEY = 'uuid'\n    def get_user_id(self, details, response):\n        id_key = self.ID_KEY\n        if self.setting('USERNAME_AS_ID', False):\n            id_key = 'username'\n        return response.get(id_key)\n    def get_user_details(self, response):\n        \"\"\"Return user details from Bitbucket account\"\"\"\n        fullname, first_name, last_name = self.get_user_names(",
        "detail": "social_core.backends.bitbucket",
        "documentation": {}
    },
    {
        "label": "BitbucketOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.bitbucket",
        "description": "social_core.backends.bitbucket",
        "peekOfCode": "class BitbucketOAuth2(BitbucketOAuthBase, BaseOAuth2):\n    name = 'bitbucket-oauth2'\n    SCOPE_SEPARATOR = ' '\n    AUTHORIZATION_URL = 'https://bitbucket.org/site/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://bitbucket.org/site/oauth2/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    EXTRA_DATA = [\n        ('scopes', 'scopes'),\n        ('expires_in', 'expires'),",
        "detail": "social_core.backends.bitbucket",
        "documentation": {}
    },
    {
        "label": "BitbucketOAuth",
        "kind": 6,
        "importPath": "social_core.backends.bitbucket",
        "description": "social_core.backends.bitbucket",
        "peekOfCode": "class BitbucketOAuth(BitbucketOAuthBase, BaseOAuth1):\n    \"\"\"Bitbucket OAuth authentication backend\"\"\"\n    name = 'bitbucket'\n    AUTHORIZATION_URL = 'https://bitbucket.org/api/1.0/oauth/authenticate'\n    REQUEST_TOKEN_URL = 'https://bitbucket.org/api/1.0/oauth/request_token'\n    ACCESS_TOKEN_URL = 'https://bitbucket.org/api/1.0/oauth/access_token'\n    def _get_user(self, access_token=None):\n        return self.get_json('https://api.bitbucket.org/2.0/user',\n                             auth=self.oauth_auth(access_token))\n    def _get_emails(self, access_token=None):",
        "detail": "social_core.backends.bitbucket",
        "documentation": {}
    },
    {
        "label": "BoxOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.box",
        "description": "social_core.backends.box",
        "peekOfCode": "class BoxOAuth2(BaseOAuth2):\n    \"\"\"Box.net OAuth authentication backend\"\"\"\n    name = 'box'\n    AUTHORIZATION_URL = 'https://www.box.com/api/oauth2/authorize'\n    ACCESS_TOKEN_METHOD = 'POST'\n    ACCESS_TOKEN_URL = 'https://www.box.com/api/oauth2/token'\n    REVOKE_TOKEN_URL = 'https://www.box.com/api/oauth2/revoke'\n    SCOPE_SEPARATOR = ','\n    EXTRA_DATA = [\n        ('refresh_token', 'refresh_token', True),",
        "detail": "social_core.backends.box",
        "documentation": {}
    },
    {
        "label": "BungieOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.bungie",
        "description": "social_core.backends.bungie",
        "peekOfCode": "class BungieOAuth2(BaseOAuth2):\n    name = 'bungie'\n    ID_KEY = 'membership_id'\n    AUTHORIZATION_URL = 'https://www.bungie.net/en/oauth/authorize/'\n    ACCESS_TOKEN_URL = 'https://www.bungie.net/platform/app/oauth/token/'\n    REFRESH_TOKEN_URL = 'https://www.bungie.net/platform/app/oauth/token/'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    EXTRA_DATA = [\n        ('refresh_token', 'refresh_token', True),",
        "detail": "social_core.backends.bungie",
        "documentation": {}
    },
    {
        "label": "ChangeTipOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.changetip",
        "description": "social_core.backends.changetip",
        "peekOfCode": "class ChangeTipOAuth2(BaseOAuth2):\n    \"\"\"ChangeTip OAuth authentication backend\n       https://www.changetip.com/api\n    \"\"\"\n    name = 'changetip'\n    AUTHORIZATION_URL = 'https://www.changetip.com/o/authorize/'\n    ACCESS_TOKEN_URL = 'https://www.changetip.com/o/token/'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ' '\n    def get_user_details(self, response):",
        "detail": "social_core.backends.changetip",
        "documentation": {}
    },
    {
        "label": "ChatworkOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.chatwork",
        "description": "social_core.backends.chatwork",
        "peekOfCode": "class ChatworkOAuth2(BaseOAuth2):\n    \"\"\"Chatwork OAuth authentication backend\"\"\"\n    name = 'chatwork'\n    API_URL = 'https://api.chatwork.com/v2'\n    AUTHORIZATION_URL = 'https://www.chatwork.com/packages/oauth2/login.php'\n    ACCESS_TOKEN_URL = 'https://oauth.chatwork.com/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = True\n    DEFAULT_SCOPE = ['users.profile.me:read']\n    ID_KEY = 'account_id'",
        "detail": "social_core.backends.chatwork",
        "documentation": {}
    },
    {
        "label": "CILogonOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.cilogon",
        "description": "social_core.backends.cilogon",
        "peekOfCode": "class CILogonOAuth2(BaseOAuth2):\n    \"\"\"\n    CI Logon Authentication Backend\n    Docs: https://www.cilogon.org/oidc\n    \"\"\"\n    name = 'cilogon-oauth2'\n    AUTHORIZATION_URL = 'https://cilogon.org/authorize'\n    ACCESS_TOKEN_URL = 'https://cilogon.org/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    DEFAULT_SCOPE = ['openid', 'email', 'profile', 'org.cilogon.userinfo']",
        "detail": "social_core.backends.cilogon",
        "documentation": {}
    },
    {
        "label": "ClasslinkOAuth",
        "kind": 6,
        "importPath": "social_core.backends.classlink",
        "description": "social_core.backends.classlink",
        "peekOfCode": "class ClasslinkOAuth(BaseOAuth2):\n    \"\"\"\n    Classlink OAuth authentication backend.\n    Docs: https://developer.classlink.com/docs/oauth2-workflow\n    \"\"\"\n    name = 'classlink'\n    AUTHORIZATION_URL = 'https://launchpad.classlink.com/oauth2/v2/auth'\n    ACCESS_TOKEN_URL = 'https://launchpad.classlink.com/oauth2/v2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    DEFAULT_SCOPE = ['profile']",
        "detail": "social_core.backends.classlink",
        "documentation": {}
    },
    {
        "label": "ClefOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.clef",
        "description": "social_core.backends.clef",
        "peekOfCode": "class ClefOAuth2(BaseOAuth2):\n    \"\"\"Clef OAuth authentication backend\"\"\"\n    name = 'clef'\n    AUTHORIZATION_URL = 'https://clef.io/iframes/qr'\n    ACCESS_TOKEN_URL = 'https://clef.io/api/v1/authorize'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ','\n    def auth_params(self, *args, **kwargs):\n        params = super().auth_params(*args, **kwargs)\n        params['app_id'] = params.pop('client_id')",
        "detail": "social_core.backends.clef",
        "documentation": {}
    },
    {
        "label": "CodingOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.coding",
        "description": "social_core.backends.coding",
        "peekOfCode": "class CodingOAuth2(BaseOAuth2):\n    \"\"\"Coding OAuth authentication backend\"\"\"\n    name = 'coding'\n    API_URL = 'https://coding.net/api/'\n    AUTHORIZATION_URL = 'https://coding.net/oauth_authorize.html'\n    ACCESS_TOKEN_URL = 'https://coding.net/api/oauth/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ','\n    DEFAULT_SCOPE = ['user']\n    REDIRECT_STATE = False",
        "detail": "social_core.backends.coding",
        "documentation": {}
    },
    {
        "label": "CognitoOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.cognito",
        "description": "social_core.backends.cognito",
        "peekOfCode": "class CognitoOAuth2(BaseOAuth2):\n    name = 'cognito'\n    ID_KEY = 'username'\n    DEFAULT_SCOPE = ['openid', 'profile', 'email']\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    def user_pool_domain(self):\n        return self.setting('POOL_DOMAIN')\n    def authorization_url(self):\n        return f'{self.user_pool_domain()}/login'",
        "detail": "social_core.backends.cognito",
        "documentation": {}
    },
    {
        "label": "CoinbaseOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.coinbase",
        "description": "social_core.backends.coinbase",
        "peekOfCode": "class CoinbaseOAuth2(BaseOAuth2):\n    name = 'coinbase'\n    SCOPE_SEPARATOR = '+'\n    DEFAULT_SCOPE = ['user', 'balance']\n    AUTHORIZATION_URL = 'https://www.coinbase.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://api.coinbase.com/oauth/token'\n    REVOKE_TOKEN_URL = 'https://api.coinbase.com/oauth/revoke'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    def get_user_id(self, details, response):",
        "detail": "social_core.backends.coinbase",
        "documentation": {}
    },
    {
        "label": "CourseraOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.coursera",
        "description": "social_core.backends.coursera",
        "peekOfCode": "class CourseraOAuth2(BaseOAuth2):\n    \"\"\"Coursera OAuth2 authentication backend\"\"\"\n    name = 'coursera'\n    ID_KEY = 'username'\n    AUTHORIZATION_URL = 'https://accounts.coursera.org/oauth2/v1/auth'\n    ACCESS_TOKEN_URL = 'https://accounts.coursera.org/oauth2/v1/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    SCOPE_SEPARATOR = ','\n    DEFAULT_SCOPE = ['view_profile']",
        "detail": "social_core.backends.coursera",
        "documentation": {}
    },
    {
        "label": "DailymotionOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.dailymotion",
        "description": "social_core.backends.dailymotion",
        "peekOfCode": "class DailymotionOAuth2(BaseOAuth2):\n    \"\"\"Dailymotion OAuth authentication backend\"\"\"\n    name = 'dailymotion'\n    EXTRA_DATA = [('id', 'id')]\n    ID_KEY = 'username'\n    AUTHORIZATION_URL = 'https://api.dailymotion.com/oauth/authorize'\n    REQUEST_TOKEN_URL = 'https://api.dailymotion.com/oauth/token'\n    ACCESS_TOKEN_URL = 'https://api.dailymotion.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    def get_user_details(self, response):",
        "detail": "social_core.backends.dailymotion",
        "documentation": {}
    },
    {
        "label": "DeezerOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.deezer",
        "description": "social_core.backends.deezer",
        "peekOfCode": "class DeezerOAuth2(BaseOAuth2):\n    \"\"\"Deezer OAuth2 authentication backend\"\"\"\n    name = 'deezer'\n    ID_KEY = 'name'\n    AUTHORIZATION_URL = 'https://connect.deezer.com/oauth/auth.php'\n    ACCESS_TOKEN_URL = 'https://connect.deezer.com/oauth/access_token.php'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ','\n    REDIRECT_STATE = False\n    def auth_complete_params(self, state=None):",
        "detail": "social_core.backends.deezer",
        "documentation": {}
    },
    {
        "label": "DigitalOceanOAuth",
        "kind": 6,
        "importPath": "social_core.backends.digitalocean",
        "description": "social_core.backends.digitalocean",
        "peekOfCode": "class DigitalOceanOAuth(BaseOAuth2):\n    \"\"\"\n    DigitalOcean OAuth authentication backend.\n    Docs: https://developers.digitalocean.com/documentation/oauth/\n    \"\"\"\n    name = 'digitalocean'\n    AUTHORIZATION_URL = 'https://cloud.digitalocean.com/v1/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://cloud.digitalocean.com/v1/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ' '",
        "detail": "social_core.backends.digitalocean",
        "documentation": {}
    },
    {
        "label": "DiscordOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.discord",
        "description": "social_core.backends.discord",
        "peekOfCode": "class DiscordOAuth2(BaseOAuth2):\n    name = 'discord'\n    HOSTNAME = 'discord.com'\n    AUTHORIZATION_URL = 'https://%s/api/oauth2/authorize' % HOSTNAME\n    ACCESS_TOKEN_URL = 'https://%s/api/oauth2/token' % HOSTNAME\n    ACCESS_TOKEN_METHOD = 'POST'\n    REVOKE_TOKEN_URL = 'https://%s/api/oauth2/token/revoke' % HOSTNAME\n    REVOKE_TOKEN_METHOD = 'GET'\n    DEFAULT_SCOPE = ['identify']\n    SCOPE_SEPARATOR = '+'",
        "detail": "social_core.backends.discord",
        "documentation": {}
    },
    {
        "label": "DiscourseAuth",
        "kind": 6,
        "importPath": "social_core.backends.discourse",
        "description": "social_core.backends.discourse",
        "peekOfCode": "class DiscourseAuth(BaseAuth):\n    name = 'discourse'\n    EXTRA_DATA = ['username', 'name', 'avatar_url']\n    def auth_url(self):\n        \"\"\"\n        Get the URL to which we must redirect in order to authenticate the user\n        \"\"\"\n        return_url = self.redirect_uri\n        nonce = self.strategy.random_string(64)\n        self.add_nonce(nonce)",
        "detail": "social_core.backends.discourse",
        "documentation": {}
    },
    {
        "label": "DisqusOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.disqus",
        "description": "social_core.backends.disqus",
        "peekOfCode": "class DisqusOAuth2(BaseOAuth2):\n    name = 'disqus'\n    AUTHORIZATION_URL = 'https://disqus.com/api/oauth/2.0/authorize/'\n    ACCESS_TOKEN_URL = 'https://disqus.com/api/oauth/2.0/access_token/'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    SCOPE_SEPARATOR = ','\n    EXTRA_DATA = [\n        ('avatar', 'avatar'),\n        ('connections', 'connections'),",
        "detail": "social_core.backends.disqus",
        "documentation": {}
    },
    {
        "label": "DockerOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.docker",
        "description": "social_core.backends.docker",
        "peekOfCode": "class DockerOAuth2(BaseOAuth2):\n    name = 'docker'\n    ID_KEY = 'user_id'\n    AUTHORIZATION_URL = 'https://hub.docker.com/api/v1.1/o/authorize/'\n    ACCESS_TOKEN_URL = 'https://hub.docker.com/api/v1.1/o/token/'\n    REFRESH_TOKEN_URL = 'https://hub.docker.com/api/v1.1/o/token/'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    EXTRA_DATA = [\n        ('refresh_token', 'refresh_token', True),",
        "detail": "social_core.backends.docker",
        "documentation": {}
    },
    {
        "label": "DoubanOAuth",
        "kind": 6,
        "importPath": "social_core.backends.douban",
        "description": "social_core.backends.douban",
        "peekOfCode": "class DoubanOAuth(BaseOAuth1):\n    \"\"\"Douban OAuth authentication backend\"\"\"\n    name = 'douban'\n    EXTRA_DATA = [('id', 'id')]\n    AUTHORIZATION_URL = 'http://www.douban.com/service/auth/authorize'\n    REQUEST_TOKEN_URL = 'http://www.douban.com/service/auth/request_token'\n    ACCESS_TOKEN_URL = 'http://www.douban.com/service/auth/access_token'\n    def get_user_id(self, details, response):\n        return response['db:uid']['$t']\n    def get_user_details(self, response):",
        "detail": "social_core.backends.douban",
        "documentation": {}
    },
    {
        "label": "DoubanOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.douban",
        "description": "social_core.backends.douban",
        "peekOfCode": "class DoubanOAuth2(BaseOAuth2):\n    \"\"\"Douban OAuth authentication backend\"\"\"\n    name = 'douban-oauth2'\n    AUTHORIZATION_URL = 'https://www.douban.com/service/auth2/auth'\n    ACCESS_TOKEN_URL = 'https://www.douban.com/service/auth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    EXTRA_DATA = [\n        ('id', 'id'),\n        ('uid', 'username'),",
        "detail": "social_core.backends.douban",
        "documentation": {}
    },
    {
        "label": "DribbbleOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.dribbble",
        "description": "social_core.backends.dribbble",
        "peekOfCode": "class DribbbleOAuth2(BaseOAuth2):\n    \"\"\"Dribbble OAuth authentication backend\"\"\"\n    name = 'dribbble'\n    AUTHORIZATION_URL = 'https://dribbble.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://dribbble.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ','\n    EXTRA_DATA = [\n        ('id', 'id'),\n        ('name', 'name'),",
        "detail": "social_core.backends.dribbble",
        "documentation": {}
    },
    {
        "label": "DripOAuth",
        "kind": 6,
        "importPath": "social_core.backends.drip",
        "description": "social_core.backends.drip",
        "peekOfCode": "class DripOAuth(BaseOAuth2):\n    name = 'drip'\n    AUTHORIZATION_URL = 'https://www.getdrip.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://www.getdrip.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    def get_user_id(self, details, response):\n        return details['email']\n    def get_user_details(self, response):\n        return {'email': response['users'][0]['email'],\n                'fullname': response['users'][0]['name'],",
        "detail": "social_core.backends.drip",
        "documentation": {}
    },
    {
        "label": "DropboxOAuth2V2",
        "kind": 6,
        "importPath": "social_core.backends.dropbox",
        "description": "social_core.backends.dropbox",
        "peekOfCode": "class DropboxOAuth2V2(BaseOAuth2):\n    name = 'dropbox-oauth2'\n    ID_KEY = 'uid'\n    AUTHORIZATION_URL = 'https://www.dropbox.com/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://api.dropboxapi.com/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    def get_user_details(self, response):\n        \"\"\"Return user details from Dropbox account\"\"\"\n        name = response.get('name')",
        "detail": "social_core.backends.dropbox",
        "documentation": {}
    },
    {
        "label": "EchosignOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.echosign",
        "description": "social_core.backends.echosign",
        "peekOfCode": "class EchosignOAuth2(BaseOAuth2):\n    name = 'echosign'\n    REDIRECT_STATE = False\n    ACCESS_TOKEN_METHOD = 'POST'\n    REFRESH_TOKEN_METHOD = 'POST'\n    REVOKE_TOKEN_METHOD = 'POST'\n    AUTHORIZATION_URL = 'https://secure.echosign.com/public/oauth'\n    ACCESS_TOKEN_URL = 'https://secure.echosign.com/oauth/token'\n    REFRESH_TOKEN_URL = 'https://secure.echosign.com/oauth/refresh'\n    REVOKE_TOKEN_URL = 'https://secure.echosign.com/oauth/revoke'",
        "detail": "social_core.backends.echosign",
        "documentation": {}
    },
    {
        "label": "EdmodoOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.edmodo",
        "description": "social_core.backends.edmodo",
        "peekOfCode": "class EdmodoOAuth2(BaseOAuth2):\n    \"\"\"Edmodo OAuth2\"\"\"\n    name = 'edmodo'\n    AUTHORIZATION_URL = 'https://api.edmodo.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://api.edmodo.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    def get_user_details(self, response):\n        \"\"\"Return user details from Edmodo account\"\"\"\n        fullname, first_name, last_name = self.get_user_names(\n            first_name=response.get('first_name'),",
        "detail": "social_core.backends.edmodo",
        "documentation": {}
    },
    {
        "label": "ElixirOpenIdConnect",
        "kind": 6,
        "importPath": "social_core.backends.elixir",
        "description": "social_core.backends.elixir",
        "peekOfCode": "class ElixirOpenIdConnect(OpenIdConnectAuth):\n    name = 'elixir'\n    OIDC_ENDPOINT = 'https://login.elixir-czech.org/oidc'\n    EXTRA_DATA = [\n        ('expires_in', 'expires_in', True),\n        ('refresh_token', 'refresh_token', True),\n        ('id_token', 'id_token', True),\n        ('other_tokens', 'other_tokens', True),\n    ]\n    # In order to get any scopes, you have to register your service with",
        "detail": "social_core.backends.elixir",
        "documentation": {}
    },
    {
        "label": "EmailAuth",
        "kind": 6,
        "importPath": "social_core.backends.email",
        "description": "social_core.backends.email",
        "peekOfCode": "class EmailAuth(LegacyAuth):\n    name = 'email'\n    ID_KEY = 'email'\n    REQUIRES_EMAIL_VALIDATION = True\n    EXTRA_DATA = ['email']",
        "detail": "social_core.backends.email",
        "documentation": {}
    },
    {
        "label": "EventbriteOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.eventbrite",
        "description": "social_core.backends.eventbrite",
        "peekOfCode": "class EventbriteOAuth2(BaseOAuth2):\n    \"\"\"Eventbrite OAuth2 authentication backend\"\"\"\n    name = 'eventbrite'\n    AUTHORIZATION_URL = 'https://www.eventbrite.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://www.eventbrite.com/oauth/token'\n    METADATA_URL = 'https://www.eventbriteapi.com/v3/users/me'\n    ACCESS_TOKEN_METHOD = 'POST'\n    STATE_PARAMETER = False\n    REDIRECT_STATE = False\n    def get_user_details(self, response):",
        "detail": "social_core.backends.eventbrite",
        "documentation": {}
    },
    {
        "label": "EVEOnlineOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.eveonline",
        "description": "social_core.backends.eveonline",
        "peekOfCode": "class EVEOnlineOAuth2(BaseOAuth2):\n    \"\"\"EVE Online OAuth authentication backend\"\"\"\n    name = 'eveonline'\n    BASE_URL = 'https://login.eveonline.com/oauth'\n    AUTHORIZATION_URL = BASE_URL + '/authorize'\n    ACCESS_TOKEN_URL = BASE_URL + '/token'\n    ID_KEY = 'CharacterID'\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [\n        ('CharacterID', 'id'),",
        "detail": "social_core.backends.eveonline",
        "documentation": {}
    },
    {
        "label": "EvernoteOAuth",
        "kind": 6,
        "importPath": "social_core.backends.evernote",
        "description": "social_core.backends.evernote",
        "peekOfCode": "class EvernoteOAuth(BaseOAuth1):\n    \"\"\"\n    Evernote OAuth authentication backend.\n    Possible Values:\n       {'edam_expires': ['1367525289541'],\n        'edam_noteStoreUrl': [\n            'https://sandbox.evernote.com/shard/s1/notestore'\n        ],\n        'edam_shard': ['s1'],\n        'edam_userId': ['123841'],",
        "detail": "social_core.backends.evernote",
        "documentation": {}
    },
    {
        "label": "EvernoteSandboxOAuth",
        "kind": 6,
        "importPath": "social_core.backends.evernote",
        "description": "social_core.backends.evernote",
        "peekOfCode": "class EvernoteSandboxOAuth(EvernoteOAuth):\n    name = 'evernote-sandbox'\n    AUTHORIZATION_URL = 'https://sandbox.evernote.com/OAuth.action'\n    REQUEST_TOKEN_URL = 'https://sandbox.evernote.com/oauth'\n    ACCESS_TOKEN_URL = 'https://sandbox.evernote.com/oauth'",
        "detail": "social_core.backends.evernote",
        "documentation": {}
    },
    {
        "label": "ExactTargetOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.exacttarget",
        "description": "social_core.backends.exacttarget",
        "peekOfCode": "class ExactTargetOAuth2(BaseOAuth2):\n    name = 'exacttarget'\n    def get_user_details(self, response):\n        \"\"\"Use the email address of the user, suffixed by _et\"\"\"\n        user = response.get('token', {})\\\n                       .get('request', {})\\\n                       .get('user', {})\n        if 'email' in user:\n            user['username'] = user['email']\n        return user",
        "detail": "social_core.backends.exacttarget",
        "documentation": {}
    },
    {
        "label": "FacebookOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.facebook",
        "description": "social_core.backends.facebook",
        "peekOfCode": "class FacebookOAuth2(BaseOAuth2):\n    \"\"\"Facebook OAuth2 authentication backend\"\"\"\n    name = 'facebook'\n    REDIRECT_STATE = False\n    RESPONSE_TYPE = None\n    SCOPE_SEPARATOR = ','\n    AUTHORIZATION_URL = 'https://www.facebook.com/v{version}/dialog/oauth'\n    ACCESS_TOKEN_URL = \\\n        'https://graph.facebook.com/v{version}/oauth/access_token'\n    REVOKE_TOKEN_URL = \\",
        "detail": "social_core.backends.facebook",
        "documentation": {}
    },
    {
        "label": "FacebookAppOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.facebook",
        "description": "social_core.backends.facebook",
        "peekOfCode": "class FacebookAppOAuth2(FacebookOAuth2):\n    \"\"\"Facebook Application Authentication support\"\"\"\n    name = 'facebook-app'\n    def uses_redirect(self):\n        return False\n    def auth_complete(self, *args, **kwargs):\n        access_token = self.data.get('access_token')\n        response = {}\n        if 'signed_request' in self.data:\n            key, secret = self.get_key_and_secret()",
        "detail": "social_core.backends.facebook",
        "documentation": {}
    },
    {
        "label": "API_VERSION",
        "kind": 5,
        "importPath": "social_core.backends.facebook",
        "description": "social_core.backends.facebook",
        "peekOfCode": "API_VERSION = 12.0\nclass FacebookOAuth2(BaseOAuth2):\n    \"\"\"Facebook OAuth2 authentication backend\"\"\"\n    name = 'facebook'\n    REDIRECT_STATE = False\n    RESPONSE_TYPE = None\n    SCOPE_SEPARATOR = ','\n    AUTHORIZATION_URL = 'https://www.facebook.com/v{version}/dialog/oauth'\n    ACCESS_TOKEN_URL = \\\n        'https://graph.facebook.com/v{version}/oauth/access_token'",
        "detail": "social_core.backends.facebook",
        "documentation": {}
    },
    {
        "label": "FedoraOpenId",
        "kind": 6,
        "importPath": "social_core.backends.fedora",
        "description": "social_core.backends.fedora",
        "peekOfCode": "class FedoraOpenId(OpenIdAuth):\n    name = 'fedora'\n    URL = 'https://id.fedoraproject.org'\n    USERNAME_KEY = 'nickname'",
        "detail": "social_core.backends.fedora",
        "documentation": {}
    },
    {
        "label": "Fence",
        "kind": 6,
        "importPath": "social_core.backends.fence",
        "description": "social_core.backends.fence",
        "peekOfCode": "class Fence(OpenIdConnectAuth):\n    name = 'fence'\n    OIDC_ENDPOINT = 'https://nci-crdc.datacommons.io'\n    ID_KEY = 'username'\n    ACCESS_TOKEN_METHOD = 'POST'\n    DEFAULT_SCOPE = ['openid', 'user']\n    JWT_DECODE_OPTIONS = {'verify_at_hash': False}\n    def _url(self, path):\n        return urljoin(append_slash(self.OIDC_ENDPOINT), path)\n    def authorization_url(self):",
        "detail": "social_core.backends.fence",
        "documentation": {}
    },
    {
        "label": "FitbitOAuth1",
        "kind": 6,
        "importPath": "social_core.backends.fitbit",
        "description": "social_core.backends.fitbit",
        "peekOfCode": "class FitbitOAuth1(BaseOAuth1):\n    \"\"\"Fitbit OAuth1 authentication backend\"\"\"\n    name = 'fitbit'\n    AUTHORIZATION_URL = 'https://www.fitbit.com/oauth/authorize'\n    REQUEST_TOKEN_URL = 'https://api.fitbit.com/oauth/request_token'\n    ACCESS_TOKEN_URL = 'https://api.fitbit.com/oauth/access_token'\n    ID_KEY = 'encodedId'\n    EXTRA_DATA = [('encodedId', 'id'),\n                  ('displayName', 'username')]\n    def get_user_details(self, response):",
        "detail": "social_core.backends.fitbit",
        "documentation": {}
    },
    {
        "label": "FitbitOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.fitbit",
        "description": "social_core.backends.fitbit",
        "peekOfCode": "class FitbitOAuth2(BaseOAuth2):\n    \"\"\"Fitbit OAuth2 authentication backend\"\"\"\n    name = 'fitbit'\n    AUTHORIZATION_URL = 'https://www.fitbit.com/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://api.fitbit.com/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REFRESH_TOKEN_URL = 'https://api.fitbit.com/oauth2/token'\n    DEFAULT_SCOPE = ['profile']\n    ID_KEY = 'encodedId'\n    REDIRECT_STATE = False",
        "detail": "social_core.backends.fitbit",
        "documentation": {}
    },
    {
        "label": "FiveHundredPxOAuth",
        "kind": 6,
        "importPath": "social_core.backends.five_hundred_px",
        "description": "social_core.backends.five_hundred_px",
        "peekOfCode": "class FiveHundredPxOAuth(BaseOAuth1):\n    \"\"\"500px OAuth authentication backend\"\"\"\n    name = '500px'\n    AUTHORIZATION_URL = 'https://api.500px.com/v1/oauth/authorize'\n    REQUEST_TOKEN_URL = 'https://api.500px.com/v1/oauth/request_token'\n    ACCESS_TOKEN_URL = 'https://api.500px.com/v1/oauth/access_token'\n    def get_user_details(self, user):\n        \"\"\"Return user details from 500px account\"\"\"\n        fullname, first_name, last_name = self.get_user_names(\n            user.get('fullname')",
        "detail": "social_core.backends.five_hundred_px",
        "documentation": {}
    },
    {
        "label": "FlatOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.flat",
        "description": "social_core.backends.flat",
        "peekOfCode": "class FlatOAuth2(BaseOAuth2):\n    \"\"\"Flat OAuth2\"\"\"\n    name = 'flat'\n    DEFAULT_SCOPE = ['account.public_profile']\n    AUTHORIZATION_URL = 'https://flat.io/auth/oauth'\n    ACCESS_TOKEN_URL = 'https://api.flat.io/oauth/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    def get_user_id(self, details, response):\n        return response.get('id')\n    def get_user_details(self, response):",
        "detail": "social_core.backends.flat",
        "documentation": {}
    },
    {
        "label": "FlickrOAuth",
        "kind": 6,
        "importPath": "social_core.backends.flickr",
        "description": "social_core.backends.flickr",
        "peekOfCode": "class FlickrOAuth(BaseOAuth1):\n    \"\"\"Flickr OAuth authentication backend\"\"\"\n    name = 'flickr'\n    AUTHORIZATION_URL = 'https://www.flickr.com/services/oauth/authorize'\n    REQUEST_TOKEN_URL = 'https://www.flickr.com/services/oauth/request_token'\n    ACCESS_TOKEN_URL = 'https://www.flickr.com/services/oauth/access_token'\n    EXTRA_DATA = [\n        ('id', 'id'),\n        ('username', 'username'),\n        ('expires', 'expires')",
        "detail": "social_core.backends.flickr",
        "documentation": {}
    },
    {
        "label": "FoursquareOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.foursquare",
        "description": "social_core.backends.foursquare",
        "peekOfCode": "class FoursquareOAuth2(BaseOAuth2):\n    name = 'foursquare'\n    AUTHORIZATION_URL = 'https://foursquare.com/oauth2/authenticate'\n    ACCESS_TOKEN_URL = 'https://foursquare.com/oauth2/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    API_VERSION = '20140128'\n    def get_user_id(self, details, response):\n        return response['response']['user']['id']\n    def get_user_details(self, response):\n        \"\"\"Return user details from Foursquare account\"\"\"",
        "detail": "social_core.backends.foursquare",
        "documentation": {}
    },
    {
        "label": "GoogleAppEngineAuth",
        "kind": 6,
        "importPath": "social_core.backends.gae",
        "description": "social_core.backends.gae",
        "peekOfCode": "class GoogleAppEngineAuth(BaseAuth):\n    \"\"\"GoogleAppengine authentication backend\"\"\"\n    name = 'google-appengine'\n    def get_user_id(self, details, response):\n        \"\"\"Return current user id.\"\"\"\n        user = users.get_current_user()\n        if user:\n            return user.user_id()\n    def get_user_details(self, response):\n        \"\"\"Return user basic information (id and email only).\"\"\"",
        "detail": "social_core.backends.gae",
        "documentation": {}
    },
    {
        "label": "GiteaOAuth",
        "kind": 6,
        "importPath": "social_core.backends.gitea",
        "description": "social_core.backends.gitea",
        "peekOfCode": "class GiteaOAuth2   (BaseOAuth2):\n    \"\"\"Gitea OAuth authentication backend\"\"\"\n    name = 'gitea'\n    API_URL = 'https://gitea.com'\n    AUTHORIZATION_URL = 'https://gitea.com/login/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://gitea.com/login/oauth/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ','\n    REDIRECT_STATE = False\n    STATE_PARAMETER = True",
        "detail": "social_core.backends.gitea",
        "documentation": {}
    },
    {
        "label": "GithubOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.github",
        "description": "social_core.backends.github",
        "peekOfCode": "class GithubOAuth2(BaseOAuth2):\n    \"\"\"Github OAuth authentication backend\"\"\"\n    name = 'github'\n    API_URL = 'https://api.github.com/'\n    AUTHORIZATION_URL = 'https://github.com/login/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://github.com/login/oauth/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ','\n    REDIRECT_STATE = False\n    STATE_PARAMETER = True",
        "detail": "social_core.backends.github",
        "documentation": {}
    },
    {
        "label": "GithubMemberOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.github",
        "description": "social_core.backends.github",
        "peekOfCode": "class GithubMemberOAuth2(GithubOAuth2):\n    no_member_string = ''\n    def user_data(self, access_token, *args, **kwargs):\n        \"\"\"Loads user data from service\"\"\"\n        user_data = super().user_data(access_token, *args, **kwargs)\n        headers = {'Authorization': f'token {access_token}'}\n        try:\n            self.request(self.member_url(user_data), headers=headers)\n        except HTTPError as err:\n            # if the user is a member of the organization, response code",
        "detail": "social_core.backends.github",
        "documentation": {}
    },
    {
        "label": "GithubOrganizationOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.github",
        "description": "social_core.backends.github",
        "peekOfCode": "class GithubOrganizationOAuth2(GithubMemberOAuth2):\n    \"\"\"Github OAuth2 authentication backend for organizations\"\"\"\n    name = 'github-org'\n    no_member_string = 'User doesn\\'t belong to the organization'\n    def member_url(self, user_data):\n        return urljoin(\n            self.api_url(),\n            'orgs/{org}/members/{username}'.format(\n                org=self.setting('NAME'),\n                username=user_data.get('login')",
        "detail": "social_core.backends.github",
        "documentation": {}
    },
    {
        "label": "GithubTeamOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.github",
        "description": "social_core.backends.github",
        "peekOfCode": "class GithubTeamOAuth2(GithubMemberOAuth2):\n    \"\"\"Github OAuth2 authentication backend for teams\"\"\"\n    name = 'github-team'\n    no_member_string = 'User doesn\\'t belong to the team'\n    def member_url(self, user_data):\n        return urljoin(\n            self.api_url(),\n            'teams/{team_id}/members/{username}'.format(\n                team_id=self.setting('ID'),\n                username=user_data.get('login')",
        "detail": "social_core.backends.github",
        "documentation": {}
    },
    {
        "label": "GithubAppAuth",
        "kind": 6,
        "importPath": "social_core.backends.github",
        "description": "social_core.backends.github",
        "peekOfCode": "class GithubAppAuth(GithubOAuth2):\n    \"\"\"GitHub App OAuth authentication backend\"\"\"\n    name = 'github-app'\n    def validate_state(self):\n        \"\"\"\n        Scenario 1: user clicks an icon/button on your website and initiates\n                    social login. This works exacltly like standard OAuth and we\n                    have `state` and `redirect_uri`.\n        Scenario 2: user starts from http://github.com/apps/your-app and clicks\n                    'Install & Authorize' button! They still get a temporary",
        "detail": "social_core.backends.github",
        "documentation": {}
    },
    {
        "label": "GithubEnterpriseMixin",
        "kind": 6,
        "importPath": "social_core.backends.github_enterprise",
        "description": "social_core.backends.github_enterprise",
        "peekOfCode": "class GithubEnterpriseMixin:\n    def api_url(self):\n        return append_slash(self.setting('API_URL'))\n    def authorization_url(self):\n        return self._url('login/oauth/authorize')\n    def access_token_url(self):\n        return self._url('login/oauth/access_token')\n    def _url(self, path):\n        return urljoin(append_slash(self.setting('URL')), path)\nclass GithubEnterpriseOAuth2(GithubEnterpriseMixin, GithubOAuth2):",
        "detail": "social_core.backends.github_enterprise",
        "documentation": {}
    },
    {
        "label": "GithubEnterpriseOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.github_enterprise",
        "description": "social_core.backends.github_enterprise",
        "peekOfCode": "class GithubEnterpriseOAuth2(GithubEnterpriseMixin, GithubOAuth2):\n    \"\"\"Github Enterprise OAuth authentication backend\"\"\"\n    name = 'github-enterprise'\nclass GithubEnterpriseOrganizationOAuth2(GithubEnterpriseMixin,\n                                         GithubOrganizationOAuth2):\n    \"\"\"Github Enterprise OAuth2 authentication backend for\n    organizations\"\"\"\n    name = 'github-enterprise-org'\n    DEFAULT_SCOPE = ['read:org']\nclass GithubEnterpriseTeamOAuth2(GithubEnterpriseMixin, GithubTeamOAuth2):",
        "detail": "social_core.backends.github_enterprise",
        "documentation": {}
    },
    {
        "label": "GithubEnterpriseOrganizationOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.github_enterprise",
        "description": "social_core.backends.github_enterprise",
        "peekOfCode": "class GithubEnterpriseOrganizationOAuth2(GithubEnterpriseMixin,\n                                         GithubOrganizationOAuth2):\n    \"\"\"Github Enterprise OAuth2 authentication backend for\n    organizations\"\"\"\n    name = 'github-enterprise-org'\n    DEFAULT_SCOPE = ['read:org']\nclass GithubEnterpriseTeamOAuth2(GithubEnterpriseMixin, GithubTeamOAuth2):\n    \"\"\"Github Enterprise OAuth2 authentication backend for teams\"\"\"\n    name = 'github-enterprise-team'\n    DEFAULT_SCOPE = ['read:org']",
        "detail": "social_core.backends.github_enterprise",
        "documentation": {}
    },
    {
        "label": "GithubEnterpriseTeamOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.github_enterprise",
        "description": "social_core.backends.github_enterprise",
        "peekOfCode": "class GithubEnterpriseTeamOAuth2(GithubEnterpriseMixin, GithubTeamOAuth2):\n    \"\"\"Github Enterprise OAuth2 authentication backend for teams\"\"\"\n    name = 'github-enterprise-team'\n    DEFAULT_SCOPE = ['read:org']",
        "detail": "social_core.backends.github_enterprise",
        "documentation": {}
    },
    {
        "label": "GitLabOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.gitlab",
        "description": "social_core.backends.gitlab",
        "peekOfCode": "class GitLabOAuth2(BaseOAuth2):\n    \"\"\"GitLab OAuth authentication backend\"\"\"\n    name = 'gitlab'\n    API_URL = 'https://gitlab.com'\n    AUTHORIZATION_URL = 'https://gitlab.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://gitlab.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    DEFAULT_SCOPE = ['read_user']\n    EXTRA_DATA = [",
        "detail": "social_core.backends.gitlab",
        "documentation": {}
    },
    {
        "label": "GlobusOpenIdConnect",
        "kind": 6,
        "importPath": "social_core.backends.globus",
        "description": "social_core.backends.globus",
        "peekOfCode": "class GlobusOpenIdConnect(OpenIdConnectAuth):\n    name = 'globus'\n    OIDC_ENDPOINT = 'https://auth.globus.org'\n    JWT_ALGORITHMS = ['RS256', 'RS512']\n    EXTRA_DATA = [\n        ('expires_in', 'expires_in', True),\n        ('refresh_token', 'refresh_token', True),\n        ('id_token', 'id_token', True),\n        ('other_tokens', 'other_tokens', True),\n    ]",
        "detail": "social_core.backends.globus",
        "documentation": {}
    },
    {
        "label": "GoClioOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.goclio",
        "description": "social_core.backends.goclio",
        "peekOfCode": "class GoClioOAuth2(BaseOAuth2):\n    name = 'goclio'\n    AUTHORIZATION_URL = 'https://app.goclio.com/oauth/authorize/'\n    ACCESS_TOKEN_METHOD = 'POST'\n    ACCESS_TOKEN_URL = 'https://app.goclio.com/oauth/token/'\n    REDIRECT_STATE = False\n    STATE_PARAMETER = False\n    def get_user_details(self, response):\n        \"\"\"Return user details from GoClio account\"\"\"\n        user = response.get('user', {})",
        "detail": "social_core.backends.goclio",
        "documentation": {}
    },
    {
        "label": "GoClioEuOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.goclioeu",
        "description": "social_core.backends.goclioeu",
        "peekOfCode": "class GoClioEuOAuth2(GoClioOAuth2):\n    name = 'goclioeu'\n    AUTHORIZATION_URL = 'https://app.goclio.eu/oauth/authorize/'\n    ACCESS_TOKEN_URL = 'https://app.goclio.eu/oauth/token/'\n    def user_data(self, access_token, *args, **kwargs):\n        \"\"\"Loads user data from service\"\"\"\n        return self.get_json(\n            'https://app.goclio.eu/api/v2/users/who_am_i',\n            params={'access_token': access_token}\n        )",
        "detail": "social_core.backends.goclioeu",
        "documentation": {}
    },
    {
        "label": "BaseGoogleAuth",
        "kind": 6,
        "importPath": "social_core.backends.google",
        "description": "social_core.backends.google",
        "peekOfCode": "class BaseGoogleAuth:\n    def get_user_id(self, details, response):\n        \"\"\"Use google email as unique id\"\"\"\n        if self.setting('USE_UNIQUE_USER_ID', False):\n            if 'sub' in response:\n                return response['sub']\n            else:\n                return response['id']\n        else:\n            return details['email']",
        "detail": "social_core.backends.google",
        "documentation": {}
    },
    {
        "label": "BaseGoogleOAuth2API",
        "kind": 6,
        "importPath": "social_core.backends.google",
        "description": "social_core.backends.google",
        "peekOfCode": "class BaseGoogleOAuth2API(BaseGoogleAuth):\n    def user_data(self, access_token, *args, **kwargs):\n        \"\"\"Return user data from Google API\"\"\"\n        return self.get_json(\n            'https://www.googleapis.com/oauth2/v3/userinfo',\n            headers={\n                'Authorization': 'Bearer %s' % access_token,\n            },\n        )\n    def revoke_token_params(self, token, uid):",
        "detail": "social_core.backends.google",
        "documentation": {}
    },
    {
        "label": "GoogleOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.google",
        "description": "social_core.backends.google",
        "peekOfCode": "class GoogleOAuth2(BaseGoogleOAuth2API, BaseOAuth2):\n    \"\"\"Google OAuth2 authentication backend\"\"\"\n    name = 'google-oauth2'\n    REDIRECT_STATE = False\n    AUTHORIZATION_URL = 'https://accounts.google.com/o/oauth2/auth'\n    ACCESS_TOKEN_URL = 'https://accounts.google.com/o/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke'\n    REVOKE_TOKEN_METHOD = 'GET'\n    # The order of the default scope is important",
        "detail": "social_core.backends.google",
        "documentation": {}
    },
    {
        "label": "GooglePlusAuth",
        "kind": 6,
        "importPath": "social_core.backends.google",
        "description": "social_core.backends.google",
        "peekOfCode": "class GooglePlusAuth(BaseGoogleOAuth2API, BaseOAuth2):\n    name = 'google-plus'\n    REDIRECT_STATE = False\n    STATE_PARAMETER = False\n    AUTHORIZATION_URL = 'https://accounts.google.com/o/oauth2/auth'\n    ACCESS_TOKEN_URL = 'https://accounts.google.com/o/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke'\n    REVOKE_TOKEN_METHOD = 'GET'\n    DEFAULT_SCOPE = [",
        "detail": "social_core.backends.google",
        "documentation": {}
    },
    {
        "label": "GoogleOAuth",
        "kind": 6,
        "importPath": "social_core.backends.google",
        "description": "social_core.backends.google",
        "peekOfCode": "class GoogleOAuth(BaseGoogleAuth, BaseOAuth1):\n    \"\"\"Google OAuth authorization mechanism\"\"\"\n    name = 'google-oauth'\n    AUTHORIZATION_URL = 'https://www.google.com/accounts/OAuthAuthorizeToken'\n    REQUEST_TOKEN_URL = 'https://www.google.com/accounts/OAuthGetRequestToken'\n    ACCESS_TOKEN_URL = 'https://www.google.com/accounts/OAuthGetAccessToken'\n    DEFAULT_SCOPE = ['https://www.googleapis.com/auth/userinfo#email']\n    def user_data(self, access_token, *args, **kwargs):\n        \"\"\"Return user data from Google API\"\"\"\n        return self.get_querystring(",
        "detail": "social_core.backends.google",
        "documentation": {}
    },
    {
        "label": "GoogleOpenIdConnect",
        "kind": 6,
        "importPath": "social_core.backends.google_openidconnect",
        "description": "social_core.backends.google_openidconnect",
        "peekOfCode": "class GoogleOpenIdConnect(GoogleOAuth2, OpenIdConnectAuth):\n    name = 'google-openidconnect'\n    OIDC_ENDPOINT = 'https://accounts.google.com'\n    # differs from value in discovery document\n    # http://openid.net/specs/openid-connect-core-1_0.html#rfc.section.15.6.2\n    ID_TOKEN_ISSUER = 'accounts.google.com'\n    def user_data(self, access_token, *args, **kwargs):\n        \"\"\"Return user data from Google API\"\"\"\n        return self.get_json(\n            'https://openidconnect.googleapis.com/v1/userinfo',",
        "detail": "social_core.backends.google_openidconnect",
        "documentation": {}
    },
    {
        "label": "GrafanaOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.grafana",
        "description": "social_core.backends.grafana",
        "peekOfCode": "class GrafanaOAuth2(BaseOAuth2):\n    \"\"\"Grafana OAuth authentication backend\"\"\"\n    name = 'grafana'\n    AUTHORIZATION_URL = 'https://grafana.com/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://grafana.com/api/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    DEFAULT_SCOPE = ['profile', 'email']\n    SCOPE_SEPARATOR = ','\n    USER_DETAILS_URL = 'https://grafana.com/api/oauth2/user'\n    def get_user_details(self, response):",
        "detail": "social_core.backends.grafana",
        "documentation": {}
    },
    {
        "label": "HubSpotOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.hubspot",
        "description": "social_core.backends.hubspot",
        "peekOfCode": "class HubSpotOAuth2(BaseOAuth2):\n    \"\"\"HubSpot OAuth2 authentication backend\"\"\"\n    name = 'hubspot'\n    AUTHORIZATION_URL = 'https://app.hubspot.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://api.hubapi.com/oauth/v1/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    USER_DATA_URL = 'https://api.hubapi.com/oauth/v1/access-tokens/'\n    DEFAULT_SCOPE = ['oauth']\n    EXTRA_DATA = [\n        ('hub_domain', 'hub_domain'),",
        "detail": "social_core.backends.hubspot",
        "documentation": {}
    },
    {
        "label": "InstagramOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.instagram",
        "description": "social_core.backends.instagram",
        "peekOfCode": "class InstagramOAuth2(BaseOAuth2):\n    name = 'instagram'\n    AUTHORIZATION_URL = 'https://api.instagram.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://api.instagram.com/oauth/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    def get_user_id(self, details, response):\n        user = response.get('user') or {}\n        return user.get('id')\n    def get_user_details(self, response):\n        \"\"\"Return user details from Instagram account\"\"\"",
        "detail": "social_core.backends.instagram",
        "documentation": {}
    },
    {
        "label": "ItembaseOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.itembase",
        "description": "social_core.backends.itembase",
        "peekOfCode": "class ItembaseOAuth2(BaseOAuth2):\n    name = 'itembase'\n    ID_KEY = 'uuid'\n    AUTHORIZATION_URL = 'https://accounts.itembase.com/oauth/v2/auth'\n    ACCESS_TOKEN_URL = 'https://accounts.itembase.com/oauth/v2/token'\n    USER_DETAILS_URL = 'https://users.itembase.com/v1/me'\n    ACTIVATION_ENDPOINT = 'https://solutionservice.itembase.com/activate'\n    DEFAULT_SCOPE = ['user.minimal']\n    EXTRA_DATA = [\n        ('access_token', 'access_token'),",
        "detail": "social_core.backends.itembase",
        "documentation": {}
    },
    {
        "label": "ItembaseOAuth2Sandbox",
        "kind": 6,
        "importPath": "social_core.backends.itembase",
        "description": "social_core.backends.itembase",
        "peekOfCode": "class ItembaseOAuth2Sandbox(ItembaseOAuth2):\n    name = 'itembase-sandbox'\n    AUTHORIZATION_URL = 'http://sandbox.accounts.itembase.io/oauth/v2/auth'\n    ACCESS_TOKEN_URL = 'http://sandbox.accounts.itembase.io/oauth/v2/token'\n    USER_DETAILS_URL = 'http://sandbox.users.itembase.io/v1/me'\n    ACTIVATION_ENDPOINT = 'http://sandbox.solutionservice.itembase.io/activate'",
        "detail": "social_core.backends.itembase",
        "documentation": {}
    },
    {
        "label": "JawboneOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.jawbone",
        "description": "social_core.backends.jawbone",
        "peekOfCode": "class JawboneOAuth2(BaseOAuth2):\n    name = 'jawbone'\n    AUTHORIZATION_URL = 'https://jawbone.com/auth/oauth2/auth'\n    ACCESS_TOKEN_URL = 'https://jawbone.com/auth/oauth2/token'\n    SCOPE_SEPARATOR = ' '\n    REDIRECT_STATE = False\n    def get_user_id(self, details, response):\n        return response['data']['xid']\n    def get_user_details(self, response):\n        \"\"\"Return user details from Jawbone account\"\"\"",
        "detail": "social_core.backends.jawbone",
        "documentation": {}
    },
    {
        "label": "JustGivingOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.justgiving",
        "description": "social_core.backends.justgiving",
        "peekOfCode": "class JustGivingOAuth2(BaseOAuth2):\n    \"\"\"Just Giving OAuth authentication backend\"\"\"\n    name = 'justgiving'\n    ID_KEY = 'userId'\n    AUTHORIZATION_URL = 'https://identity.justgiving.com/connect/authorize'\n    ACCESS_TOKEN_URL = 'https://identity.justgiving.com/connect/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    USER_DATA_URL = 'https://api.justgiving.com/v1/account'\n    DEFAULT_SCOPE = ['openid', 'account', 'profile', 'email', 'fundraise']\n    def get_user_details(self, response):",
        "detail": "social_core.backends.justgiving",
        "documentation": {}
    },
    {
        "label": "KakaoOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.kakao",
        "description": "social_core.backends.kakao",
        "peekOfCode": "class KakaoOAuth2(BaseOAuth2):\n    \"\"\"Kakao OAuth authentication backend\"\"\"\n    name = 'kakao'\n    AUTHORIZATION_URL = 'https://kauth.kakao.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://kauth.kakao.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    EXTRA_DATA = [\n        ('properties', 'properties'),\n    ]",
        "detail": "social_core.backends.kakao",
        "documentation": {}
    },
    {
        "label": "KeycloakOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.keycloak",
        "description": "social_core.backends.keycloak",
        "peekOfCode": "class KeycloakOAuth2(BaseOAuth2):  # pylint: disable=abstract-method\n    \"\"\"Keycloak OAuth2 authentication backend\n    This backend has been tested working with a standard Keycloak installation,\n    but you might have to specialize it and tune the parameters per your\n    configuration.\n    This setup specializes the OAuth2 backend which, strictly speaking, offers\n    authorization without authentication capabilities.\n    Keycloak does offer a full OpenID Connect implementation, but the\n    implementation is rather labor intensive to implement.\n    This backend is configured to get an access token instead, and assume that",
        "detail": "social_core.backends.keycloak",
        "documentation": {}
    },
    {
        "label": "BrowserBasedOAuth1",
        "kind": 6,
        "importPath": "social_core.backends.khanacademy",
        "description": "social_core.backends.khanacademy",
        "peekOfCode": "class BrowserBasedOAuth1(BaseOAuth1):\n    \"\"\"Browser based mechanism OAuth authentication, fill the needed\n    parameters to communicate properly with authentication service.\n        REQUEST_TOKEN_URL       Request token URL (opened in web browser)\n        ACCESS_TOKEN_URL        Access token URL\n    \"\"\"\n    REQUEST_TOKEN_URL = ''\n    OAUTH_TOKEN_PARAMETER_NAME = 'oauth_token'\n    REDIRECT_URI_PARAMETER_NAME = 'redirect_uri'\n    ACCESS_TOKEN_URL = ''",
        "detail": "social_core.backends.khanacademy",
        "documentation": {}
    },
    {
        "label": "KhanAcademyOAuth1",
        "kind": 6,
        "importPath": "social_core.backends.khanacademy",
        "description": "social_core.backends.khanacademy",
        "peekOfCode": "class KhanAcademyOAuth1(BrowserBasedOAuth1):\n    \"\"\"\n    Class used for autorising with Khan Academy.\n    Flow of Khan Academy is a bit different than most OAuth 1.0 and consinsts\n    of the following steps:\n    1. Create signed params to attach to the REQUEST_TOKEN_URL\n    2. Redirect user to the REQUEST_TOKEN_URL that will respond with\n       oauth_secret, oauth_token, oauth_verifier that should be used with\n       ACCESS_TOKEN_URL\n    3. Go to ACCESS_TOKEN_URL and grab oauth_token_secret.",
        "detail": "social_core.backends.khanacademy",
        "documentation": {}
    },
    {
        "label": "LastFmAuth",
        "kind": 6,
        "importPath": "social_core.backends.lastfm",
        "description": "social_core.backends.lastfm",
        "peekOfCode": "class LastFmAuth(BaseAuth):\n    \"\"\"\n    Last.Fm authentication backend. Requires two settings:\n        SOCIAL_AUTH_LASTFM_KEY\n        SOCIAL_AUTH_LASTFM_SECRET\n    Don't forget to set the Last.fm callback to something sensible like\n        http://your.site/lastfm/complete\n    \"\"\"\n    name = 'lastfm'\n    AUTH_URL = 'http://www.last.fm/api/auth/?api_key={api_key}'",
        "detail": "social_core.backends.lastfm",
        "documentation": {}
    },
    {
        "label": "LaunchpadOpenId",
        "kind": 6,
        "importPath": "social_core.backends.launchpad",
        "description": "social_core.backends.launchpad",
        "peekOfCode": "class LaunchpadOpenId(OpenIdAuth):\n    name = 'launchpad'\n    URL = 'https://login.launchpad.net'\n    USERNAME_KEY = 'nickname'",
        "detail": "social_core.backends.launchpad",
        "documentation": {}
    },
    {
        "label": "LegacyAuth",
        "kind": 6,
        "importPath": "social_core.backends.legacy",
        "description": "social_core.backends.legacy",
        "peekOfCode": "class LegacyAuth(BaseAuth):\n    def get_user_id(self, details, response):\n        return details.get(self.ID_KEY) or \\\n               response.get(self.ID_KEY)\n    def auth_url(self):\n        return self.setting('FORM_URL')\n    def auth_html(self):\n        return self.strategy.render_html(tpl=self.setting('FORM_HTML'))\n    def uses_redirect(self):\n        return self.setting('FORM_URL') and not \\",
        "detail": "social_core.backends.legacy",
        "documentation": {}
    },
    {
        "label": "LineOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.line",
        "description": "social_core.backends.line",
        "peekOfCode": "class LineOAuth2(BaseOAuth2):\n    name = 'line'\n    AUTHORIZATION_URL = 'https://access.line.me/oauth2/v2.1/authorize'\n    ACCESS_TOKEN_URL = 'https://api.line.me/oauth2/v2.1/token'\n    BASE_API_URL = 'https://api.line.me'\n    USER_INFO_URL = BASE_API_URL + '/v2/profile'\n    ACCESS_TOKEN_METHOD = 'POST'\n    STATE_PARAMETER = True\n    DEFAULT_SCOPE = ['profile']\n    REDIRECT_STATE = True",
        "detail": "social_core.backends.line",
        "documentation": {}
    },
    {
        "label": "LinkedinOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.linkedin",
        "description": "social_core.backends.linkedin",
        "peekOfCode": "class LinkedinOAuth2(BaseOAuth2):\n    name = 'linkedin-oauth2'\n    AUTHORIZATION_URL = \\\n        'https://www.linkedin.com/oauth/v2/authorization'\n    ACCESS_TOKEN_URL = 'https://www.linkedin.com/oauth/v2/accessToken'\n    USER_DETAILS_URL = \\\n        'https://api.linkedin.com/v2/me?projection=({projection})'\n    USER_EMAILS_URL = 'https://api.linkedin.com/v2/emailAddress' \\\n                      '?q=members&projection=(elements*(handle~))'\n    ACCESS_TOKEN_METHOD = 'POST'",
        "detail": "social_core.backends.linkedin",
        "documentation": {}
    },
    {
        "label": "LinkedinMobileOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.linkedin",
        "description": "social_core.backends.linkedin",
        "peekOfCode": "class LinkedinMobileOAuth2(LinkedinOAuth2):\n    name = 'linkedin-mobile-oauth2'\n    def user_data_headers(self, access_token):\n        headers = super().user_data_headers(access_token)\n        headers['x-li-src'] = 'msdk'\n        return headers",
        "detail": "social_core.backends.linkedin",
        "documentation": {}
    },
    {
        "label": "LiveOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.live",
        "description": "social_core.backends.live",
        "peekOfCode": "class LiveOAuth2(BaseOAuth2):\n    name = 'live'\n    AUTHORIZATION_URL = 'https://login.live.com/oauth20_authorize.srf'\n    ACCESS_TOKEN_URL = 'https://login.live.com/oauth20_token.srf'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ','\n    DEFAULT_SCOPE = ['wl.basic', 'wl.emails']\n    EXTRA_DATA = [\n        ('id', 'id'),\n        ('access_token', 'access_token'),",
        "detail": "social_core.backends.live",
        "documentation": {}
    },
    {
        "label": "LiveJournalOpenId",
        "kind": 6,
        "importPath": "social_core.backends.livejournal",
        "description": "social_core.backends.livejournal",
        "peekOfCode": "class LiveJournalOpenId(OpenIdAuth):\n    \"\"\"LiveJournal OpenID authentication backend\"\"\"\n    name = 'livejournal'\n    def get_user_details(self, response):\n        \"\"\"Generate username from identity url\"\"\"\n        values = super().get_user_details(response)\n        values['username'] = values.get('username') or \\\n            urlsplit(response.identity_url).netloc.split('.', 1)[0]\n        return values\n    def openid_url(self):",
        "detail": "social_core.backends.livejournal",
        "documentation": {}
    },
    {
        "label": "LoginRadiusAuth",
        "kind": 6,
        "importPath": "social_core.backends.loginradius",
        "description": "social_core.backends.loginradius",
        "peekOfCode": "class LoginRadiusAuth(BaseOAuth2):\n    \"\"\"LoginRadius BaseOAuth2 authentication backend.\"\"\"\n    name = 'loginradius'\n    ID_KEY = 'ID'\n    ACCESS_TOKEN_URL = 'https://api.loginradius.com/api/v2/access_token'\n    PROFILE_URL = 'https://api.loginradius.com/api/v2/userprofile'\n    ACCESS_TOKEN_METHOD = 'GET'\n    REDIRECT_STATE = False\n    STATE_PARAMETER = False\n    def uses_redirect(self):",
        "detail": "social_core.backends.loginradius",
        "documentation": {}
    },
    {
        "label": "LyftOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.lyft",
        "description": "social_core.backends.lyft",
        "peekOfCode": "class LyftOAuth2(BaseOAuth2):\n    name = 'lyft'\n    ID_KEY = 'id'\n    SCOPE_SEPARATOR = ' '\n    AUTHORIZATION_URL = 'https://api.lyft.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://api.lyft.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REFRESH_TOKEN_URL = 'https://api.lyft.com/oauth/token'\n    USER_DATA_URL = 'https://api.lyft.com/v1/profile'\n    DEFAULT_SCOPE = ['public', 'profile', 'rides.read', 'rides.request']",
        "detail": "social_core.backends.lyft",
        "documentation": {}
    },
    {
        "label": "MailChimpOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.mailchimp",
        "description": "social_core.backends.mailchimp",
        "peekOfCode": "class MailChimpOAuth2(BaseOAuth2):\n    \"\"\"MailChimp OAuth2 authentication backend\"\"\"\n    name = 'mailchimp'\n    AUTHORIZATION_URL = 'https://login.mailchimp.com/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://login.mailchimp.com/oauth2/token'\n    METADATA_URL = 'https://login.mailchimp.com/oauth2/metadata'\n    ACCESS_TOKEN_METHOD = 'POST'\n    STATE_PARAMETER = False\n    REDIRECT_STATE = False\n    ID_KEY = 'user_id'",
        "detail": "social_core.backends.mailchimp",
        "documentation": {}
    },
    {
        "label": "MailruOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.mailru",
        "description": "social_core.backends.mailru",
        "peekOfCode": "class MailruOAuth2(BaseOAuth2):\n    \"\"\"Mail.ru authentication backend\"\"\"\n    name = 'mailru-oauth2'\n    ID_KEY = 'uid'\n    AUTHORIZATION_URL = 'https://connect.mail.ru/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://connect.mail.ru/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [('refresh_token', 'refresh_token'),\n                  ('expires_in', 'expires')]\n    def get_user_details(self, response):",
        "detail": "social_core.backends.mailru",
        "documentation": {}
    },
    {
        "label": "MRGOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.mailru",
        "description": "social_core.backends.mailru",
        "peekOfCode": "class MRGOAuth2(BaseOAuth2):\n    name = 'mailru'\n    ID_KEY = 'email'\n    AUTHORIZATION_URL = 'https://oauth.mail.ru/login'\n    ACCESS_TOKEN_URL = 'https://oauth.mail.ru/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [('refresh_token', 'refresh_token'),\n                  ('expires_in', 'expires')]\n    REDIRECT_STATE = False\n    def get_user_details(self, response):",
        "detail": "social_core.backends.mailru",
        "documentation": {}
    },
    {
        "label": "MapMyFitnessOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.mapmyfitness",
        "description": "social_core.backends.mapmyfitness",
        "peekOfCode": "class MapMyFitnessOAuth2(BaseOAuth2):\n    \"\"\"MapMyFitness OAuth authentication backend\"\"\"\n    name = 'mapmyfitness'\n    AUTHORIZATION_URL = 'https://www.mapmyfitness.com/v7.0/oauth2/authorize'\n    ACCESS_TOKEN_URL = \\\n        'https://oauth2-api.mapmyapi.com/v7.0/oauth2/access_token'\n    REQUEST_TOKEN_METHOD = 'POST'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    EXTRA_DATA = [",
        "detail": "social_core.backends.mapmyfitness",
        "documentation": {}
    },
    {
        "label": "MediaWiki",
        "kind": 6,
        "importPath": "social_core.backends.mediawiki",
        "description": "social_core.backends.mediawiki",
        "peekOfCode": "class MediaWiki(BaseOAuth1):\n    \"\"\"\n    Handles the handshake with Mediawiki and fetching of user data.\n    \"\"\"\n    name = 'mediawiki'\n    MEDIAWIKI_URL = 'https://meta.wikimedia.org/w/index.php'\n    SOCIAL_AUTH_MEDIAWIKI_CALLBACK = 'oob'\n    LEEWAY = 10.0\n    def unauthorized_token(self):\n        \"\"\"",
        "detail": "social_core.backends.mediawiki",
        "documentation": {}
    },
    {
        "label": "force_unicode",
        "kind": 2,
        "importPath": "social_core.backends.mediawiki",
        "description": "social_core.backends.mediawiki",
        "peekOfCode": "def force_unicode(value):\n    \"\"\"\n    Return string in unicode.\n    \"\"\"\n    if isinstance(value, str):\n        return value\n    else:\n        return str(value, 'unicode-escape')\nclass MediaWiki(BaseOAuth1):\n    \"\"\"",
        "detail": "social_core.backends.mediawiki",
        "documentation": {}
    },
    {
        "label": "MeetupOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.meetup",
        "description": "social_core.backends.meetup",
        "peekOfCode": "class MeetupOAuth2(BaseOAuth2):\n    \"\"\"Meetup OAuth2 authentication backend\"\"\"\n    name = 'meetup'\n    AUTHORIZATION_URL = 'https://secure.meetup.com/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://secure.meetup.com/oauth2/access'\n    ACCESS_TOKEN_METHOD = 'POST'\n    DEFAULT_SCOPE = ['basic']\n    SCOPE_SEPARATOR = ','\n    REDIRECT_STATE = False\n    STATE_PARAMETER = 'state'",
        "detail": "social_core.backends.meetup",
        "documentation": {}
    },
    {
        "label": "MendeleyMixin",
        "kind": 6,
        "importPath": "social_core.backends.mendeley",
        "description": "social_core.backends.mendeley",
        "peekOfCode": "class MendeleyMixin:\n    SCOPE_SEPARATOR = '+'\n    EXTRA_DATA = [('profile_id', 'profile_id'),\n                  ('name', 'name'),\n                  ('bio', 'bio')]\n    def get_user_id(self, details, response):\n        return response['id']\n    def get_user_details(self, response):\n        \"\"\"Return user details from Mendeley account\"\"\"\n        profile_id = response['id']",
        "detail": "social_core.backends.mendeley",
        "documentation": {}
    },
    {
        "label": "MendeleyOAuth",
        "kind": 6,
        "importPath": "social_core.backends.mendeley",
        "description": "social_core.backends.mendeley",
        "peekOfCode": "class MendeleyOAuth(MendeleyMixin, BaseOAuth1):\n    name = 'mendeley'\n    AUTHORIZATION_URL = 'http://api.mendeley.com/oauth/authorize/'\n    REQUEST_TOKEN_URL = 'http://api.mendeley.com/oauth/request_token/'\n    ACCESS_TOKEN_URL = 'http://api.mendeley.com/oauth/access_token/'\n    def get_user_data(self, access_token):\n        return self.get_json(\n            'http://api.mendeley.com/oapi/profiles/info/me/',\n            auth=self.oauth_auth(access_token)\n        )",
        "detail": "social_core.backends.mendeley",
        "documentation": {}
    },
    {
        "label": "MendeleyOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.mendeley",
        "description": "social_core.backends.mendeley",
        "peekOfCode": "class MendeleyOAuth2(MendeleyMixin, BaseOAuth2):\n    name = 'mendeley-oauth2'\n    AUTHORIZATION_URL = 'https://api-oauth2.mendeley.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://api-oauth2.mendeley.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    DEFAULT_SCOPE = ['all']\n    REDIRECT_STATE = False\n    EXTRA_DATA = MendeleyMixin.EXTRA_DATA + [\n        ('refresh_token', 'refresh_token'),\n        ('expires_in', 'expires_in'),",
        "detail": "social_core.backends.mendeley",
        "documentation": {}
    },
    {
        "label": "MicrosoftOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.microsoft",
        "description": "social_core.backends.microsoft",
        "peekOfCode": "class MicrosoftOAuth2(BaseOAuth2):\n    name = 'microsoft-graph'\n    SCOPE_SEPARATOR = ' '\n    AUTHORIZATION_URL = \\\n        'https://login.microsoftonline.com/common/oauth2/v2.0/authorize'\n    ACCESS_TOKEN_URL = \\\n        'https://login.microsoftonline.com/common/oauth2/v2.0/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    DEFAULT_SCOPE = ['User.Read']",
        "detail": "social_core.backends.microsoft",
        "documentation": {}
    },
    {
        "label": "MineIDOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.mineid",
        "description": "social_core.backends.mineid",
        "peekOfCode": "class MineIDOAuth2(BaseOAuth2):\n    \"\"\"MineID OAuth2 authentication backend\"\"\"\n    name = 'mineid'\n    _AUTHORIZATION_URL = '%(scheme)s://%(host)s/oauth/authorize'\n    _ACCESS_TOKEN_URL = '%(scheme)s://%(host)s/oauth/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ','\n    EXTRA_DATA = [\n    ]\n    def get_user_details(self, response):",
        "detail": "social_core.backends.mineid",
        "documentation": {}
    },
    {
        "label": "MixcloudOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.mixcloud",
        "description": "social_core.backends.mixcloud",
        "peekOfCode": "class MixcloudOAuth2(BaseOAuth2):\n    name = 'mixcloud'\n    ID_KEY = 'username'\n    AUTHORIZATION_URL = 'https://www.mixcloud.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://www.mixcloud.com/oauth/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    def get_user_details(self, response):\n        fullname, first_name, last_name = self.get_user_names(response['name'])\n        return {'username': response['username'],\n                'email': None,",
        "detail": "social_core.backends.mixcloud",
        "documentation": {}
    },
    {
        "label": "MonzoOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.monzo",
        "description": "social_core.backends.monzo",
        "peekOfCode": "class MonzoOAuth2(BaseOAuth2):\n    \"\"\"\n    Monzo OAuth2 authentication backend.\n    \"\"\"\n    name = 'monzo'\n    AUTHORIZATION_URL = 'https://auth.getmondo.co.uk/'\n    ACCESS_TOKEN_URL = 'https://api.monzo.com/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    def get_user_details(self, response):",
        "detail": "social_core.backends.monzo",
        "documentation": {}
    },
    {
        "label": "MovesOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.moves",
        "description": "social_core.backends.moves",
        "peekOfCode": "class MovesOAuth2(BaseOAuth2):\n    \"\"\"Moves OAuth authentication backend\"\"\"\n    name = 'moves'\n    ID_KEY = 'user_id'\n    AUTHORIZATION_URL = 'https://api.moves-app.com/oauth/v1/authorize'\n    ACCESS_TOKEN_URL = 'https://api.moves-app.com/oauth/v1/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [\n        ('refresh_token', 'refresh_token', True),\n        ('expires_in', 'expires'),",
        "detail": "social_core.backends.moves",
        "documentation": {}
    },
    {
        "label": "MusicBrainzOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.musicbrainz",
        "description": "social_core.backends.musicbrainz",
        "peekOfCode": "class MusicBrainzOAuth2(BaseOAuth2):\n    \"\"\"MusicBrainz OAuth authentication backend\"\"\"\n    name = 'musicbrainz'\n    AUTHORIZATION_URL = 'https://musicbrainz.org/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://musicbrainz.org/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    ID_KEY = 'metabrainz_user_id'\n    DEFAULT_SCOPE = ['profile', 'email']\n    SCOPE_SEPARATOR = ' '\n    REDIRECT_STATE = False",
        "detail": "social_core.backends.musicbrainz",
        "documentation": {}
    },
    {
        "label": "NationBuilderOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.nationbuilder",
        "description": "social_core.backends.nationbuilder",
        "peekOfCode": "class NationBuilderOAuth2(BaseOAuth2):\n    \"\"\"NationBuilder OAuth2 authentication backend\"\"\"\n    name = 'nationbuilder'\n    AUTHORIZATION_URL = 'https://{slug}.nationbuilder.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://{slug}.nationbuilder.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    SCOPE_SEPARATOR = ','\n    EXTRA_DATA = [\n        ('id', 'id'),",
        "detail": "social_core.backends.nationbuilder",
        "documentation": {}
    },
    {
        "label": "NaverOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.naver",
        "description": "social_core.backends.naver",
        "peekOfCode": "class NaverOAuth2(BaseOAuth2):\n    \"\"\"Naver OAuth authentication backend\"\"\"\n    name = 'naver'\n    AUTHORIZATION_URL = 'https://nid.naver.com/oauth2.0/authorize'\n    ACCESS_TOKEN_URL = 'https://nid.naver.com/oauth2.0/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [\n        ('id', 'id'),\n    ]\n    def get_user_id(self, details, response):",
        "detail": "social_core.backends.naver",
        "documentation": {}
    },
    {
        "label": "ActionIDOpenID",
        "kind": 6,
        "importPath": "social_core.backends.ngpvan",
        "description": "social_core.backends.ngpvan",
        "peekOfCode": "class ActionIDOpenID(OpenIdAuth):\n    \"\"\"\n    NGP VAN's ActionID OpenID 1.1 authentication backend\n    \"\"\"\n    name = 'actionid-openid'\n    URL = 'https://accounts.ngpvan.com/Home/Xrds'\n    USERNAME_KEY = 'email'\n    def get_ax_attributes(self):\n        \"\"\"\n        Return the AX attributes that ActionID responds with, as well as the",
        "detail": "social_core.backends.ngpvan",
        "documentation": {}
    },
    {
        "label": "NKOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.nk",
        "description": "social_core.backends.nk",
        "peekOfCode": "class NKOAuth2(BaseOAuth2):\n    \"\"\"NK OAuth authentication backend\"\"\"\n    name = 'nk'\n    AUTHORIZATION_URL = 'https://nk.pl/oauth2/login'\n    ACCESS_TOKEN_URL = 'https://nk.pl/oauth2/token'\n    SCOPE_SEPARATOR = ','\n    ACCESS_TOKEN_METHOD = 'POST'\n    SIGNATURE_TYPE_AUTH_HEADER = 'AUTH_HEADER'\n    EXTRA_DATA = [\n        ('id', 'id'),",
        "detail": "social_core.backends.nk",
        "documentation": {}
    },
    {
        "label": "OAuthAuth",
        "kind": 6,
        "importPath": "social_core.backends.oauth",
        "description": "social_core.backends.oauth",
        "peekOfCode": "class OAuthAuth(BaseAuth):\n    \"\"\"OAuth authentication backend base class.\n    Settings will be inspected to get more values names that should be\n    stored on extra_data field. The setting name is created following the\n    pattern SOCIAL_AUTH_<uppercase current backend name>_EXTRA_DATA.\n    access_token is always stored.\n    URLs settings:\n        AUTHORIZATION_URL       Authorization service url\n        ACCESS_TOKEN_URL        Access token URL\n    \"\"\"",
        "detail": "social_core.backends.oauth",
        "documentation": {}
    },
    {
        "label": "BaseOAuth1",
        "kind": 6,
        "importPath": "social_core.backends.oauth",
        "description": "social_core.backends.oauth",
        "peekOfCode": "class BaseOAuth1(OAuthAuth):\n    \"\"\"Consumer based mechanism OAuth authentication, fill the needed\n    parameters to communicate properly with authentication service.\n    URLs settings:\n        REQUEST_TOKEN_URL       Request token URL\n    \"\"\"\n    REQUEST_TOKEN_URL = ''\n    REQUEST_TOKEN_METHOD = 'GET'\n    OAUTH_TOKEN_PARAMETER_NAME = 'oauth_token'\n    REDIRECT_URI_PARAMETER_NAME = 'redirect_uri'",
        "detail": "social_core.backends.oauth",
        "documentation": {}
    },
    {
        "label": "BaseOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.oauth",
        "description": "social_core.backends.oauth",
        "peekOfCode": "class BaseOAuth2(OAuthAuth):\n    \"\"\"Base class for OAuth2 providers.\n    OAuth2 details at:\n        https://datatracker.ietf.org/doc/html/rfc6749\n    \"\"\"\n    REFRESH_TOKEN_URL = None\n    REFRESH_TOKEN_METHOD = 'POST'\n    RESPONSE_TYPE = 'code'\n    REDIRECT_STATE = True\n    STATE_PARAMETER = True",
        "detail": "social_core.backends.oauth",
        "documentation": {}
    },
    {
        "label": "OdnoklassnikiOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.odnoklassniki",
        "description": "social_core.backends.odnoklassniki",
        "peekOfCode": "class OdnoklassnikiOAuth2(BaseOAuth2):\n    \"\"\"Odnoklassniki authentication backend\"\"\"\n    name = 'odnoklassniki-oauth2'\n    ID_KEY = 'uid'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ';'\n    AUTHORIZATION_URL = 'https://connect.ok.ru/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://api.ok.ru/oauth/token.do'\n    EXTRA_DATA = [('refresh_token', 'refresh_token'),\n                  ('expires_in', 'expires')]",
        "detail": "social_core.backends.odnoklassniki",
        "documentation": {}
    },
    {
        "label": "OdnoklassnikiApp",
        "kind": 6,
        "importPath": "social_core.backends.odnoklassniki",
        "description": "social_core.backends.odnoklassniki",
        "peekOfCode": "class OdnoklassnikiApp(BaseAuth):\n    \"\"\"Odnoklassniki iframe app authentication backend\"\"\"\n    name = 'odnoklassniki-app'\n    ID_KEY = 'uid'\n    def extra_data(self, user, uid, response, details=None, *args, **kwargs):\n        return {key: value for key, value in response.items()\n                     if key in response['extra_data_list']}\n    def get_user_details(self, response):\n        fullname, first_name, last_name = self.get_user_names(\n            fullname=unquote(response['name']),",
        "detail": "social_core.backends.odnoklassniki",
        "documentation": {}
    },
    {
        "label": "odnoklassniki_oauth_sig",
        "kind": 2,
        "importPath": "social_core.backends.odnoklassniki",
        "description": "social_core.backends.odnoklassniki",
        "peekOfCode": "def odnoklassniki_oauth_sig(data, client_secret):\n    \"\"\"\n    Calculates signature of request data access_token value must be included\n    Algorithm is described at\n        https://apiok.ru/wiki/pages/viewpage.action?pageId=12878032,\n    search for \"little bit different way\"\n    \"\"\"\n    suffix = md5(\n        '{:s}{:s}'.format(data['access_token'],\n                            client_secret).encode('utf-8')",
        "detail": "social_core.backends.odnoklassniki",
        "documentation": {}
    },
    {
        "label": "odnoklassniki_iframe_sig",
        "kind": 2,
        "importPath": "social_core.backends.odnoklassniki",
        "description": "social_core.backends.odnoklassniki",
        "peekOfCode": "def odnoklassniki_iframe_sig(data, client_secret_or_session_secret):\n    \"\"\"\n    Calculates signature as described at:\n        https://apiok.ru/wiki/display/ok/Authentication+and+Authorization\n    If API method requires session context, request is signed with session\n    secret key. Otherwise it is signed with application secret key\n    \"\"\"\n    param_list = sorted(f'{key:s}={value:s}'\n                         for key, value in data.items())\n    return md5(",
        "detail": "social_core.backends.odnoklassniki",
        "documentation": {}
    },
    {
        "label": "odnoklassniki_api",
        "kind": 2,
        "importPath": "social_core.backends.odnoklassniki",
        "description": "social_core.backends.odnoklassniki",
        "peekOfCode": "def odnoklassniki_api(backend, data, api_url, public_key, client_secret,\n                      request_type='oauth'):\n    \"\"\"Calls Odnoklassniki REST API method\n    https://apiok.ru/wiki/display/ok/Odnoklassniki+Rest+API\"\"\"\n    data.update({\n        'application_key': public_key,\n        'format': 'JSON'\n    })\n    if request_type == 'oauth':\n        data['sig'] = odnoklassniki_oauth_sig(data, client_secret)",
        "detail": "social_core.backends.odnoklassniki",
        "documentation": {}
    },
    {
        "label": "OktaMixin",
        "kind": 6,
        "importPath": "social_core.backends.okta",
        "description": "social_core.backends.okta",
        "peekOfCode": "class OktaMixin:\n    def api_url(self):\n        return append_slash(self.setting('API_URL'))\n    def authorization_url(self):\n        return self._url('v1/authorize')\n    def access_token_url(self):\n        return self._url('v1/token')\n    def _url(self, path):\n        return urljoin(append_slash(self.setting('API_URL')), path)\n    def oidc_config(self):",
        "detail": "social_core.backends.okta",
        "documentation": {}
    },
    {
        "label": "OktaOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.okta",
        "description": "social_core.backends.okta",
        "peekOfCode": "class OktaOAuth2(OktaMixin, BaseOAuth2):\n    \"\"\"Okta OAuth authentication backend\"\"\"\n    name = 'okta-oauth2'\n    REDIRECT_STATE = False\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ' '\n    ID_KEY = 'preferred_username'\n    DEFAULT_SCOPE = [\n        'openid', 'profile', 'email'\n    ]",
        "detail": "social_core.backends.okta",
        "documentation": {}
    },
    {
        "label": "OktaOpenIdConnect",
        "kind": 6,
        "importPath": "social_core.backends.okta_openidconnect",
        "description": "social_core.backends.okta_openidconnect",
        "peekOfCode": "class OktaOpenIdConnect(OktaOAuth2, OpenIdConnectAuth):\n    \"\"\"Okta OpenID-Connect authentication backend\"\"\"\n    name = 'okta-openidconnect'\n    REDIRECT_STATE = False\n    ACCESS_TOKEN_METHOD = 'POST'\n    RESPONSE_TYPE = 'code'",
        "detail": "social_core.backends.okta_openidconnect",
        "documentation": {}
    },
    {
        "label": "OpenshiftOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.openshift",
        "description": "social_core.backends.openshift",
        "peekOfCode": "class OpenshiftOAuth2(BaseOAuth2):\n    name = 'openshift'\n    ACCESS_TOKEN_METHOD = 'POST'\n    def access_token_url(self):\n        return urljoin(append_slash(self.setting('URL')), 'oauth/token')\n    def authorization_url(self):\n        return urljoin(append_slash(self.setting('URL')), 'oauth/authorize')\n    def get_user_id(self, details, response):\n        return response['metadata']['uid']\n    def get_user_details(self, response):",
        "detail": "social_core.backends.openshift",
        "documentation": {}
    },
    {
        "label": "OpenStackOpenId",
        "kind": 6,
        "importPath": "social_core.backends.openstack",
        "description": "social_core.backends.openstack",
        "peekOfCode": "class OpenStackOpenId(OpenIdAuth):\n    name = 'openstack'\n    URL = 'openstackid.org'\n    def get_user_details(self, response):\n        \"\"\"Generate username from identity url\"\"\"\n        values = super().get_user_details(response)\n        values['username'] = values.get('username') or \\\n            urlsplit(response.identity_url).path.strip('/')\n        values['nickname'] = values.get('nickname', '')\n        return values",
        "detail": "social_core.backends.openstack",
        "documentation": {}
    },
    {
        "label": "OpenStackDevOpenId",
        "kind": 6,
        "importPath": "social_core.backends.openstackdev",
        "description": "social_core.backends.openstackdev",
        "peekOfCode": "class OpenStackDevOpenId(OpenIdAuth):\n    name = 'openstackdev'\n    URL = 'openstackid-dev.openstack.org'\n    def get_user_details(self, response):\n        \"\"\"Generate username from identity url\"\"\"\n        values = super().get_user_details(response)\n        values['username'] = values.get('username') or \\\n            urlsplit(response.identity_url).path.strip('/')\n        values['nickname'] = values.get('nickname', '')\n        return values",
        "detail": "social_core.backends.openstackdev",
        "documentation": {}
    },
    {
        "label": "OpenStreetMapOAuth",
        "kind": 6,
        "importPath": "social_core.backends.openstreetmap",
        "description": "social_core.backends.openstreetmap",
        "peekOfCode": "class OpenStreetMapOAuth(BaseOAuth1):\n    \"\"\"OpenStreetMap OAuth authentication backend\"\"\"\n    name = 'openstreetmap'\n    AUTHORIZATION_URL = 'https://www.openstreetmap.org/oauth/authorize'\n    REQUEST_TOKEN_URL = 'https://www.openstreetmap.org/oauth/request_token'\n    ACCESS_TOKEN_URL = 'https://www.openstreetmap.org/oauth/access_token'\n    EXTRA_DATA = [\n        ('id', 'id'),\n        ('avatar', 'avatar'),\n        ('account_created', 'account_created')",
        "detail": "social_core.backends.openstreetmap",
        "documentation": {}
    },
    {
        "label": "OpenIdAuth",
        "kind": 6,
        "importPath": "social_core.backends.open_id",
        "description": "social_core.backends.open_id",
        "peekOfCode": "class OpenIdAuth(BaseAuth):\n    \"\"\"Generic OpenID authentication backend\"\"\"\n    name = 'openid'\n    URL = None\n    USERNAME_KEY = 'username'\n    def get_user_id(self, details, response):\n        \"\"\"Return user unique id provided by service\"\"\"\n        return response.identity_url\n    def get_ax_attributes(self):\n        attrs = self.setting('AX_SCHEMA_ATTRS', [])",
        "detail": "social_core.backends.open_id",
        "documentation": {}
    },
    {
        "label": "OLD_AX_ATTRS",
        "kind": 5,
        "importPath": "social_core.backends.open_id",
        "description": "social_core.backends.open_id",
        "peekOfCode": "OLD_AX_ATTRS = [\n    ('http://schema.openid.net/contact/email', 'old_email'),\n    ('http://schema.openid.net/namePerson', 'old_fullname'),\n    ('http://schema.openid.net/namePerson/friendly', 'old_nickname')\n]\nAX_SCHEMA_ATTRS = [\n    # Request both the full name and first/last components since some\n    # providers offer one but not the other.\n    ('http://axschema.org/contact/email', 'email'),\n    ('http://axschema.org/namePerson', 'fullname'),",
        "detail": "social_core.backends.open_id",
        "documentation": {}
    },
    {
        "label": "AX_SCHEMA_ATTRS",
        "kind": 5,
        "importPath": "social_core.backends.open_id",
        "description": "social_core.backends.open_id",
        "peekOfCode": "AX_SCHEMA_ATTRS = [\n    # Request both the full name and first/last components since some\n    # providers offer one but not the other.\n    ('http://axschema.org/contact/email', 'email'),\n    ('http://axschema.org/namePerson', 'fullname'),\n    ('http://axschema.org/namePerson/first', 'first_name'),\n    ('http://axschema.org/namePerson/last', 'last_name'),\n    ('http://axschema.org/namePerson/friendly', 'nickname'),\n]\nSREG_ATTR = [",
        "detail": "social_core.backends.open_id",
        "documentation": {}
    },
    {
        "label": "SREG_ATTR",
        "kind": 5,
        "importPath": "social_core.backends.open_id",
        "description": "social_core.backends.open_id",
        "peekOfCode": "SREG_ATTR = [\n    ('email', 'email'),\n    ('fullname', 'fullname'),\n    ('nickname', 'nickname')\n]\nOPENID_ID_FIELD = 'openid_identifier'\nSESSION_NAME = 'openid'\nclass OpenIdAuth(BaseAuth):\n    \"\"\"Generic OpenID authentication backend\"\"\"\n    name = 'openid'",
        "detail": "social_core.backends.open_id",
        "documentation": {}
    },
    {
        "label": "OPENID_ID_FIELD",
        "kind": 5,
        "importPath": "social_core.backends.open_id",
        "description": "social_core.backends.open_id",
        "peekOfCode": "OPENID_ID_FIELD = 'openid_identifier'\nSESSION_NAME = 'openid'\nclass OpenIdAuth(BaseAuth):\n    \"\"\"Generic OpenID authentication backend\"\"\"\n    name = 'openid'\n    URL = None\n    USERNAME_KEY = 'username'\n    def get_user_id(self, details, response):\n        \"\"\"Return user unique id provided by service\"\"\"\n        return response.identity_url",
        "detail": "social_core.backends.open_id",
        "documentation": {}
    },
    {
        "label": "SESSION_NAME",
        "kind": 5,
        "importPath": "social_core.backends.open_id",
        "description": "social_core.backends.open_id",
        "peekOfCode": "SESSION_NAME = 'openid'\nclass OpenIdAuth(BaseAuth):\n    \"\"\"Generic OpenID authentication backend\"\"\"\n    name = 'openid'\n    URL = None\n    USERNAME_KEY = 'username'\n    def get_user_id(self, details, response):\n        \"\"\"Return user unique id provided by service\"\"\"\n        return response.identity_url\n    def get_ax_attributes(self):",
        "detail": "social_core.backends.open_id",
        "documentation": {}
    },
    {
        "label": "OpenIdConnectAssociation",
        "kind": 6,
        "importPath": "social_core.backends.open_id_connect",
        "description": "social_core.backends.open_id_connect",
        "peekOfCode": "class OpenIdConnectAssociation:\n    \"\"\" Use Association model to save the nonce by force.\"\"\"\n    def __init__(self, handle, secret='', issued=0, lifetime=0, assoc_type=''):\n        self.handle = handle  # as nonce\n        self.secret = secret.encode()  # not use\n        self.issued = issued  # not use\n        self.lifetime = lifetime  # not use\n        self.assoc_type = assoc_type  # as state\nclass OpenIdConnectAuth(BaseOAuth2):\n    \"\"\"",
        "detail": "social_core.backends.open_id_connect",
        "documentation": {}
    },
    {
        "label": "OpenIdConnectAuth",
        "kind": 6,
        "importPath": "social_core.backends.open_id_connect",
        "description": "social_core.backends.open_id_connect",
        "peekOfCode": "class OpenIdConnectAuth(BaseOAuth2):\n    \"\"\"\n    Base class for Open ID Connect backends.\n    Currently only the code response type is supported.\n    It can also be directly instantiated as a generic OIDC backend.\n    To use it you will need to set at minimum:\n    SOCIAL_AUTH_OIDC_OIDC_ENDPOINT = 'https://.....'  # endpoint without /.well-known/openid-configuration\n    SOCIAL_AUTH_OIDC_KEY = '<client_id>'\n    SOCIAL_AUTH_OIDC_SECRET = '<client_secret>'\n    \"\"\"",
        "detail": "social_core.backends.open_id_connect",
        "documentation": {}
    },
    {
        "label": "OrbiOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.orbi",
        "description": "social_core.backends.orbi",
        "peekOfCode": "class OrbiOAuth2(BaseOAuth2):\n    \"\"\"Orbi OAuth2 authentication backend\"\"\"\n    name = 'orbi'\n    AUTHORIZATION_URL = 'https://login.orbi.kr/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://login.orbi.kr/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [\n        ('imin', 'imin'),\n        ('nick', 'nick'),\n        ('photo', 'photo'),",
        "detail": "social_core.backends.orbi",
        "documentation": {}
    },
    {
        "label": "ORCIDOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.orcid",
        "description": "social_core.backends.orcid",
        "peekOfCode": "class ORCIDOAuth2(BaseOAuth2):\n    \"\"\"ORCID OAuth2 authentication backend\"\"\"\n    name = 'orcid'\n    ID_KEY = 'orcid'\n    AUTHORIZATION_URL = 'https://orcid.org/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://orcid.org/oauth/token'\n    USER_ID_URL = 'https://orcid.org/oauth/userinfo'\n    USER_DATA_URL = 'https://pub.orcid.org/v2.0/{}'\n    DEFAULT_SCOPE = ['/authenticate']\n    ACCESS_TOKEN_METHOD = 'POST'",
        "detail": "social_core.backends.orcid",
        "documentation": {}
    },
    {
        "label": "ORCIDOAuth2Sandbox",
        "kind": 6,
        "importPath": "social_core.backends.orcid",
        "description": "social_core.backends.orcid",
        "peekOfCode": "class ORCIDOAuth2Sandbox(ORCIDOAuth2):\n    \"\"\"ORCID OAuth2 Sandbox authentication backend\"\"\"\n    name = 'orcid-sandbox'\n    AUTHORIZATION_URL = 'https://sandbox.orcid.org/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://sandbox.orcid.org/oauth/token'\n    USER_ID_URL = 'https://sandbox.orcid.org/oauth/userinfo'\n    USER_DATA_URL = 'https://pub.sandbox.orcid.org/v2.0/{}'\nclass ORCIDMemberOAuth2(ORCIDOAuth2):\n    \"\"\"ORCID OAuth2 authentication backend that uses ORCID Member API\"\"\"\n    USER_DATA_URL = 'https://api.orcid.org/v2.0/{}'",
        "detail": "social_core.backends.orcid",
        "documentation": {}
    },
    {
        "label": "ORCIDMemberOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.orcid",
        "description": "social_core.backends.orcid",
        "peekOfCode": "class ORCIDMemberOAuth2(ORCIDOAuth2):\n    \"\"\"ORCID OAuth2 authentication backend that uses ORCID Member API\"\"\"\n    USER_DATA_URL = 'https://api.orcid.org/v2.0/{}'\n    DEFAULT_SCOPE = ['/authenticate', '/read-limited']\nclass ORCIDMemberOAuth2Sandbox(ORCIDOAuth2Sandbox):\n    \"\"\"ORCID OAuth2 Sandbox authentication backend that uses ORCID Member Sandbox API\"\"\"\n    USER_DATA_URL = 'https://api.sandbox.orcid.org/v2.0/{}'\n    DEFAULT_SCOPE = ['/authenticate', '/read-limited']",
        "detail": "social_core.backends.orcid",
        "documentation": {}
    },
    {
        "label": "ORCIDMemberOAuth2Sandbox",
        "kind": 6,
        "importPath": "social_core.backends.orcid",
        "description": "social_core.backends.orcid",
        "peekOfCode": "class ORCIDMemberOAuth2Sandbox(ORCIDOAuth2Sandbox):\n    \"\"\"ORCID OAuth2 Sandbox authentication backend that uses ORCID Member Sandbox API\"\"\"\n    USER_DATA_URL = 'https://api.sandbox.orcid.org/v2.0/{}'\n    DEFAULT_SCOPE = ['/authenticate', '/read-limited']",
        "detail": "social_core.backends.orcid",
        "documentation": {}
    },
    {
        "label": "OssoOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.osso",
        "description": "social_core.backends.osso",
        "peekOfCode": "class OssoOAuth2(BaseOAuth2):\n    \"\"\"Osso OAuth authentication backend\"\"\"\n    name = 'osso'\n    REDIRECT_STATE = False\n    STATE_PARAMETER = True\n    AUTHORIZATION_URL = '{osso_base_url}/oauth/authorize'\n    ACCESS_TOKEN_URL = '{osso_base_url}/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    @property\n    def osso_base_url(self):",
        "detail": "social_core.backends.osso",
        "documentation": {}
    },
    {
        "label": "PatreonOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.patreon",
        "description": "social_core.backends.patreon",
        "peekOfCode": "class PatreonOAuth2(BaseOAuth2):\n    \"\"\"Patreon OAuth2 authentication backend\"\"\"\n    name = 'patreon'\n    AUTHORIZATION_URL = 'https://www.patreon.com/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://www.patreon.com/api/oauth2/token'\n    REVOKE_TOKEN_URL = 'https://www.patreon.com/oauth2/revoke'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    ID_KEY = 'id'\n    EXTRA_DATA = [",
        "detail": "social_core.backends.patreon",
        "documentation": {}
    },
    {
        "label": "PayPalOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.paypal",
        "description": "social_core.backends.paypal",
        "peekOfCode": "class PayPalOAuth2(BaseOAuth2):\n    \"\"\"\n    PayPal OAuth2 backend, docs at:\n        https://developer.paypal.com/docs/connect-with-paypal/integrate/\n    \"\"\"\n    name = 'paypal-oauth2'\n    ID_KEY = 'user_id'\n    AUTHORIZATION_URL = 'https://www.paypal.com/connect'\n    ACCESS_TOKEN_URL = 'https://api.paypal.com/v1/oauth2/token'\n    USER_DATA_URL = (",
        "detail": "social_core.backends.paypal",
        "documentation": {}
    },
    {
        "label": "PayPalOAuth2Sandbox",
        "kind": 6,
        "importPath": "social_core.backends.paypal",
        "description": "social_core.backends.paypal",
        "peekOfCode": "class PayPalOAuth2Sandbox(PayPalOAuth2):\n    name = 'paypal-oauth2-sandbox'\n    AUTHORIZATION_URL = 'https://www.sandbox.paypal.com/connect'\n    ACCESS_TOKEN_URL = 'https://api.sandbox.paypal.com/v1/oauth2/token'\n    USER_DATA_URL = (\n        'https://api.sandbox.paypal.com/v1/identity/oauth2/userinfo?schema=paypalv1.1'\n    )",
        "detail": "social_core.backends.paypal",
        "documentation": {}
    },
    {
        "label": "PersonaAuth",
        "kind": 6,
        "importPath": "social_core.backends.persona",
        "description": "social_core.backends.persona",
        "peekOfCode": "class PersonaAuth(BaseAuth):\n    \"\"\"BrowserID authentication backend\"\"\"\n    name = 'persona'\n    def get_user_id(self, details, response):\n        \"\"\"Use BrowserID email as ID\"\"\"\n        return details['email']\n    def get_user_details(self, response):\n        \"\"\"Return user details, BrowserID only provides Email.\"\"\"\n        # {'status': 'okay',\n        #  'audience': 'localhost:8000',",
        "detail": "social_core.backends.persona",
        "documentation": {}
    },
    {
        "label": "PhabricatorOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.phabricator",
        "description": "social_core.backends.phabricator",
        "peekOfCode": "class PhabricatorOAuth2(BaseOAuth2):\n    \"\"\"Phabricator OAuth authentication backend\"\"\"\n    name = 'phabricator'\n    API_URL = 'https://secure.phabricator.com'\n    AUTHORIZATION_URL = 'https://secure.phabricator.com/oauthserver/auth/'\n    ACCESS_TOKEN_URL = 'https://secure.phabricator.com/oauthserver/token/'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    def api_url(self, path):\n        api_url = self.setting('API_URL') or self.API_URL",
        "detail": "social_core.backends.phabricator",
        "documentation": {}
    },
    {
        "label": "PinterestOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.pinterest",
        "description": "social_core.backends.pinterest",
        "peekOfCode": "class PinterestOAuth2(BaseOAuth2):\n    name = 'pinterest'\n    ID_KEY = 'user_id'\n    AUTHORIZATION_URL = 'https://api.pinterest.com/oauth/'\n    ACCESS_TOKEN_URL = 'https://api.pinterest.com/v1/oauth/token'\n    REDIRECT_STATE = False\n    ACCESS_TOKEN_METHOD = 'POST'\n    SSL_PROTOCOL = ssl.PROTOCOL_TLSv1\n    def user_data(self, access_token, *args, **kwargs):\n        response = self.get_json('https://api.pinterest.com/v1/me/',",
        "detail": "social_core.backends.pinterest",
        "documentation": {}
    },
    {
        "label": "PixelPinOpenIDConnect",
        "kind": 6,
        "importPath": "social_core.backends.pixelpin",
        "description": "social_core.backends.pixelpin",
        "peekOfCode": "class PixelPinOpenIDConnect(OpenIdConnectAuth):\n    \"\"\"PixelPin OpenID Connect authentication backend\"\"\"\n    name = 'pixelpin-openidconnect'\n    ID_KEY = 'sub'\n    AUTHORIZATION_URL = 'https://login.pixelpin.io/connect/authorize'\n    ACCESS_TOKEN_URL = 'https://login.pixelpin.io/connect/token'\n    OIDC_ENDPOINT = 'https://login.pixelpin.io'\n    JWKS_URI = 'https://login.pixelpin.io/.well-known/jwks'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REQUIRES_EMAIL_VALIDATION = False",
        "detail": "social_core.backends.pixelpin",
        "documentation": {}
    },
    {
        "label": "PocketAuth",
        "kind": 6,
        "importPath": "social_core.backends.pocket",
        "description": "social_core.backends.pocket",
        "peekOfCode": "class PocketAuth(BaseAuth):\n    name = 'pocket'\n    AUTHORIZATION_URL = 'https://getpocket.com/auth/authorize'\n    ACCESS_TOKEN_URL = 'https://getpocket.com/v3/oauth/authorize'\n    REQUEST_TOKEN_URL = 'https://getpocket.com/v3/oauth/request'\n    ID_KEY = 'username'\n    def get_json(self, url, *args, **kwargs):\n        headers = {'X-Accept': 'application/json'}\n        kwargs.update({'method': 'POST', 'headers': headers})\n        return super().get_json(url, *args, **kwargs)",
        "detail": "social_core.backends.pocket",
        "documentation": {}
    },
    {
        "label": "PodioOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.podio",
        "description": "social_core.backends.podio",
        "peekOfCode": "class PodioOAuth2(BaseOAuth2):\n    \"\"\"Podio OAuth authentication backend\"\"\"\n    name = 'podio'\n    AUTHORIZATION_URL = 'https://podio.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://podio.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [\n        ('access_token', 'access_token'),\n        ('token_type', 'token_type'),\n        ('expires_in', 'expires'),",
        "detail": "social_core.backends.podio",
        "documentation": {}
    },
    {
        "label": "ProfessionaliOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.professionali",
        "description": "social_core.backends.professionali",
        "peekOfCode": "class ProfessionaliOAuth2(BaseOAuth2):\n    name = 'professionali'\n    ID_KEY = 'user_id'\n    AUTHORIZATION_URL = 'https://api.professionali.ru/oauth/authorize.html'\n    ACCESS_TOKEN_URL = 'https://api.professionali.ru/oauth/getToken.json'\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [\n        ('avatar_big', 'avatar_big'),\n        ('link', 'link')\n    ]",
        "detail": "social_core.backends.professionali",
        "documentation": {}
    },
    {
        "label": "PushbulletOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.pushbullet",
        "description": "social_core.backends.pushbullet",
        "peekOfCode": "class PushbulletOAuth2(BaseOAuth2):\n    \"\"\"pushbullet OAuth authentication backend\"\"\"\n    name = 'pushbullet'\n    EXTRA_DATA = [('id', 'id')]\n    ID_KEY = 'username'\n    AUTHORIZATION_URL = 'https://www.pushbullet.com/authorize'\n    REQUEST_TOKEN_URL = 'https://api.pushbullet.com/oauth2/token'\n    ACCESS_TOKEN_URL = 'https://api.pushbullet.com/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    STATE_PARAMETER = False",
        "detail": "social_core.backends.pushbullet",
        "documentation": {}
    },
    {
        "label": "QiitaOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.qiita",
        "description": "social_core.backends.qiita",
        "peekOfCode": "class QiitaOAuth2(BaseOAuth2):\n    \"\"\"Qiita OAuth authentication backend\"\"\"\n    name = 'qiita'\n    AUTHORIZATION_URL = 'https://qiita.com/api/v2/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://qiita.com/api/v2/access_tokens'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ' '\n    REDIRECT_STATE = True\n    EXTRA_DATA = [\n        ('description', 'description'),",
        "detail": "social_core.backends.qiita",
        "documentation": {}
    },
    {
        "label": "QQOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.qq",
        "description": "social_core.backends.qq",
        "peekOfCode": "class QQOAuth2(BaseOAuth2):\n    name = 'qq'\n    ID_KEY = 'openid'\n    AUTHORIZE_URL = 'https://graph.qq.com/oauth2.0/authorize'\n    ACCESS_TOKEN_URL = 'https://graph.qq.com/oauth2.0/token'\n    AUTHORIZATION_URL = 'https://graph.qq.com/oauth2.0/authorize'\n    OPENID_URL = 'https://graph.qq.com/oauth2.0/me'\n    REDIRECT_STATE = False\n    EXTRA_DATA = [\n        ('nickname', 'username'),",
        "detail": "social_core.backends.qq",
        "documentation": {}
    },
    {
        "label": "QuizletOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.quizlet",
        "description": "social_core.backends.quizlet",
        "peekOfCode": "class QuizletOAuth2(BaseOAuth2):\n    \"\"\"Quizlet OAuth2\"\"\"\n    name = 'quizlet'\n    ID_KEY = 'user_id'\n    API_URL = 'https://api.quizlet.com/2.0/'\n    AUTHORIZATION_URL = 'https://quizlet.com/authorize'\n    ACCESS_TOKEN_URL = 'https://api.quizlet.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ' '\n    DEFAULT_SCOPE = ['read']",
        "detail": "social_core.backends.quizlet",
        "documentation": {}
    },
    {
        "label": "BaseRdio",
        "kind": 6,
        "importPath": "social_core.backends.rdio",
        "description": "social_core.backends.rdio",
        "peekOfCode": "class BaseRdio(OAuthAuth):\n    ID_KEY = 'key'\n    def get_user_details(self, response):\n        fullname, first_name, last_name = self.get_user_names(\n            fullname=response['displayName'],\n            first_name=response['firstName'],\n            last_name=response['lastName']\n        )\n        return {\n            'username': response['username'],",
        "detail": "social_core.backends.rdio",
        "documentation": {}
    },
    {
        "label": "RdioOAuth1",
        "kind": 6,
        "importPath": "social_core.backends.rdio",
        "description": "social_core.backends.rdio",
        "peekOfCode": "class RdioOAuth1(BaseRdio, BaseOAuth1):\n    \"\"\"Rdio OAuth authentication backend\"\"\"\n    name = 'rdio-oauth1'\n    REQUEST_TOKEN_URL = 'http://api.rdio.com/oauth/request_token'\n    AUTHORIZATION_URL = 'https://www.rdio.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'http://api.rdio.com/oauth/access_token'\n    EXTRA_DATA = [\n        ('key', 'rdio_id'),\n        ('icon', 'rdio_icon_url'),\n        ('url', 'rdio_profile_url'),",
        "detail": "social_core.backends.rdio",
        "documentation": {}
    },
    {
        "label": "RdioOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.rdio",
        "description": "social_core.backends.rdio",
        "peekOfCode": "class RdioOAuth2(BaseRdio, BaseOAuth2):\n    name = 'rdio-oauth2'\n    AUTHORIZATION_URL = 'https://www.rdio.com/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://www.rdio.com/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [\n        ('key', 'rdio_id'),\n        ('icon', 'rdio_icon_url'),\n        ('url', 'rdio_profile_url'),\n        ('username', 'rdio_username'),",
        "detail": "social_core.backends.rdio",
        "documentation": {}
    },
    {
        "label": "RDIO_API",
        "kind": 5,
        "importPath": "social_core.backends.rdio",
        "description": "social_core.backends.rdio",
        "peekOfCode": "RDIO_API = 'https://www.rdio.com/api/1/'\nclass BaseRdio(OAuthAuth):\n    ID_KEY = 'key'\n    def get_user_details(self, response):\n        fullname, first_name, last_name = self.get_user_names(\n            fullname=response['displayName'],\n            first_name=response['firstName'],\n            last_name=response['lastName']\n        )\n        return {",
        "detail": "social_core.backends.rdio",
        "documentation": {}
    },
    {
        "label": "ReadabilityOAuth",
        "kind": 6,
        "importPath": "social_core.backends.readability",
        "description": "social_core.backends.readability",
        "peekOfCode": "class ReadabilityOAuth(BaseOAuth1):\n    \"\"\"Readability OAuth authentication backend\"\"\"\n    name = 'readability'\n    ID_KEY = 'username'\n    AUTHORIZATION_URL = f'{READABILITY_API}/oauth/authorize/'\n    REQUEST_TOKEN_URL = f'{READABILITY_API}/oauth/request_token/'\n    ACCESS_TOKEN_URL = f'{READABILITY_API}/oauth/access_token/'\n    EXTRA_DATA = [('date_joined', 'date_joined'),\n                  ('kindle_email_address', 'kindle_email_address'),\n                  ('avatar_url', 'avatar_url'),",
        "detail": "social_core.backends.readability",
        "documentation": {}
    },
    {
        "label": "READABILITY_API",
        "kind": 5,
        "importPath": "social_core.backends.readability",
        "description": "social_core.backends.readability",
        "peekOfCode": "READABILITY_API = 'https://www.readability.com/api/rest/v1'\nclass ReadabilityOAuth(BaseOAuth1):\n    \"\"\"Readability OAuth authentication backend\"\"\"\n    name = 'readability'\n    ID_KEY = 'username'\n    AUTHORIZATION_URL = f'{READABILITY_API}/oauth/authorize/'\n    REQUEST_TOKEN_URL = f'{READABILITY_API}/oauth/request_token/'\n    ACCESS_TOKEN_URL = f'{READABILITY_API}/oauth/access_token/'\n    EXTRA_DATA = [('date_joined', 'date_joined'),\n                  ('kindle_email_address', 'kindle_email_address'),",
        "detail": "social_core.backends.readability",
        "documentation": {}
    },
    {
        "label": "RedditOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.reddit",
        "description": "social_core.backends.reddit",
        "peekOfCode": "class RedditOAuth2(BaseOAuth2):\n    \"\"\"Reddit OAuth2 authentication backend\"\"\"\n    name = 'reddit'\n    AUTHORIZATION_URL = 'https://ssl.reddit.com/api/v1/authorize'\n    ACCESS_TOKEN_URL = 'https://ssl.reddit.com/api/v1/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REFRESH_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    SCOPE_SEPARATOR = ','\n    DEFAULT_SCOPE = ['identity']",
        "detail": "social_core.backends.reddit",
        "documentation": {}
    },
    {
        "label": "RunKeeperOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.runkeeper",
        "description": "social_core.backends.runkeeper",
        "peekOfCode": "class RunKeeperOAuth2(BaseOAuth2):\n    \"\"\"RunKeeper OAuth authentication backend\"\"\"\n    name = 'runkeeper'\n    AUTHORIZATION_URL = 'https://runkeeper.com/apps/authorize'\n    ACCESS_TOKEN_URL = 'https://runkeeper.com/apps/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [\n        ('userID', 'id'),\n    ]\n    def get_user_id(self, details, response):",
        "detail": "social_core.backends.runkeeper",
        "documentation": {}
    },
    {
        "label": "SalesforceOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.salesforce",
        "description": "social_core.backends.salesforce",
        "peekOfCode": "class SalesforceOAuth2(BaseOAuth2):\n    \"\"\"Salesforce OAuth2 authentication backend\"\"\"\n    name = 'salesforce-oauth2'\n    AUTHORIZATION_URL = \\\n        'https://login.salesforce.com/services/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://login.salesforce.com/services/oauth2/token'\n    REVOKE_TOKEN_URL = 'https://login.salesforce.com/services/oauth2/revoke'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REFRESH_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ' '",
        "detail": "social_core.backends.salesforce",
        "documentation": {}
    },
    {
        "label": "SalesforceOAuth2Sandbox",
        "kind": 6,
        "importPath": "social_core.backends.salesforce",
        "description": "social_core.backends.salesforce",
        "peekOfCode": "class SalesforceOAuth2Sandbox(SalesforceOAuth2):\n    \"\"\"Salesforce OAuth2 authentication testing backend\"\"\"\n    name = 'salesforce-oauth2-sandbox'\n    AUTHORIZATION_URL = 'https://test.salesforce.com/services/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://test.salesforce.com/services/oauth2/token'\n    REVOKE_TOKEN_URL = 'https://test.salesforce.com/services/oauth2/revoke'",
        "detail": "social_core.backends.salesforce",
        "documentation": {}
    },
    {
        "label": "SAMLIdentityProvider",
        "kind": 6,
        "importPath": "social_core.backends.saml",
        "description": "social_core.backends.saml",
        "peekOfCode": "class SAMLIdentityProvider:\n    \"\"\"Wrapper around configuration for a SAML Identity provider\"\"\"\n    def __init__(self, name, **kwargs):\n        \"\"\"Load and parse configuration\"\"\"\n        self.name = name\n        # name should be a slug and must not contain a colon, which\n        # could conflict with uid prefixing:\n        assert ':' not in self.name and ' ' not in self.name, \\\n            'IdP \"name\" should be a slug (short, no spaces)'\n        self.conf = kwargs",
        "detail": "social_core.backends.saml",
        "documentation": {}
    },
    {
        "label": "DummySAMLIdentityProvider",
        "kind": 6,
        "importPath": "social_core.backends.saml",
        "description": "social_core.backends.saml",
        "peekOfCode": "class DummySAMLIdentityProvider(SAMLIdentityProvider):\n    \"\"\"\n    A placeholder IdP used when we must specify something, e.g. when\n    generating SP metadata.\n    If OneLogin_Saml2_Auth is modified to not always require IdP\n    config, this can be removed.\n    \"\"\"\n    def __init__(self):\n        super().__init__(\n            'dummy',",
        "detail": "social_core.backends.saml",
        "documentation": {}
    },
    {
        "label": "SAMLAuth",
        "kind": 6,
        "importPath": "social_core.backends.saml",
        "description": "social_core.backends.saml",
        "peekOfCode": "class SAMLAuth(BaseAuth):\n    \"\"\"\n    PSA Backend that implements SAML 2.0 Service Provider (SP) functionality.\n    Unlike all of the other backends, this one can be configured to work with\n    many identity providers (IdPs). For example, a University that belongs to a\n    Shibboleth federation may support authentication via ~100 partner\n    universities. Also, the IdP configuration can be changed at runtime if you\n    require that functionality - just subclass this and override `get_idp()`.\n    Several settings are required. Here's an example:\n    SOCIAL_AUTH_SAML_SP_ENTITY_ID = \"https://saml.example.com/\"",
        "detail": "social_core.backends.saml",
        "documentation": {}
    },
    {
        "label": "OID_COMMON_NAME",
        "kind": 5,
        "importPath": "social_core.backends.saml",
        "description": "social_core.backends.saml",
        "peekOfCode": "OID_COMMON_NAME = 'urn:oid:2.5.4.3'\nOID_EDU_PERSON_PRINCIPAL_NAME = 'urn:oid:1.3.6.1.4.1.5923.1.1.1.6'\nOID_EDU_PERSON_ENTITLEMENT = 'urn:oid:1.3.6.1.4.1.5923.1.1.1.7'\nOID_GIVEN_NAME = 'urn:oid:2.5.4.42'\nOID_MAIL = 'urn:oid:0.9.2342.19200300.100.1.3'\nOID_SURNAME = 'urn:oid:2.5.4.4'\nOID_USERID = 'urn:oid:0.9.2342.19200300.100.1.1'\nclass SAMLIdentityProvider:\n    \"\"\"Wrapper around configuration for a SAML Identity provider\"\"\"\n    def __init__(self, name, **kwargs):",
        "detail": "social_core.backends.saml",
        "documentation": {}
    },
    {
        "label": "OID_EDU_PERSON_PRINCIPAL_NAME",
        "kind": 5,
        "importPath": "social_core.backends.saml",
        "description": "social_core.backends.saml",
        "peekOfCode": "OID_EDU_PERSON_PRINCIPAL_NAME = 'urn:oid:1.3.6.1.4.1.5923.1.1.1.6'\nOID_EDU_PERSON_ENTITLEMENT = 'urn:oid:1.3.6.1.4.1.5923.1.1.1.7'\nOID_GIVEN_NAME = 'urn:oid:2.5.4.42'\nOID_MAIL = 'urn:oid:0.9.2342.19200300.100.1.3'\nOID_SURNAME = 'urn:oid:2.5.4.4'\nOID_USERID = 'urn:oid:0.9.2342.19200300.100.1.1'\nclass SAMLIdentityProvider:\n    \"\"\"Wrapper around configuration for a SAML Identity provider\"\"\"\n    def __init__(self, name, **kwargs):\n        \"\"\"Load and parse configuration\"\"\"",
        "detail": "social_core.backends.saml",
        "documentation": {}
    },
    {
        "label": "OID_EDU_PERSON_ENTITLEMENT",
        "kind": 5,
        "importPath": "social_core.backends.saml",
        "description": "social_core.backends.saml",
        "peekOfCode": "OID_EDU_PERSON_ENTITLEMENT = 'urn:oid:1.3.6.1.4.1.5923.1.1.1.7'\nOID_GIVEN_NAME = 'urn:oid:2.5.4.42'\nOID_MAIL = 'urn:oid:0.9.2342.19200300.100.1.3'\nOID_SURNAME = 'urn:oid:2.5.4.4'\nOID_USERID = 'urn:oid:0.9.2342.19200300.100.1.1'\nclass SAMLIdentityProvider:\n    \"\"\"Wrapper around configuration for a SAML Identity provider\"\"\"\n    def __init__(self, name, **kwargs):\n        \"\"\"Load and parse configuration\"\"\"\n        self.name = name",
        "detail": "social_core.backends.saml",
        "documentation": {}
    },
    {
        "label": "OID_GIVEN_NAME",
        "kind": 5,
        "importPath": "social_core.backends.saml",
        "description": "social_core.backends.saml",
        "peekOfCode": "OID_GIVEN_NAME = 'urn:oid:2.5.4.42'\nOID_MAIL = 'urn:oid:0.9.2342.19200300.100.1.3'\nOID_SURNAME = 'urn:oid:2.5.4.4'\nOID_USERID = 'urn:oid:0.9.2342.19200300.100.1.1'\nclass SAMLIdentityProvider:\n    \"\"\"Wrapper around configuration for a SAML Identity provider\"\"\"\n    def __init__(self, name, **kwargs):\n        \"\"\"Load and parse configuration\"\"\"\n        self.name = name\n        # name should be a slug and must not contain a colon, which",
        "detail": "social_core.backends.saml",
        "documentation": {}
    },
    {
        "label": "OID_MAIL",
        "kind": 5,
        "importPath": "social_core.backends.saml",
        "description": "social_core.backends.saml",
        "peekOfCode": "OID_MAIL = 'urn:oid:0.9.2342.19200300.100.1.3'\nOID_SURNAME = 'urn:oid:2.5.4.4'\nOID_USERID = 'urn:oid:0.9.2342.19200300.100.1.1'\nclass SAMLIdentityProvider:\n    \"\"\"Wrapper around configuration for a SAML Identity provider\"\"\"\n    def __init__(self, name, **kwargs):\n        \"\"\"Load and parse configuration\"\"\"\n        self.name = name\n        # name should be a slug and must not contain a colon, which\n        # could conflict with uid prefixing:",
        "detail": "social_core.backends.saml",
        "documentation": {}
    },
    {
        "label": "OID_SURNAME",
        "kind": 5,
        "importPath": "social_core.backends.saml",
        "description": "social_core.backends.saml",
        "peekOfCode": "OID_SURNAME = 'urn:oid:2.5.4.4'\nOID_USERID = 'urn:oid:0.9.2342.19200300.100.1.1'\nclass SAMLIdentityProvider:\n    \"\"\"Wrapper around configuration for a SAML Identity provider\"\"\"\n    def __init__(self, name, **kwargs):\n        \"\"\"Load and parse configuration\"\"\"\n        self.name = name\n        # name should be a slug and must not contain a colon, which\n        # could conflict with uid prefixing:\n        assert ':' not in self.name and ' ' not in self.name, \\",
        "detail": "social_core.backends.saml",
        "documentation": {}
    },
    {
        "label": "OID_USERID",
        "kind": 5,
        "importPath": "social_core.backends.saml",
        "description": "social_core.backends.saml",
        "peekOfCode": "OID_USERID = 'urn:oid:0.9.2342.19200300.100.1.1'\nclass SAMLIdentityProvider:\n    \"\"\"Wrapper around configuration for a SAML Identity provider\"\"\"\n    def __init__(self, name, **kwargs):\n        \"\"\"Load and parse configuration\"\"\"\n        self.name = name\n        # name should be a slug and must not contain a colon, which\n        # could conflict with uid prefixing:\n        assert ':' not in self.name and ' ' not in self.name, \\\n            'IdP \"name\" should be a slug (short, no spaces)'",
        "detail": "social_core.backends.saml",
        "documentation": {}
    },
    {
        "label": "SciStarterOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.scistarter",
        "description": "social_core.backends.scistarter",
        "peekOfCode": "class SciStarterOAuth2(BaseOAuth2):\n    name = 'scistarter'\n    ID_KEY = 'email'\n    SCOPE_PARAMETER_NAME = 'scope'\n    DEFAULT_SCOPE = ['login', 'extensive']\n    SCOPE_SEPARATOR = ' '\n    AUTHORIZATION_URL = 'https://scistarter.com/authorize'\n    ACCESS_TOKEN_URL = 'https://scistarter.com/token?key={key}'\n    ACCESS_TOKEN_METHOD = 'POST'\n    USER_ACCESS_URL = \\",
        "detail": "social_core.backends.scistarter",
        "documentation": {}
    },
    {
        "label": "ShimmeringOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.shimmering",
        "description": "social_core.backends.shimmering",
        "peekOfCode": "class ShimmeringOAuth2(BaseOAuth2):\n    \"\"\"Shimmering Verify OAuth2 authentication backend\"\"\"\n    name = 'shimmering'\n    ID_KEY = 'id'\n    AUTHORIZATION_URL = 'http://developers.shimmeringverify.com/o/authorize/'\n    ACCESS_TOKEN_URL = 'http://developers.shimmeringverify.com/o/token/'\n    ACCESS_TOKEN_METHOD = 'POST'\n    def get_user_details(self, response):\n        \"\"\"Return user details from Shimmering\"\"\"\n        first_name = response.get('first_name')",
        "detail": "social_core.backends.shimmering",
        "documentation": {}
    },
    {
        "label": "ShopifyOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.shopify",
        "description": "social_core.backends.shopify",
        "peekOfCode": "class ShopifyOAuth2(BaseOAuth2):\n    \"\"\"Shopify OAuth2 authentication backend\"\"\"\n    name = 'shopify'\n    ID_KEY = 'shop'\n    EXTRA_DATA = [\n        ('shop', 'shop'),\n        ('website', 'website'),\n        ('expires', 'expires')\n    ]\n    REDIRECT_STATE = False",
        "detail": "social_core.backends.shopify",
        "documentation": {}
    },
    {
        "label": "SimpleLoginOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.simplelogin",
        "description": "social_core.backends.simplelogin",
        "peekOfCode": "class SimpleLoginOAuth2(BaseOAuth2):\n    \"\"\"SimpleLogin OAuth authentication backend\"\"\"\n    name = 'simplelogin'\n    AUTHORIZATION_URL = 'https://app.simplelogin.io/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://app.simplelogin.io/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    STATE_PARAMETER = True\n    SEND_USER_AGENT = True\n    EXTRA_DATA = [",
        "detail": "social_core.backends.simplelogin",
        "documentation": {}
    },
    {
        "label": "SketchfabOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.sketchfab",
        "description": "social_core.backends.sketchfab",
        "peekOfCode": "class SketchfabOAuth2(BaseOAuth2):\n    name = 'sketchfab'\n    ID_KEY = 'uid'\n    AUTHORIZATION_URL = 'https://sketchfab.com/oauth2/authorize/'\n    ACCESS_TOKEN_URL = 'https://sketchfab.com/oauth2/token/'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    REQUIRES_EMAIL_VALIDATION = False\n    EXTRA_DATA = [\n        ('username', 'username'),",
        "detail": "social_core.backends.sketchfab",
        "documentation": {}
    },
    {
        "label": "SkyrockOAuth",
        "kind": 6,
        "importPath": "social_core.backends.skyrock",
        "description": "social_core.backends.skyrock",
        "peekOfCode": "class SkyrockOAuth(BaseOAuth1):\n    \"\"\"Skyrock OAuth authentication backend\"\"\"\n    name = 'skyrock'\n    ID_KEY = 'id_user'\n    AUTHORIZATION_URL = 'https://api.skyrock.com/v2/oauth/authenticate'\n    REQUEST_TOKEN_URL = 'https://api.skyrock.com/v2/oauth/initiate'\n    ACCESS_TOKEN_URL = 'https://api.skyrock.com/v2/oauth/token'\n    EXTRA_DATA = [('id', 'id')]\n    def get_user_details(self, response):\n        \"\"\"Return user details from Skyrock account\"\"\"",
        "detail": "social_core.backends.skyrock",
        "documentation": {}
    },
    {
        "label": "SlackOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.slack",
        "description": "social_core.backends.slack",
        "peekOfCode": "class SlackOAuth2(BaseOAuth2):\n    \"\"\"Slack OAuth authentication backend\"\"\"\n    name = 'slack'\n    AUTHORIZATION_URL = 'https://slack.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://slack.com/api/oauth.access'\n    ACCESS_TOKEN_METHOD = 'POST'\n    DEFAULT_SCOPE = ['identity.basic', 'identity.email']\n    SCOPE_SEPARATOR = ','\n    REDIRECT_STATE = False\n    EXTRA_DATA = [",
        "detail": "social_core.backends.slack",
        "documentation": {}
    },
    {
        "label": "SoundcloudOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.soundcloud",
        "description": "social_core.backends.soundcloud",
        "peekOfCode": "class SoundcloudOAuth2(BaseOAuth2):\n    \"\"\"Soundcloud OAuth authentication backend\"\"\"\n    name = 'soundcloud'\n    AUTHORIZATION_URL = 'https://soundcloud.com/connect'\n    ACCESS_TOKEN_URL = 'https://api.soundcloud.com/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ','\n    REDIRECT_STATE = False\n    EXTRA_DATA = [\n        ('id', 'id'),",
        "detail": "social_core.backends.soundcloud",
        "documentation": {}
    },
    {
        "label": "SpotifyOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.spotify",
        "description": "social_core.backends.spotify",
        "peekOfCode": "class SpotifyOAuth2(BaseOAuth2):\n    \"\"\"Spotify OAuth2 authentication backend\"\"\"\n    name = 'spotify'\n    ID_KEY = 'id'\n    AUTHORIZATION_URL = 'https://accounts.spotify.com/authorize'\n    ACCESS_TOKEN_URL = 'https://accounts.spotify.com/api/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ' '\n    REDIRECT_STATE = False\n    EXTRA_DATA = [",
        "detail": "social_core.backends.spotify",
        "documentation": {}
    },
    {
        "label": "StackoverflowOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.stackoverflow",
        "description": "social_core.backends.stackoverflow",
        "peekOfCode": "class StackoverflowOAuth2(BaseOAuth2):\n    \"\"\"Stackoverflow OAuth2 authentication backend\"\"\"\n    name = 'stackoverflow'\n    ID_KEY = 'user_id'\n    AUTHORIZATION_URL = 'https://stackexchange.com/oauth'\n    ACCESS_TOKEN_URL = 'https://stackexchange.com/oauth/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ','\n    EXTRA_DATA = [\n        ('id', 'id'),",
        "detail": "social_core.backends.stackoverflow",
        "documentation": {}
    },
    {
        "label": "SteamOpenId",
        "kind": 6,
        "importPath": "social_core.backends.steam",
        "description": "social_core.backends.steam",
        "peekOfCode": "class SteamOpenId(OpenIdAuth):\n    name = 'steam'\n    URL = 'https://steamcommunity.com/openid'\n    def get_user_id(self, details, response):\n        \"\"\"Return user unique id provided by service\"\"\"\n        return self._user_id(response)\n    def get_user_details(self, response):\n        player = self.get_json(USER_INFO, params={\n            'key': self.setting('API_KEY'),\n            'steamids': self._user_id(response)",
        "detail": "social_core.backends.steam",
        "documentation": {}
    },
    {
        "label": "USER_INFO",
        "kind": 5,
        "importPath": "social_core.backends.steam",
        "description": "social_core.backends.steam",
        "peekOfCode": "USER_INFO = 'http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?'\nclass SteamOpenId(OpenIdAuth):\n    name = 'steam'\n    URL = 'https://steamcommunity.com/openid'\n    def get_user_id(self, details, response):\n        \"\"\"Return user unique id provided by service\"\"\"\n        return self._user_id(response)\n    def get_user_details(self, response):\n        player = self.get_json(USER_INFO, params={\n            'key': self.setting('API_KEY'),",
        "detail": "social_core.backends.steam",
        "documentation": {}
    },
    {
        "label": "StocktwitsOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.stocktwits",
        "description": "social_core.backends.stocktwits",
        "peekOfCode": "class StocktwitsOAuth2(BaseOAuth2):\n    \"\"\"Stockwiths OAuth2 backend\"\"\"\n    name = 'stocktwits'\n    AUTHORIZATION_URL = 'https://api.stocktwits.com/api/2/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://api.stocktwits.com/api/2/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ','\n    DEFAULT_SCOPE = ['read', 'publish_messages', 'publish_watch_lists',\n                     'follow_users', 'follow_stocks']\n    def get_user_id(self, details, response):",
        "detail": "social_core.backends.stocktwits",
        "documentation": {}
    },
    {
        "label": "StravaOAuth",
        "kind": 6,
        "importPath": "social_core.backends.strava",
        "description": "social_core.backends.strava",
        "peekOfCode": "class StravaOAuth(BaseOAuth2):\n    name = 'strava'\n    AUTHORIZATION_URL = 'https://www.strava.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://www.strava.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    # Strava doesn't check for parameters in redirect_uri and directly appends\n    # the auth parameters to it, ending with an URL like:\n    # http://example.com/complete/strava?redirect_state=xxx?code=xxx&state=xxx\n    # Check issue #259 for details.\n    REDIRECT_STATE = False",
        "detail": "social_core.backends.strava",
        "documentation": {}
    },
    {
        "label": "StripeOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.stripe",
        "description": "social_core.backends.stripe",
        "peekOfCode": "class StripeOAuth2(BaseOAuth2):\n    \"\"\"Stripe OAuth2 authentication backend\"\"\"\n    name = 'stripe'\n    ID_KEY = 'stripe_user_id'\n    AUTHORIZATION_URL = 'https://connect.stripe.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://connect.stripe.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    EXTRA_DATA = [\n        ('stripe_publishable_key', 'stripe_publishable_key'),",
        "detail": "social_core.backends.stripe",
        "documentation": {}
    },
    {
        "label": "SurveyMonkeyOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.surveymonkey",
        "description": "social_core.backends.surveymonkey",
        "peekOfCode": "class SurveyMonkeyOAuth2(BaseOAuth2):\n    \"\"\"SurveyMonkey OAuth2 authentication backend\"\"\"\n    name = 'surveymonkey'\n    AUTHORIZATION_URL = 'https://api.surveymonkey.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://api.surveymonkey.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    USER_DATA_URL = '/v3/users/me'\n    STATE_PARAMETER = False\n    REDIRECT_STATE = False\n    EXTRA_DATA = [",
        "detail": "social_core.backends.surveymonkey",
        "documentation": {}
    },
    {
        "label": "OpenSUSEOpenId",
        "kind": 6,
        "importPath": "social_core.backends.suse",
        "description": "social_core.backends.suse",
        "peekOfCode": "class OpenSUSEOpenId(OpenIdAuth):\n    name = 'opensuse'\n    URL = 'https://www.opensuse.org/openid/user/'\n    def get_user_id(self, details, response):\n        \"\"\"\n        Return user unique id provided by service. For openSUSE\n        the nickname is original.\n        \"\"\"\n        return details['nickname']",
        "detail": "social_core.backends.suse",
        "documentation": {}
    },
    {
        "label": "TAOBAOAuth",
        "kind": 6,
        "importPath": "social_core.backends.taobao",
        "description": "social_core.backends.taobao",
        "peekOfCode": "class TAOBAOAuth(BaseOAuth2):\n    \"\"\"Taobao OAuth authentication mechanism\"\"\"\n    name = 'taobao'\n    ID_KEY = 'taobao_user_id'\n    ACCESS_TOKEN_METHOD = 'POST'\n    AUTHORIZATION_URL = 'https://oauth.taobao.com/authorize'\n    ACCESS_TOKEN_URL = 'https://oauth.taobao.com/token'\n    def user_data(self, access_token, *args, **kwargs):\n        \"\"\"Return user data provided\"\"\"\n        try:",
        "detail": "social_core.backends.taobao",
        "documentation": {}
    },
    {
        "label": "TelegramAuth",
        "kind": 6,
        "importPath": "social_core.backends.telegram",
        "description": "social_core.backends.telegram",
        "peekOfCode": "class TelegramAuth(BaseAuth):\n    name = 'telegram'\n    ID_KEY = 'id'\n    def verify_data(self, response):\n        bot_token = self.setting('BOT_TOKEN')\n        if bot_token is None:\n            raise AuthMissingParameter('telegram',\n                                       'SOCIAL_AUTH_TELEGRAM_BOT_TOKEN')\n        received_hash_string = response.get('hash')\n        auth_date = response.get('auth_date')",
        "detail": "social_core.backends.telegram",
        "documentation": {}
    },
    {
        "label": "ThisIsMyJamOAuth1",
        "kind": 6,
        "importPath": "social_core.backends.thisismyjam",
        "description": "social_core.backends.thisismyjam",
        "peekOfCode": "class ThisIsMyJamOAuth1(BaseOAuth1):\n    \"\"\"ThisIsMyJam OAuth1 authentication backend\"\"\"\n    name = 'thisismyjam'\n    REQUEST_TOKEN_URL = 'http://www.thisismyjam.com/oauth/request_token'\n    AUTHORIZATION_URL = 'http://www.thisismyjam.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'http://www.thisismyjam.com/oauth/access_token'\n    REDIRECT_URI_PARAMETER_NAME = 'oauth_callback'\n    def get_user_details(self, response):\n        \"\"\"Return user details from ThisIsMyJam account\"\"\"\n        info = response.get('person')",
        "detail": "social_core.backends.thisismyjam",
        "documentation": {}
    },
    {
        "label": "TrelloOAuth",
        "kind": 6,
        "importPath": "social_core.backends.trello",
        "description": "social_core.backends.trello",
        "peekOfCode": "class TrelloOAuth(BaseOAuth1):\n    \"\"\"Trello OAuth authentication backend\"\"\"\n    name = 'trello'\n    ID_KEY = 'username'\n    AUTHORIZATION_URL = 'https://trello.com/1/OAuthAuthorizeToken'\n    REQUEST_TOKEN_URL = 'https://trello.com/1/OAuthGetRequestToken'\n    ACCESS_TOKEN_URL = 'https://trello.com/1/OAuthGetAccessToken'\n    EXTRA_DATA = [\n        ('username', 'username'),\n        ('email', 'email'),",
        "detail": "social_core.backends.trello",
        "documentation": {}
    },
    {
        "label": "TripItOAuth",
        "kind": 6,
        "importPath": "social_core.backends.tripit",
        "description": "social_core.backends.tripit",
        "peekOfCode": "class TripItOAuth(BaseOAuth1):\n    \"\"\"TripIt OAuth authentication backend\"\"\"\n    name = 'tripit'\n    AUTHORIZATION_URL = 'https://www.tripit.com/oauth/authorize'\n    REQUEST_TOKEN_URL = 'https://api.tripit.com/oauth/request_token'\n    ACCESS_TOKEN_URL = 'https://api.tripit.com/oauth/access_token'\n    EXTRA_DATA = [('screen_name', 'screen_name')]\n    def get_user_details(self, response):\n        \"\"\"Return user details from TripIt account\"\"\"\n        fullname, first_name, last_name = self.get_user_names(response['name'])",
        "detail": "social_core.backends.tripit",
        "documentation": {}
    },
    {
        "label": "TumblrOAuth",
        "kind": 6,
        "importPath": "social_core.backends.tumblr",
        "description": "social_core.backends.tumblr",
        "peekOfCode": "class TumblrOAuth(BaseOAuth1):\n    name = 'tumblr'\n    ID_KEY = 'name'\n    AUTHORIZATION_URL = 'http://www.tumblr.com/oauth/authorize'\n    REQUEST_TOKEN_URL = 'http://www.tumblr.com/oauth/request_token'\n    REQUEST_TOKEN_METHOD = 'POST'\n    ACCESS_TOKEN_URL = 'http://www.tumblr.com/oauth/access_token'\n    def get_user_id(self, details, response):\n        return response['response']['user'][self.ID_KEY]\n    def get_user_details(self, response):",
        "detail": "social_core.backends.tumblr",
        "documentation": {}
    },
    {
        "label": "TwilioAuth",
        "kind": 6,
        "importPath": "social_core.backends.twilio",
        "description": "social_core.backends.twilio",
        "peekOfCode": "class TwilioAuth(BaseAuth):\n    name = 'twilio'\n    ID_KEY = 'AccountSid'\n    def get_user_details(self, response):\n        \"\"\"Return twilio details, Twilio only provides AccountSID as\n        parameters.\"\"\"\n        # /complete/twilio/?AccountSid=ACc65ea16c9ebd4d4684edf814995b27e\n        return {'username': response['AccountSid'],\n                'email': '',\n                'fullname': '',",
        "detail": "social_core.backends.twilio",
        "documentation": {}
    },
    {
        "label": "TwitchOpenIdConnect",
        "kind": 6,
        "importPath": "social_core.backends.twitch",
        "description": "social_core.backends.twitch",
        "peekOfCode": "class TwitchOpenIdConnect(OpenIdConnectAuth):\n    \"\"\"Twitch OpenID Connect authentication backend\"\"\"\n    name = 'twitch'\n    USERNAME_KEY = 'preferred_username'\n    OIDC_ENDPOINT = 'https://id.twitch.tv/oauth2'\n    DEFAULT_SCOPE = ['openid', 'user:read:email']\n    TWITCH_CLAIMS = '{\"id_token\":{\"email\": null,\"email_verified\":null,\"preferred_username\":null}}'\n    def auth_params(self, state=None):\n        params = super().auth_params(state)\n        # Twitch uses a non-compliant OpenID implementation where the claims must be passed as a param",
        "detail": "social_core.backends.twitch",
        "documentation": {}
    },
    {
        "label": "TwitchOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.twitch",
        "description": "social_core.backends.twitch",
        "peekOfCode": "class TwitchOAuth2(BaseOAuth2):\n    \"\"\"Twitch OAuth authentication backend\"\"\"\n    name = 'twitch'\n    ID_KEY = '_id'\n    AUTHORIZATION_URL = 'https://id.twitch.tv/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://id.twitch.tv/oauth2/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    DEFAULT_SCOPE = ['user:read:email']\n    REDIRECT_STATE = False\n    def get_user_id(self, details, response):",
        "detail": "social_core.backends.twitch",
        "documentation": {}
    },
    {
        "label": "TwitterOAuth",
        "kind": 6,
        "importPath": "social_core.backends.twitter",
        "description": "social_core.backends.twitter",
        "peekOfCode": "class TwitterOAuth(BaseOAuth1):\n    \"\"\"Twitter OAuth authentication backend\"\"\"\n    name = 'twitter'\n    EXTRA_DATA = [('id', 'id')]\n    REQUEST_TOKEN_METHOD = 'POST'\n    ACCESS_TOKEN_METHOD = 'POST'\n    AUTHORIZATION_URL = 'https://api.twitter.com/oauth/authenticate'\n    REQUEST_TOKEN_URL = 'https://api.twitter.com/oauth/request_token'\n    ACCESS_TOKEN_URL = 'https://api.twitter.com/oauth/access_token'\n    REDIRECT_STATE = True",
        "detail": "social_core.backends.twitter",
        "documentation": {}
    },
    {
        "label": "UberOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.uber",
        "description": "social_core.backends.uber",
        "peekOfCode": "class UberOAuth2(BaseOAuth2):\n    name = 'uber'\n    ID_KEY = 'uuid'\n    SCOPE_SEPARATOR = ' '\n    AUTHORIZATION_URL = 'https://login.uber.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://login.uber.com/oauth/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    def auth_complete_credentials(self):\n        return self.get_key_and_secret()\n    def get_user_details(self, response):",
        "detail": "social_core.backends.uber",
        "documentation": {}
    },
    {
        "label": "UbuntuOpenId",
        "kind": 6,
        "importPath": "social_core.backends.ubuntu",
        "description": "social_core.backends.ubuntu",
        "peekOfCode": "class UbuntuOpenId(OpenIdAuth):\n    name = 'ubuntu'\n    URL = 'https://login.ubuntu.com'\n    def get_user_id(self, details, response):\n        \"\"\"\n        Return user unique id provided by service. For Ubuntu One\n        the nickname should be original.\n        \"\"\"\n        return details['nickname']",
        "detail": "social_core.backends.ubuntu",
        "documentation": {}
    },
    {
        "label": "UdataBaseOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.udata",
        "description": "social_core.backends.udata",
        "peekOfCode": "class UdataBaseOAuth2(BaseOAuth2):\n    \"\"\"Udata base OAuth authentication backend.\"\"\"\n    SCOPE_SEPARATOR = ','\n    REDIRECT_STATE = False\n    DEFAULT_SCOPE = ['default']\n    ACCESS_TOKEN_METHOD = 'POST'\n    def get_user_details(self, response):\n        \"\"\"Return user details from Udata account.\"\"\"\n        return {\n            'username': response.get('first_name'),",
        "detail": "social_core.backends.udata",
        "documentation": {}
    },
    {
        "label": "DatagouvfrOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.udata",
        "description": "social_core.backends.udata",
        "peekOfCode": "class DatagouvfrOAuth2(UdataBaseOAuth2):\n    \"\"\"Datagouvfr OAuth authentication backend.\"\"\"\n    name = 'datagouv'\n    ACCESS_TOKEN_URL = 'https://www.data.gouv.fr/oauth/token'\n    AUTHORIZATION_URL = 'https://www.data.gouv.fr/oauth/authorize'\n    USER_DATA_URL = 'https://www.data.gouv.fr/api/1/me/'",
        "detail": "social_core.backends.udata",
        "documentation": {}
    },
    {
        "label": "UniverseOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.universe",
        "description": "social_core.backends.universe",
        "peekOfCode": "class UniverseOAuth2(BaseOAuth2):\n    \"\"\"Universe Ticketing OAuth2 authentication backend\"\"\"\n    name = 'universe'\n    AUTHORIZATION_URL = 'https://www.universe.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://www.universe.com/oauth/token'\n    BASE_API_URL = 'https://www.universe.com/api'\n    USER_INFO_URL = BASE_API_URL + '/v2/current_user'\n    ACCESS_TOKEN_METHOD = 'POST'\n    STATE_PARAMETER = True\n    REDIRECT_STATE = True",
        "detail": "social_core.backends.universe",
        "documentation": {}
    },
    {
        "label": "UntappdOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.untappd",
        "description": "social_core.backends.untappd",
        "peekOfCode": "class UntappdOAuth2(BaseOAuth2):\n    \"\"\"Untappd OAuth2 authentication backend\"\"\"\n    name = 'untappd'\n    AUTHORIZATION_URL = 'https://untappd.com/oauth/authenticate/'\n    ACCESS_TOKEN_URL = 'https://untappd.com/oauth/authorize/'\n    BASE_API_URL = 'https://api.untappd.com'\n    USER_INFO_URL = BASE_API_URL + '/v4/user/info/'\n    ACCESS_TOKEN_METHOD = 'GET'\n    STATE_PARAMETER = False\n    REDIRECT_STATE = False",
        "detail": "social_core.backends.untappd",
        "documentation": {}
    },
    {
        "label": "UpworkOAuth",
        "kind": 6,
        "importPath": "social_core.backends.upwork",
        "description": "social_core.backends.upwork",
        "peekOfCode": "class UpworkOAuth(BaseOAuth1):\n    \"\"\"Upwork OAuth authentication backend\"\"\"\n    name = 'upwork'\n    ID_KEY = 'id'\n    AUTHORIZATION_URL = 'https://www.upwork.com/services/api/auth'\n    REQUEST_TOKEN_URL = \\\n        'https://www.upwork.com/api/auth/v1/oauth/token/request'\n    REQUEST_TOKEN_METHOD = 'POST'\n    ACCESS_TOKEN_URL = 'https://www.upwork.com/api/auth/v1/oauth/token/access'\n    ACCESS_TOKEN_METHOD = 'POST'",
        "detail": "social_core.backends.upwork",
        "documentation": {}
    },
    {
        "label": "UsernameAuth",
        "kind": 6,
        "importPath": "social_core.backends.username",
        "description": "social_core.backends.username",
        "peekOfCode": "class UsernameAuth(LegacyAuth):\n    name = 'username'\n    ID_KEY = 'username'\n    EXTRA_DATA = ['username']",
        "detail": "social_core.backends.username",
        "documentation": {}
    },
    {
        "label": "load_backends",
        "kind": 2,
        "importPath": "social_core.backends.utils",
        "description": "social_core.backends.utils",
        "peekOfCode": "def load_backends(backends, force_load=False):\n    \"\"\"\n    Load backends defined on SOCIAL_AUTH_AUTHENTICATION_BACKENDS, backends will\n    be imported and cached on BACKENDSCACHE. The key in that dict will be the\n    backend name, and the value is the backend class.\n    Only subclasses of BaseAuth (and sub-classes) are considered backends.\n    Previously there was a BACKENDS attribute expected on backends courses,\n    this is not needed anymore since it's enough with the\n    AUTHENTICATION_BACKENDS setting. BACKENDS was used because backends used to\n    be split on two classes the authentication backend and another class that",
        "detail": "social_core.backends.utils",
        "documentation": {}
    },
    {
        "label": "get_backend",
        "kind": 2,
        "importPath": "social_core.backends.utils",
        "description": "social_core.backends.utils",
        "peekOfCode": "def get_backend(backends, name):\n    \"\"\"Returns a backend by name. Backends are stored in the BACKENDSCACHE\n    cache dict. If not found, each of the courses referenced in\n    AUTHENTICATION_BACKENDS is imported and checked for a BACKENDS\n    definition. If the named backend is found in the course's BACKENDS\n    definition, it's then stored in the cache for future access.\n    \"\"\"\n    try:\n        # Cached backend which has previously been discovered\n        return BACKENDSCACHE[name]",
        "detail": "social_core.backends.utils",
        "documentation": {}
    },
    {
        "label": "user_backends_data",
        "kind": 2,
        "importPath": "social_core.backends.utils",
        "description": "social_core.backends.utils",
        "peekOfCode": "def user_backends_data(user, backends, storage):\n    \"\"\"\n    Will return backends data for given user, the return value will have the\n    following keys:\n        associated: UserSocialAuth model instances for currently associated\n                    accounts\n        not_associated: Not associated (yet) backend names\n        backends: All backend names.\n    If user is not authenticated, then 'associated' list is empty, and there's\n    no difference between 'not_associated' and 'backends'.",
        "detail": "social_core.backends.utils",
        "documentation": {}
    },
    {
        "label": "BACKENDSCACHE",
        "kind": 5,
        "importPath": "social_core.backends.utils",
        "description": "social_core.backends.utils",
        "peekOfCode": "BACKENDSCACHE = OrderedDict()\ndef load_backends(backends, force_load=False):\n    \"\"\"\n    Load backends defined on SOCIAL_AUTH_AUTHENTICATION_BACKENDS, backends will\n    be imported and cached on BACKENDSCACHE. The key in that dict will be the\n    backend name, and the value is the backend class.\n    Only subclasses of BaseAuth (and sub-classes) are considered backends.\n    Previously there was a BACKENDS attribute expected on backends courses,\n    this is not needed anymore since it's enough with the\n    AUTHENTICATION_BACKENDS setting. BACKENDS was used because backends used to",
        "detail": "social_core.backends.utils",
        "documentation": {}
    },
    {
        "label": "VaultOpenIdConnect",
        "kind": 6,
        "importPath": "social_core.backends.vault",
        "description": "social_core.backends.vault",
        "peekOfCode": "class VaultOpenIdConnect(OpenIdConnectAuth):\n    \"\"\"\n    Vault OIDC authentication backend\n    This is an alias for the generic OIDC backend\n    \"\"\"\n    name = 'vault'",
        "detail": "social_core.backends.vault",
        "documentation": {}
    },
    {
        "label": "VendOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.vend",
        "description": "social_core.backends.vend",
        "peekOfCode": "class VendOAuth2(BaseOAuth2):\n    name = 'vend'\n    AUTHORIZATION_URL = 'https://secure.vendhq.com/connect'\n    ACCESS_TOKEN_URL = 'https://{0}.vendhq.com/api/1.0/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    EXTRA_DATA = [\n        ('refresh_token', 'refresh_token'),\n        ('domain_prefix', 'domain_prefix')\n    ]",
        "detail": "social_core.backends.vend",
        "documentation": {}
    },
    {
        "label": "VimeoOAuth1",
        "kind": 6,
        "importPath": "social_core.backends.vimeo",
        "description": "social_core.backends.vimeo",
        "peekOfCode": "class VimeoOAuth1(BaseOAuth1):\n    \"\"\"Vimeo OAuth authentication backend\"\"\"\n    name = 'vimeo'\n    AUTHORIZATION_URL = 'https://vimeo.com/oauth/authorize'\n    REQUEST_TOKEN_URL = 'https://vimeo.com/oauth/request_token'\n    ACCESS_TOKEN_URL = 'https://vimeo.com/oauth/access_token'\n    def get_user_id(self, details, response):\n        return response.get('person', {}).get('id')\n    def get_user_details(self, response):\n        \"\"\"Return user details from Twitter account\"\"\"",
        "detail": "social_core.backends.vimeo",
        "documentation": {}
    },
    {
        "label": "VimeoOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.vimeo",
        "description": "social_core.backends.vimeo",
        "peekOfCode": "class VimeoOAuth2(BaseOAuth2):\n    \"\"\"Vimeo OAuth2 authentication backend\"\"\"\n    name = 'vimeo-oauth2'\n    AUTHORIZATION_URL = 'https://api.vimeo.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://api.vimeo.com/oauth/access_token'\n    REFRESH_TOKEN_URL = 'https://api.vimeo.com/oauth/request_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    SCOPE_SEPARATOR = ','\n    API_ACCEPT_HEADER = {'Accept': 'application/vnd.vimeo.*+json;version=3.0'}\n    def get_redirect_uri(self, state=None):",
        "detail": "social_core.backends.vimeo",
        "documentation": {}
    },
    {
        "label": "VKontakteOpenAPI",
        "kind": 6,
        "importPath": "social_core.backends.vk",
        "description": "social_core.backends.vk",
        "peekOfCode": "class VKontakteOpenAPI(BaseAuth):\n    \"\"\"VK.COM OpenAPI authentication backend\"\"\"\n    name = 'vk-openapi'\n    ID_KEY = 'id'\n    def get_user_details(self, response):\n        \"\"\"Return user details from VK.com request\"\"\"\n        nickname = response.get('nickname') or ''\n        fullname, first_name, last_name = self.get_user_names(\n            first_name=response.get('first_name', [''])[0],\n            last_name=response.get('last_name', [''])[0]",
        "detail": "social_core.backends.vk",
        "documentation": {}
    },
    {
        "label": "VKOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.vk",
        "description": "social_core.backends.vk",
        "peekOfCode": "class VKOAuth2(BaseOAuth2):\n    \"\"\"VKOAuth2 authentication backend\"\"\"\n    name = 'vk-oauth2'\n    ID_KEY = 'id'\n    AUTHORIZATION_URL = 'https://oauth.vk.com/authorize'\n    ACCESS_TOKEN_URL = 'https://oauth.vk.com/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [\n        ('id', 'id'),\n        ('expires_in', 'expires')",
        "detail": "social_core.backends.vk",
        "documentation": {}
    },
    {
        "label": "VKAppOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.vk",
        "description": "social_core.backends.vk",
        "peekOfCode": "class VKAppOAuth2(VKOAuth2):\n    \"\"\"VK.com Application Authentication support\"\"\"\n    name = 'vk-app'\n    def auth_complete(self, *args, **kwargs):\n        required_params = ('is_app_user', 'viewer_id', 'access_token',\n                           'api_id')\n        if not all(param in self.data for param in required_params):\n            return None\n        auth_key = self.data.get('auth_key')\n        # Verify signature, if present",
        "detail": "social_core.backends.vk",
        "documentation": {}
    },
    {
        "label": "vk_api",
        "kind": 2,
        "importPath": "social_core.backends.vk",
        "description": "social_core.backends.vk",
        "peekOfCode": "def vk_api(backend, method, data):\n    \"\"\"\n    Calls VK.com OpenAPI method, check:\n        https://vk.com/apiclub\n        http://goo.gl/yLcaa\n    \"\"\"\n    # We need to perform server-side call if no access_token\n    data['v'] = backend.setting('API_VERSION', '5.131')\n    if 'access_token' not in data:\n        key, secret = backend.get_key_and_secret()",
        "detail": "social_core.backends.vk",
        "documentation": {}
    },
    {
        "label": "WeiboOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.weibo",
        "description": "social_core.backends.weibo",
        "peekOfCode": "class WeiboOAuth2(BaseOAuth2):\n    \"\"\"Weibo (of sina) OAuth authentication backend\"\"\"\n    name = 'weibo'\n    ID_KEY = 'uid'\n    AUTHORIZATION_URL = 'https://api.weibo.com/oauth2/authorize'\n    REQUEST_TOKEN_URL = 'https://api.weibo.com/oauth2/request_token'\n    ACCESS_TOKEN_URL = 'https://api.weibo.com/oauth2/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    EXTRA_DATA = [",
        "detail": "social_core.backends.weibo",
        "documentation": {}
    },
    {
        "label": "WeixinOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.weixin",
        "description": "social_core.backends.weixin",
        "peekOfCode": "class WeixinOAuth2(BaseOAuth2):\n    \"\"\"Weixin OAuth authentication backend\"\"\"\n    name = 'weixin'\n    ID_KEY = 'openid'\n    AUTHORIZATION_URL = 'https://open.weixin.qq.com/connect/qrconnect'\n    ACCESS_TOKEN_URL = 'https://api.weixin.qq.com/sns/oauth2/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    DEFAULT_SCOPE = ['snsapi_login']\n    REDIRECT_STATE = False\n    EXTRA_DATA = [",
        "detail": "social_core.backends.weixin",
        "documentation": {}
    },
    {
        "label": "WeixinOAuth2APP",
        "kind": 6,
        "importPath": "social_core.backends.weixin",
        "description": "social_core.backends.weixin",
        "peekOfCode": "class WeixinOAuth2APP(WeixinOAuth2):\n    \"\"\"\n    Weixin OAuth authentication backend\n    Can't use in web, only in weixin app\n    \"\"\"\n    name = 'weixinapp'\n    ID_KEY = 'openid'\n    AUTHORIZATION_URL = 'https://open.weixin.qq.com/connect/oauth2/authorize'\n    ACCESS_TOKEN_URL = 'https://api.weixin.qq.com/sns/oauth2/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'",
        "detail": "social_core.backends.weixin",
        "documentation": {}
    },
    {
        "label": "WithingsOAuth",
        "kind": 6,
        "importPath": "social_core.backends.withings",
        "description": "social_core.backends.withings",
        "peekOfCode": "class WithingsOAuth(BaseOAuth1):\n    name = 'withings'\n    AUTHORIZATION_URL = 'https://developer.health.nokia.com/account/authorize'\n    REQUEST_TOKEN_URL = 'https://developer.health.nokia.com/account/request_token'\n    ACCESS_TOKEN_URL = 'https://developer.health.nokia.com/account/access_token'\n    ID_KEY = 'userid'\n    def get_user_details(self, response):\n        \"\"\"Return user details from Withings account\"\"\"\n        return {'userid': response['access_token']['userid'],\n                'email': ''}",
        "detail": "social_core.backends.withings",
        "documentation": {}
    },
    {
        "label": "WunderlistOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.wunderlist",
        "description": "social_core.backends.wunderlist",
        "peekOfCode": "class WunderlistOAuth2(BaseOAuth2):\n    \"\"\"Wunderlist OAuth2 authentication backend\"\"\"\n    name = 'wunderlist'\n    AUTHORIZATION_URL = 'https://www.wunderlist.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://www.wunderlist.com/oauth/access_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    def get_user_details(self, response):\n        \"\"\"Return user details from Wunderlist account\"\"\"\n        fullname, first_name, last_name = self.get_user_names(",
        "detail": "social_core.backends.wunderlist",
        "documentation": {}
    },
    {
        "label": "XingOAuth",
        "kind": 6,
        "importPath": "social_core.backends.xing",
        "description": "social_core.backends.xing",
        "peekOfCode": "class XingOAuth(BaseOAuth1):\n    \"\"\"Xing OAuth authentication backend\"\"\"\n    name = 'xing'\n    AUTHORIZATION_URL = 'https://api.xing.com/v1/authorize'\n    REQUEST_TOKEN_URL = 'https://api.xing.com/v1/request_token'\n    ACCESS_TOKEN_URL = 'https://api.xing.com/v1/access_token'\n    SCOPE_SEPARATOR = '+'\n    EXTRA_DATA = [\n        ('id', 'id'),\n        ('user_id', 'user_id')",
        "detail": "social_core.backends.xing",
        "documentation": {}
    },
    {
        "label": "YahooOAuth",
        "kind": 6,
        "importPath": "social_core.backends.yahoo",
        "description": "social_core.backends.yahoo",
        "peekOfCode": "class YahooOAuth(BaseOAuth1):\n    \"\"\"Yahoo OAuth authentication backend. DEPRECATED\"\"\"\n    name = 'yahoo-oauth'\n    ID_KEY = 'guid'\n    AUTHORIZATION_URL = 'https://api.login.yahoo.com/oauth/v2/request_auth'\n    REQUEST_TOKEN_URL = \\\n        'https://api.login.yahoo.com/oauth/v2/get_request_token'\n    ACCESS_TOKEN_URL = 'https://api.login.yahoo.com/oauth/v2/get_token'\n    EXTRA_DATA = [\n        ('guid', 'id'),",
        "detail": "social_core.backends.yahoo",
        "documentation": {}
    },
    {
        "label": "YahooOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.yahoo",
        "description": "social_core.backends.yahoo",
        "peekOfCode": "class YahooOAuth2(BaseOAuth2):\n    \"\"\"Yahoo OAuth2 authentication backend\"\"\"\n    name = 'yahoo-oauth2'\n    ID_KEY = 'sub'\n    AUTHORIZATION_URL = 'https://api.login.yahoo.com/oauth2/request_auth'\n    ACCESS_TOKEN_URL = 'https://api.login.yahoo.com/oauth2/get_token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    EXTRA_DATA = [\n        ('sub', 'id'),\n        ('access_token', 'access_token'),",
        "detail": "social_core.backends.yahoo",
        "documentation": {}
    },
    {
        "label": "YammerOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.yammer",
        "description": "social_core.backends.yammer",
        "peekOfCode": "class YammerOAuth2(BaseOAuth2):\n    name = 'yammer'\n    AUTHORIZATION_URL = 'https://www.yammer.com/dialog/oauth'\n    ACCESS_TOKEN_URL = 'https://www.yammer.com/oauth2/access_token'\n    EXTRA_DATA = [\n        ('id', 'id'),\n        ('expires', 'expires'),\n        ('mugshot_url', 'mugshot_url')\n    ]\n    def get_user_id(self, details, response):",
        "detail": "social_core.backends.yammer",
        "documentation": {}
    },
    {
        "label": "YammerStagingOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.yammer",
        "description": "social_core.backends.yammer",
        "peekOfCode": "class YammerStagingOAuth2(YammerOAuth2):\n    name = 'yammer-staging'\n    AUTHORIZATION_URL = 'https://www.staging.yammer.com/dialog/oauth'\n    ACCESS_TOKEN_URL = 'https://www.staging.yammer.com/oauth2/access_token'\n    REQUEST_TOKEN_URL = 'https://www.staging.yammer.com/oauth2/request_token'",
        "detail": "social_core.backends.yammer",
        "documentation": {}
    },
    {
        "label": "YandexOpenId",
        "kind": 6,
        "importPath": "social_core.backends.yandex",
        "description": "social_core.backends.yandex",
        "peekOfCode": "class YandexOpenId(OpenIdAuth):\n    \"\"\"Yandex OpenID authentication backend\"\"\"\n    name = 'yandex-openid'\n    URL = 'http://openid.yandex.ru'\n    def get_user_id(self, details, response):\n        return details['email'] or response.identity_url\n    def get_user_details(self, response):\n        \"\"\"Generate username from identity url\"\"\"\n        values = super().get_user_details(response)\n        values['username'] = values.get('username') or\\",
        "detail": "social_core.backends.yandex",
        "documentation": {}
    },
    {
        "label": "YandexOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.yandex",
        "description": "social_core.backends.yandex",
        "peekOfCode": "class YandexOAuth2(BaseOAuth2):\n    \"\"\"Legacy Yandex OAuth2 authentication backend\"\"\"\n    name = 'yandex-oauth2'\n    AUTHORIZATION_URL = 'https://oauth.yandex.com/authorize'\n    ACCESS_TOKEN_URL = 'https://oauth.yandex.com/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    def get_user_details(self, response):\n        fullname, first_name, last_name = self.get_user_names(\n            response.get('real_name') or response.get('display_name') or ''",
        "detail": "social_core.backends.yandex",
        "documentation": {}
    },
    {
        "label": "YaruOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.yandex",
        "description": "social_core.backends.yandex",
        "peekOfCode": "class YaruOAuth2(BaseOAuth2):\n    name = 'yaru'\n    AUTHORIZATION_URL = 'https://oauth.yandex.com/authorize'\n    ACCESS_TOKEN_URL = 'https://oauth.yandex.com/token'\n    ACCESS_TOKEN_METHOD = 'POST'\n    REDIRECT_STATE = False\n    def get_user_details(self, response):\n        fullname, first_name, last_name = self.get_user_names(\n            response.get('real_name') or response.get('display_name') or ''\n        )",
        "detail": "social_core.backends.yandex",
        "documentation": {}
    },
    {
        "label": "ZoomOAuth2",
        "kind": 6,
        "importPath": "social_core.backends.zoom",
        "description": "social_core.backends.zoom",
        "peekOfCode": "class ZoomOAuth2(BaseOAuth2):\n    \"\"\"\n    Zoom OAuth2 authentication backend\n    Doc Reference: https://marketplace.zoom.us/docs/guides/auth/oauth\n    \"\"\"\n    name = 'zoom-oauth2'\n    AUTHORIZATION_URL = 'https://zoom.us/oauth/authorize'\n    ACCESS_TOKEN_URL = 'https://zoom.us/oauth/token'\n    USER_DETAILS_URL = 'https://api.zoom.us/v2/users/me'\n    DEFAULT_SCOPE = ['user:read']",
        "detail": "social_core.backends.zoom",
        "documentation": {}
    },
    {
        "label": "ZoteroOAuth",
        "kind": 6,
        "importPath": "social_core.backends.zotero",
        "description": "social_core.backends.zotero",
        "peekOfCode": "class ZoteroOAuth(BaseOAuth1):\n    \"\"\"Zotero OAuth authorization mechanism\"\"\"\n    name = 'zotero'\n    AUTHORIZATION_URL = 'https://www.zotero.org/oauth/authorize'\n    REQUEST_TOKEN_URL = 'https://www.zotero.org/oauth/request'\n    ACCESS_TOKEN_URL = 'https://www.zotero.org/oauth/access'\n    def get_user_id(self, details, response):\n        \"\"\"\n        Return user unique id provided by service. For Ubuntu One\n        the nickname should be original.",
        "detail": "social_core.backends.zotero",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "social_core.pipeline.debug",
        "description": "social_core.pipeline.debug",
        "peekOfCode": "def debug(response, details, *args, **kwargs):\n    print('=' * 80)\n    pprint(response)\n    print('=' * 80)\n    pprint(details)\n    print('=' * 80)\n    pprint(args)\n    print('=' * 80)\n    pprint(kwargs)\n    print('=' * 80)",
        "detail": "social_core.pipeline.debug",
        "documentation": {}
    },
    {
        "label": "allowed_to_disconnect",
        "kind": 2,
        "importPath": "social_core.pipeline.disconnect",
        "description": "social_core.pipeline.disconnect",
        "peekOfCode": "def allowed_to_disconnect(strategy, user, name, user_storage,\n                          association_id=None, *args, **kwargs):\n    if not user_storage.allowed_to_disconnect(user, name, association_id):\n        raise NotAllowedToDisconnect()\ndef get_entries(strategy, user, name, user_storage, association_id=None,\n                *args, **kwargs):\n    return {\n        'entries': user_storage.get_social_auth_for_user(\n            user, name, association_id\n        )",
        "detail": "social_core.pipeline.disconnect",
        "documentation": {}
    },
    {
        "label": "get_entries",
        "kind": 2,
        "importPath": "social_core.pipeline.disconnect",
        "description": "social_core.pipeline.disconnect",
        "peekOfCode": "def get_entries(strategy, user, name, user_storage, association_id=None,\n                *args, **kwargs):\n    return {\n        'entries': user_storage.get_social_auth_for_user(\n            user, name, association_id\n        )\n    }\ndef revoke_tokens(strategy, entries, *args, **kwargs):\n    revoke_tokens = strategy.setting('REVOKE_TOKENS_ON_DISCONNECT', False)\n    if revoke_tokens:",
        "detail": "social_core.pipeline.disconnect",
        "documentation": {}
    },
    {
        "label": "revoke_tokens",
        "kind": 2,
        "importPath": "social_core.pipeline.disconnect",
        "description": "social_core.pipeline.disconnect",
        "peekOfCode": "def revoke_tokens(strategy, entries, *args, **kwargs):\n    revoke_tokens = strategy.setting('REVOKE_TOKENS_ON_DISCONNECT', False)\n    if revoke_tokens:\n        for entry in entries:\n            if 'access_token' in entry.extra_data:\n                backend = entry.get_backend_instance(strategy)\n                backend.revoke_token(entry.extra_data['access_token'],\n                                     entry.uid)\ndef disconnect(strategy, entries, user_storage, *args, **kwargs):\n    for entry in entries:",
        "detail": "social_core.pipeline.disconnect",
        "documentation": {}
    },
    {
        "label": "disconnect",
        "kind": 2,
        "importPath": "social_core.pipeline.disconnect",
        "description": "social_core.pipeline.disconnect",
        "peekOfCode": "def disconnect(strategy, entries, user_storage, *args, **kwargs):\n    for entry in entries:\n        user_storage.disconnect(entry)",
        "detail": "social_core.pipeline.disconnect",
        "documentation": {}
    },
    {
        "label": "mail_validation",
        "kind": 2,
        "importPath": "social_core.pipeline.mail",
        "description": "social_core.pipeline.mail",
        "peekOfCode": "def mail_validation(backend, details, is_new=False, *args, **kwargs):\n    requires_validation = backend.REQUIRES_EMAIL_VALIDATION or \\\n        backend.setting('FORCE_EMAIL_VALIDATION', False)\n    send_validation = details.get('email') and \\\n        (is_new or backend.setting('PASSWORDLESS', False))\n    if requires_validation and send_validation:\n        data = backend.strategy.request_data()\n        if 'verification_code' in data:\n            backend.strategy.session_pop('email_validation_address')\n            if not backend.strategy.validate_email(details['email'],",
        "detail": "social_core.pipeline.mail",
        "documentation": {}
    },
    {
        "label": "partial_step",
        "kind": 2,
        "importPath": "social_core.pipeline.partial",
        "description": "social_core.pipeline.partial",
        "peekOfCode": "def partial_step(save_to_session):\n    \"\"\"Wraps func to behave like a partial pipeline step, any output\n    that's not None or {} will be considered a response object and\n    will be returned to user.\n    The pipeline function will receive a current_partial object, it\n    contains the partial pipeline data and a token that is used to\n    identify it when it's continued, this is useful to build links\n    with the token.\n    The default value for this parameter is partial_token, but can be\n    overridden by SOCIAL_AUTH_PARTIAL_PIPELINE_TOKEN_NAME setting.",
        "detail": "social_core.pipeline.partial",
        "documentation": {}
    },
    {
        "label": "partial",
        "kind": 5,
        "importPath": "social_core.pipeline.partial",
        "description": "social_core.pipeline.partial",
        "peekOfCode": "partial = partial_step(save_to_session=True)",
        "detail": "social_core.pipeline.partial",
        "documentation": {}
    },
    {
        "label": "social_details",
        "kind": 2,
        "importPath": "social_core.pipeline.social_auth",
        "description": "social_core.pipeline.social_auth",
        "peekOfCode": "def social_details(backend, details, response, *args, **kwargs):\n    return {'details': dict(backend.get_user_details(response), **details)}\ndef social_uid(backend, details, response, *args, **kwargs):\n    return {'uid': backend.get_user_id(details, response)}\ndef auth_allowed(backend, details, response, *args, **kwargs):\n    if not backend.auth_allowed(response, details):\n        raise AuthForbidden(backend)\ndef social_user(backend, uid, user=None, *args, **kwargs):\n    provider = backend.name\n    social = backend.strategy.storage.user.get_social_auth(provider, uid)",
        "detail": "social_core.pipeline.social_auth",
        "documentation": {}
    },
    {
        "label": "social_uid",
        "kind": 2,
        "importPath": "social_core.pipeline.social_auth",
        "description": "social_core.pipeline.social_auth",
        "peekOfCode": "def social_uid(backend, details, response, *args, **kwargs):\n    return {'uid': backend.get_user_id(details, response)}\ndef auth_allowed(backend, details, response, *args, **kwargs):\n    if not backend.auth_allowed(response, details):\n        raise AuthForbidden(backend)\ndef social_user(backend, uid, user=None, *args, **kwargs):\n    provider = backend.name\n    social = backend.strategy.storage.user.get_social_auth(provider, uid)\n    if social:\n        if user and social.user != user:",
        "detail": "social_core.pipeline.social_auth",
        "documentation": {}
    },
    {
        "label": "auth_allowed",
        "kind": 2,
        "importPath": "social_core.pipeline.social_auth",
        "description": "social_core.pipeline.social_auth",
        "peekOfCode": "def auth_allowed(backend, details, response, *args, **kwargs):\n    if not backend.auth_allowed(response, details):\n        raise AuthForbidden(backend)\ndef social_user(backend, uid, user=None, *args, **kwargs):\n    provider = backend.name\n    social = backend.strategy.storage.user.get_social_auth(provider, uid)\n    if social:\n        if user and social.user != user:\n            raise AuthAlreadyAssociated(backend)\n        elif not user:",
        "detail": "social_core.pipeline.social_auth",
        "documentation": {}
    },
    {
        "label": "social_user",
        "kind": 2,
        "importPath": "social_core.pipeline.social_auth",
        "description": "social_core.pipeline.social_auth",
        "peekOfCode": "def social_user(backend, uid, user=None, *args, **kwargs):\n    provider = backend.name\n    social = backend.strategy.storage.user.get_social_auth(provider, uid)\n    if social:\n        if user and social.user != user:\n            raise AuthAlreadyAssociated(backend)\n        elif not user:\n            user = social.user\n    return {'social': social,\n            'user': user,",
        "detail": "social_core.pipeline.social_auth",
        "documentation": {}
    },
    {
        "label": "associate_user",
        "kind": 2,
        "importPath": "social_core.pipeline.social_auth",
        "description": "social_core.pipeline.social_auth",
        "peekOfCode": "def associate_user(backend, uid, user=None, social=None, *args, **kwargs):\n    if user and not social:\n        try:\n            social = backend.strategy.storage.user.create_social_auth(\n                user, uid, backend.name\n            )\n        except Exception as err:\n            if not backend.strategy.storage.is_integrity_error(err):\n                raise\n            # Protect for possible race condition, those bastard with FTL",
        "detail": "social_core.pipeline.social_auth",
        "documentation": {}
    },
    {
        "label": "associate_by_email",
        "kind": 2,
        "importPath": "social_core.pipeline.social_auth",
        "description": "social_core.pipeline.social_auth",
        "peekOfCode": "def associate_by_email(backend, details, user=None, *args, **kwargs):\n    \"\"\"\n    Associate current auth with a user with the same email address in the DB.\n    This pipeline entry is not 100% secure unless you know that the providers\n    enabled enforce email verification on their side, otherwise a user can\n    attempt to take over another user account by using the same (not validated)\n    email address on some provider.  This pipeline entry is disabled by\n    default.\n    \"\"\"\n    if user:",
        "detail": "social_core.pipeline.social_auth",
        "documentation": {}
    },
    {
        "label": "load_extra_data",
        "kind": 2,
        "importPath": "social_core.pipeline.social_auth",
        "description": "social_core.pipeline.social_auth",
        "peekOfCode": "def load_extra_data(backend, details, response, uid, user, *args, **kwargs):\n    social = kwargs.get('social') or \\\n             backend.strategy.storage.user.get_social_auth(backend.name, uid)\n    if social:\n        extra_data = backend.extra_data(user, uid, response, details,\n                                        *args, **kwargs)\n        social.set_extra_data(extra_data)",
        "detail": "social_core.pipeline.social_auth",
        "documentation": {}
    },
    {
        "label": "get_username",
        "kind": 2,
        "importPath": "social_core.pipeline.user",
        "description": "social_core.pipeline.user",
        "peekOfCode": "def get_username(strategy, details, backend, user=None, *args, **kwargs):\n    if 'username' not in backend.setting('USER_FIELDS', USER_FIELDS):\n        return\n    storage = strategy.storage\n    if not user:\n        email_as_username = strategy.setting('USERNAME_IS_FULL_EMAIL', False)\n        uuid_length = strategy.setting('UUID_LENGTH', 16)\n        max_length = storage.user.username_max_length()\n        do_slugify = strategy.setting('SLUGIFY_USERNAMES', False)\n        do_clean = strategy.setting('CLEAN_USERNAMES', True)",
        "detail": "social_core.pipeline.user",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "social_core.pipeline.user",
        "description": "social_core.pipeline.user",
        "peekOfCode": "def create_user(strategy, details, backend, user=None, *args, **kwargs):\n    if user:\n        return {'is_new': False}\n    fields = {name: kwargs.get(name, details.get(name))\n                  for name in backend.setting('USER_FIELDS', USER_FIELDS)}\n    if not fields:\n        return\n    USER_pic = details.get('pic')\n    return {\n        'is_new': True,",
        "detail": "social_core.pipeline.user",
        "documentation": {}
    },
    {
        "label": "user_details",
        "kind": 2,
        "importPath": "social_core.pipeline.user",
        "description": "social_core.pipeline.user",
        "peekOfCode": "def user_details(strategy, details, backend, user=None, *args, **kwargs):\n    \"\"\"Update user details using data from provider.\"\"\"\n    if not user:\n        return\n    changed = False  # flag to track changes\n    # Default protected user fields (username, id, pk and email) can be ignored\n    # by setting the SOCIAL_AUTH_NO_DEFAULT_PROTECTED_USER_FIELDS to True\n    if strategy.setting('NO_DEFAULT_PROTECTED_USER_FIELDS') is True:\n        protected = ()\n    else:",
        "detail": "social_core.pipeline.user",
        "documentation": {}
    },
    {
        "label": "USER_FIELDS",
        "kind": 5,
        "importPath": "social_core.pipeline.user",
        "description": "social_core.pipeline.user",
        "peekOfCode": "USER_FIELDS = ['username', 'email']\nUSER_pic=''\ndef get_username(strategy, details, backend, user=None, *args, **kwargs):\n    if 'username' not in backend.setting('USER_FIELDS', USER_FIELDS):\n        return\n    storage = strategy.storage\n    if not user:\n        email_as_username = strategy.setting('USERNAME_IS_FULL_EMAIL', False)\n        uuid_length = strategy.setting('UUID_LENGTH', 16)\n        max_length = storage.user.username_max_length()",
        "detail": "social_core.pipeline.user",
        "documentation": {}
    },
    {
        "label": "is_dict_type",
        "kind": 2,
        "importPath": "social_core.pipeline.utils",
        "description": "social_core.pipeline.utils",
        "peekOfCode": "def is_dict_type(value):\n    \"\"\"Treat any dict, MergeDict, MultiDict instance as dict type\"\"\"\n    # Check by class name to avoid importing Django MergeDict or\n    # Werkzeug MultiDict\n    return isinstance(value, dict) or \\\n        value.__class__.__name__ in ('MergeDict', 'MultiDict')\ndef partial_prepare(strategy, backend, next_step, user=None, social=None,\n                    *args, **kwargs):\n    kwargs.update({\n        'response': kwargs.get('response') or {},",
        "detail": "social_core.pipeline.utils",
        "documentation": {}
    },
    {
        "label": "partial_prepare",
        "kind": 2,
        "importPath": "social_core.pipeline.utils",
        "description": "social_core.pipeline.utils",
        "peekOfCode": "def partial_prepare(strategy, backend, next_step, user=None, social=None,\n                    *args, **kwargs):\n    kwargs.update({\n        'response': kwargs.get('response') or {},\n        'details': kwargs.get('details') or {},\n        'username': kwargs.get('username'),\n        'uid': kwargs.get('uid'),\n        'is_new': kwargs.get('is_new') or False,\n        'new_association': kwargs.get('new_association') or False,\n        'user': hasattr(user, 'id') and user.id or None,",
        "detail": "social_core.pipeline.utils",
        "documentation": {}
    },
    {
        "label": "partial_store",
        "kind": 2,
        "importPath": "social_core.pipeline.utils",
        "description": "social_core.pipeline.utils",
        "peekOfCode": "def partial_store(strategy, backend, next_step, user=None, social=None,\n                  *args, **kwargs):\n    partial = partial_prepare(strategy, backend, next_step, user=user,\n                              social=social, *args, **kwargs)\n    return strategy.storage.partial.store(partial)\ndef partial_load(strategy, token):\n    partial = strategy.storage.partial.load(token)\n    if partial:\n        args = partial.args\n        kwargs = partial.kwargs.copy()",
        "detail": "social_core.pipeline.utils",
        "documentation": {}
    },
    {
        "label": "partial_load",
        "kind": 2,
        "importPath": "social_core.pipeline.utils",
        "description": "social_core.pipeline.utils",
        "peekOfCode": "def partial_load(strategy, token):\n    partial = strategy.storage.partial.load(token)\n    if partial:\n        args = partial.args\n        kwargs = partial.kwargs.copy()\n        user = kwargs.get('user')\n        social = kwargs.get('social')\n        if isinstance(social, dict):\n            kwargs['social'] = strategy.storage.user.get_social_auth(**social)\n        if user:",
        "detail": "social_core.pipeline.utils",
        "documentation": {}
    },
    {
        "label": "SERIALIZABLE_TYPES",
        "kind": 5,
        "importPath": "social_core.pipeline.utils",
        "description": "social_core.pipeline.utils",
        "peekOfCode": "SERIALIZABLE_TYPES = (dict, list, tuple, set, bool, type(None), int, str, bytes)\ndef is_dict_type(value):\n    \"\"\"Treat any dict, MergeDict, MultiDict instance as dict type\"\"\"\n    # Check by class name to avoid importing Django MergeDict or\n    # Werkzeug MultiDict\n    return isinstance(value, dict) or \\\n        value.__class__.__name__ in ('MergeDict', 'MultiDict')\ndef partial_prepare(strategy, backend, next_step, user=None, social=None,\n                    *args, **kwargs):\n    kwargs.update({",
        "detail": "social_core.pipeline.utils",
        "documentation": {}
    },
    {
        "label": "BaseActionTest",
        "kind": 6,
        "importPath": "social_core.tests.actions.actions",
        "description": "social_core.tests.actions.actions",
        "peekOfCode": "class BaseActionTest(unittest.TestCase):\n    user_data_url = 'https://api.github.com/user'\n    login_redirect_url = '/success'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'login': 'foobar',",
        "detail": "social_core.tests.actions.actions",
        "documentation": {}
    },
    {
        "label": "AssociateActionTest",
        "kind": 6,
        "importPath": "social_core.tests.actions.test_associate",
        "description": "social_core.tests.actions.test_associate",
        "peekOfCode": "class AssociateActionTest(BaseActionTest):\n    expected_username = 'foobar'\n    def setUp(self):\n        super().setUp()\n        self.user = User(username='foobar', email='foo@bar.com')\n        self.backend.strategy.session_set('username', self.user.username)\n    def test_associate(self):\n        self.do_login()\n        self.assertTrue(len(self.user.social), 1)\n        self.assertEqual(self.user.social[0].provider, 'github')",
        "detail": "social_core.tests.actions.test_associate",
        "documentation": {}
    },
    {
        "label": "MultipleAccountsTest",
        "kind": 6,
        "importPath": "social_core.tests.actions.test_associate",
        "description": "social_core.tests.actions.test_associate",
        "peekOfCode": "class MultipleAccountsTest(AssociateActionTest):\n    alternative_user_data_body = json.dumps({\n        'login': 'foobar2',\n        'id': 2,\n        'avatar_url': 'https://github.com/images/error/foobar2_happy.gif',\n        'gravatar_id': 'somehexcode',\n        'url': 'https://api.github.com/users/foobar2',\n        'name': 'monalisa foobar2',\n        'company': 'GitHub',\n        'blog': 'https://github.com/blog',",
        "detail": "social_core.tests.actions.test_associate",
        "documentation": {}
    },
    {
        "label": "AlreadyAssociatedErrorTest",
        "kind": 6,
        "importPath": "social_core.tests.actions.test_associate",
        "description": "social_core.tests.actions.test_associate",
        "peekOfCode": "class AlreadyAssociatedErrorTest(BaseActionTest):\n    def setUp(self):\n        super().setUp()\n        self.user1 = User(username='foobar', email='foo@bar.com')\n        self.user = None\n    def tearDown(self):\n        super().tearDown()\n        self.user1 = None\n        self.user = None\n    def test_already_associated_error(self):",
        "detail": "social_core.tests.actions.test_associate",
        "documentation": {}
    },
    {
        "label": "DisconnectActionTest",
        "kind": 6,
        "importPath": "social_core.tests.actions.test_disconnect",
        "description": "social_core.tests.actions.test_disconnect",
        "peekOfCode": "class DisconnectActionTest(BaseActionTest):\n    def test_not_allowed_to_disconnect(self):\n        self.do_login()\n        user = User.get(self.expected_username)\n        with self.assertRaisesRegex(NotAllowedToDisconnect,\n                                    'This account is not allowed to be disconnected.'):\n            do_disconnect(self.backend, user)\n    def test_disconnect(self):\n        self.do_login()\n        user = User.get(self.expected_username)",
        "detail": "social_core.tests.actions.test_disconnect",
        "documentation": {}
    },
    {
        "label": "LoginActionTest",
        "kind": 6,
        "importPath": "social_core.tests.actions.test_login",
        "description": "social_core.tests.actions.test_login",
        "peekOfCode": "class LoginActionTest(BaseActionTest):\n    def test_login(self):\n        self.do_login()\n    def test_login_with_partial_pipeline(self):\n        self.do_login_with_partial_pipeline()\n    def test_fields_stored_in_session(self):\n        self.strategy.set_settings({\n            'SOCIAL_AUTH_FIELDS_STORED_IN_SESSION': ['foo', 'bar']\n        })\n        self.strategy.set_request_data({'foo': '1', 'bar': '2'}, self.backend)",
        "detail": "social_core.tests.actions.test_login",
        "documentation": {}
    },
    {
        "label": "BaseBackendTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.base",
        "description": "social_core.tests.backends.base",
        "peekOfCode": "class BaseBackendTest(unittest.TestCase):\n    backend = None\n    backend_path = None\n    name = None\n    complete_url = ''\n    raw_complete_url = '/complete/{0}'\n    def setUp(self):\n        HTTPretty.enable(allow_net_connect=False)\n        Backend = course_member(self.backend_path)\n        self.strategy = TestStrategy(TestStorage)",
        "detail": "social_core.tests.backends.base",
        "documentation": {}
    },
    {
        "label": "BaseLegacyTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.legacy",
        "description": "social_core.tests.backends.legacy",
        "peekOfCode": "class BaseLegacyTest(BaseBackendTest):\n    form = ''\n    response_body = ''\n    def setUp(self):\n        super().setUp()\n        self.strategy.set_settings({\n            f'SOCIAL_AUTH_{self.name}_FORM_URL':\n                self.strategy.build_absolute_uri('/login/{}'.format(\n                    self.backend.name))\n        })",
        "detail": "social_core.tests.backends.legacy",
        "documentation": {}
    },
    {
        "label": "BaseOAuthTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.oauth",
        "description": "social_core.tests.backends.oauth",
        "peekOfCode": "class BaseOAuthTest(BaseBackendTest):\n    backend = None\n    backend_path = None\n    user_data_body = None\n    user_data_url = ''\n    user_data_url_post = False\n    user_data_content_type = 'application/json'\n    access_token_body = None\n    access_token_status = 200\n    expected_username = ''",
        "detail": "social_core.tests.backends.oauth",
        "documentation": {}
    },
    {
        "label": "OAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.oauth",
        "description": "social_core.tests.backends.oauth",
        "peekOfCode": "class OAuth1Test(BaseOAuthTest):\n    request_token_body = None\n    raw_complete_url = '/complete/{0}/?oauth_verifier=bazqux&' \\\n        'oauth_token=foobar'\n    def request_token_handler(self):\n        HTTPretty.register_uri(self._method(self.backend.REQUEST_TOKEN_METHOD),\n                               self.backend.REQUEST_TOKEN_URL,\n                               body=self.request_token_body,\n                               status=200)\n    def do_start(self):",
        "detail": "social_core.tests.backends.oauth",
        "documentation": {}
    },
    {
        "label": "OAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.oauth",
        "description": "social_core.tests.backends.oauth",
        "peekOfCode": "class OAuth2Test(BaseOAuthTest):\n    raw_complete_url = '/complete/{0}/?code=foobar'\n    refresh_token_body = ''\n    def refresh_token_arguments(self):\n        return {}\n    def do_refresh_token(self):\n        self.do_login()\n        HTTPretty.register_uri(self._method(self.backend.REFRESH_TOKEN_METHOD),\n                               self.backend.refresh_token_url(),\n                               status=200,",
        "detail": "social_core.tests.backends.oauth",
        "documentation": {}
    },
    {
        "label": "FormHTMLParser",
        "kind": 6,
        "importPath": "social_core.tests.backends.open_id",
        "description": "social_core.tests.backends.open_id",
        "peekOfCode": "class FormHTMLParser(HTMLParser):\n    form = {}\n    inputs = {}\n    def handle_starttag(self, tag, attrs):\n        attrs = dict(attrs)\n        if tag == 'form':\n            self.form.update(attrs)\n        elif tag == 'input' and 'name' in attrs:\n            self.inputs[attrs['name']] = attrs['value']\nclass OpenIdTest(BaseBackendTest):",
        "detail": "social_core.tests.backends.open_id",
        "documentation": {}
    },
    {
        "label": "OpenIdTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.open_id",
        "description": "social_core.tests.backends.open_id",
        "peekOfCode": "class OpenIdTest(BaseBackendTest):\n    backend_path = None\n    backend = None\n    access_token_body = None\n    user_data_body = None\n    user_data_url = ''\n    expected_username = ''\n    settings = None\n    partial_login_settings = None\n    raw_complete_url = '/complete/{0}/'",
        "detail": "social_core.tests.backends.open_id",
        "documentation": {}
    },
    {
        "label": "oidutil.log",
        "kind": 5,
        "importPath": "social_core.tests.backends.open_id",
        "description": "social_core.tests.backends.open_id",
        "peekOfCode": "oidutil.log = lambda *args, **kwargs: None\nclass FormHTMLParser(HTMLParser):\n    form = {}\n    inputs = {}\n    def handle_starttag(self, tag, attrs):\n        attrs = dict(attrs)\n        if tag == 'form':\n            self.form.update(attrs)\n        elif tag == 'input' and 'name' in attrs:\n            self.inputs[attrs['name']] = attrs['value']",
        "detail": "social_core.tests.backends.open_id",
        "documentation": {}
    },
    {
        "label": "AmazonOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_amazon",
        "description": "social_core.tests.backends.test_amazon",
        "peekOfCode": "class AmazonOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.amazon.AmazonOAuth2'\n    user_data_url = 'https://api.amazon.com/user/profile'\n    expected_username = 'FooBar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'user_id': 'amzn1.account.ABCDE1234',",
        "detail": "social_core.tests.backends.test_amazon",
        "documentation": {}
    },
    {
        "label": "AmazonOAuth2BrokenServerResponseTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_amazon",
        "description": "social_core.tests.backends.test_amazon",
        "peekOfCode": "class AmazonOAuth2BrokenServerResponseTest(OAuth2Test):\n    backend_path = 'social_core.backends.amazon.AmazonOAuth2'\n    user_data_url = 'https://www.amazon.com/ap/user/profile'\n    expected_username = 'FooBar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'Request-Id': '02GGTU7CWMNFTV3KH3J6',",
        "detail": "social_core.tests.backends.test_amazon",
        "documentation": {}
    },
    {
        "label": "AngelOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_angel",
        "description": "social_core.tests.backends.test_angel",
        "peekOfCode": "class AngelOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.angel.AngelOAuth2'\n    user_data_url = 'https://api.angel.co/1/me/'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'facebook_url': 'http://www.facebook.com/foobar',\n        'bio': None,",
        "detail": "social_core.tests.backends.test_angel",
        "documentation": {}
    },
    {
        "label": "AppleIdTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_apple",
        "description": "social_core.tests.backends.test_apple",
        "peekOfCode": "class AppleIdTest(OAuth2Test):\n    backend_path = 'social_core.backends.apple.AppleIdAuth'\n    user_data_url = 'https://appleid.apple.com/auth/authorize/'\n    id_token = 'a-id-token'\n    access_token_body = json.dumps({'id_token': id_token, 'access_token': 'a-test-token'})\n    expected_username = token_data['sub']\n    def extra_settings(self):\n        return {\n            'SOCIAL_AUTH_' + self.name + '_TEAM': 'a-team-id',\n            'SOCIAL_AUTH_' + self.name + '_KEY': 'a-key-id',",
        "detail": "social_core.tests.backends.test_apple",
        "documentation": {}
    },
    {
        "label": "TEST_KEY",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_apple",
        "description": "social_core.tests.backends.test_apple",
        "peekOfCode": "TEST_KEY = \"\"\"\n-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIKQya8aIoeoOLeThk7Ad/lLyAo2fTp9IuhIpy2CivH/qoAoGCCqGSM49\nAwEHoUQDQgAEyEY7IMlNJtyaF/pdcM/PpQ8OCe19Sf1Yxq4HQsrB2b7QogB95Vjt\n6mTZDAhlXIBtuM/JLrdkMfPmwjVKLgxHAQ==\n-----END EC PRIVATE KEY-----\n\"\"\"\ntoken_data = {\n    'sub': '11011110101011011011111011101111',\n    'first_name': 'Foo',",
        "detail": "social_core.tests.backends.test_apple",
        "documentation": {}
    },
    {
        "label": "token_data",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_apple",
        "description": "social_core.tests.backends.test_apple",
        "peekOfCode": "token_data = {\n    'sub': '11011110101011011011111011101111',\n    'first_name': 'Foo',\n    'last_name': 'Bar',\n    'email': 'foobar@apple.com',\n}\nclass AppleIdTest(OAuth2Test):\n    backend_path = 'social_core.backends.apple.AppleIdAuth'\n    user_data_url = 'https://appleid.apple.com/auth/authorize/'\n    id_token = 'a-id-token'",
        "detail": "social_core.tests.backends.test_apple",
        "documentation": {}
    },
    {
        "label": "ArcGISOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_arcgis",
        "description": "social_core.tests.backends.test_arcgis",
        "peekOfCode": "class ArcGISOAuth2Test(OAuth2Test):\n    user_data_url = 'https://www.arcgis.com/sharing/rest/community/self'\n    backend_path = 'social_core.backends.arcgis.ArcGISOAuth2'\n    expected_username = 'gis@rocks.com'\n    user_data_body = json.dumps({\n        'first_name': 'Gis',\n        'last_name': 'Rocks',\n        'email': 'gis@rocks.com',\n        'fullName': 'Gis Rocks',\n        'username': 'gis@rocks.com'",
        "detail": "social_core.tests.backends.test_arcgis",
        "documentation": {}
    },
    {
        "label": "AsanaOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_asana",
        "description": "social_core.tests.backends.test_asana",
        "peekOfCode": "class AsanaOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.asana.AsanaOAuth2'\n    user_data_url = 'https://app.asana.com/api/1.0/users/me'\n    expected_username = 'erlich@bachmanity.com'\n    access_token_body = json.dumps({\n        'access_token': 'aviato',\n        'token_type': 'bearer'\n    })\n    # https://asana.com/developers/api-reference/users\n    user_data_body = json.dumps({",
        "detail": "social_core.tests.backends.test_asana",
        "documentation": {}
    },
    {
        "label": "AtlassianOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_atlassian",
        "description": "social_core.tests.backends.test_atlassian",
        "peekOfCode": "class AtlassianOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.atlassian.AtlassianOAuth2'\n    tenant_url = 'https://api.atlassian.com/oauth/token/accessible-resources'\n    user_data_url = 'https://api.atlassian.com/ex/jira/FAKED_CLOUD_ID/rest/api/2/myself'\n    expected_username = 'erlich'\n    access_token_body = json.dumps({\n        'access_token': 'aviato',\n        'token_type': 'bearer'\n    })\n    tenant_data_body = json.dumps([",
        "detail": "social_core.tests.backends.test_atlassian",
        "documentation": {}
    },
    {
        "label": "Auth0OAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_auth0",
        "description": "social_core.tests.backends.test_auth0",
        "peekOfCode": "class Auth0OAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.auth0.Auth0OAuth2'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n        'expires_in': 86400,\n        'id_token': jwt.encode({\n            'nickname': 'foobar',\n            'email': 'foobar@auth0.com',\n            'name': 'John Doe',",
        "detail": "social_core.tests.backends.test_auth0",
        "documentation": {}
    },
    {
        "label": "JWK_KEY",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_auth0",
        "description": "social_core.tests.backends.test_auth0",
        "peekOfCode": "JWK_KEY = {\n    'kty': 'RSA',\n    'd': 'ZmswNokEvBcxW_Kvcy8mWUQOQCBdGbnM0xR7nhvGHC-Q24z3XAQWlMWbsmGc_R1o'\n         '_F3zK7DBlc3BokdRaO1KJirNmnHCw5TlnBlJrXiWpFBtVglUg98-4sRRO0VWnGXK'\n         'JPOkBQ6b_DYRO3b0o8CSpWowpiV6HB71cjXTqKPZf-aXU9WjCCAtxVjfIxgQFu5I'\n         '-G1Qah8mZeY8HK_y99L4f0siZcbUoaIcfeWBhxi14ODyuSAHt0sNEkhiIVBZE7QZ'\n         'm-SEP1ryT9VAaljbwHHPmg7NC26vtLZhvaBGbTTJnEH0ZubbN2PMzsfeNyoCIHy4'\n         '4QDSpQDCHfgcGOlHY_t5gQ',\n    'e': 'AQAB',\n    'use': 'sig',",
        "detail": "social_core.tests.backends.test_auth0",
        "documentation": {}
    },
    {
        "label": "JWK_PUBLIC_KEY",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_auth0",
        "description": "social_core.tests.backends.test_auth0",
        "peekOfCode": "JWK_PUBLIC_KEY = {key: value for key, value in JWK_KEY.items() if key != 'd'}\nDOMAIN = 'foobar.auth0.com'\nclass Auth0OAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.auth0.Auth0OAuth2'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n        'expires_in': 86400,\n        'id_token': jwt.encode({\n            'nickname': 'foobar',",
        "detail": "social_core.tests.backends.test_auth0",
        "documentation": {}
    },
    {
        "label": "DOMAIN",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_auth0",
        "description": "social_core.tests.backends.test_auth0",
        "peekOfCode": "DOMAIN = 'foobar.auth0.com'\nclass Auth0OAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.auth0.Auth0OAuth2'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n        'expires_in': 86400,\n        'id_token': jwt.encode({\n            'nickname': 'foobar',\n            'email': 'foobar@auth0.com',",
        "detail": "social_core.tests.backends.test_auth0",
        "documentation": {}
    },
    {
        "label": "AzureADOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_azuread",
        "description": "social_core.tests.backends.test_azuread",
        "peekOfCode": "class AzureADOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.azuread.AzureADOAuth2'\n    user_data_url = 'https://graph.windows.net/me'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n        'id_token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL'\n                    '3N0cy53aW5kb3dzLm5ldC83Mjc0MDZhYy03MDY4LTQ4ZmEtOTJiOS1jMmQ'\n                    '2NzIxMWJjNTAvIiwiaWF0IjpudWxsLCJleHAiOm51bGwsImF1ZCI6IjAyO'",
        "detail": "social_core.tests.backends.test_azuread",
        "documentation": {}
    },
    {
        "label": "AzureADOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_azuread_b2c",
        "description": "social_core.tests.backends.test_azuread_b2c",
        "peekOfCode": "class AzureADOAuth2Test(OAuth2Test):\n    AUTH_KEY = 'abcdef12-1234-9876-0000-abcdef098765'\n    EXPIRES_IN = 3600\n    AUTH_TIME = int(time())\n    EXPIRES_ON = AUTH_TIME + EXPIRES_IN\n    backend_path = 'social_core.backends.azuread_b2c.AzureADB2COAuth2'\n    expected_username = 'FooBar'\n    refresh_token_body = json.dumps({\n        'access_token': 'foobar-new-token',\n        'token_type': 'bearer',",
        "detail": "social_core.tests.backends.test_azuread_b2c",
        "documentation": {}
    },
    {
        "label": "RSA_PUBLIC_JWT_KEY",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_azuread_b2c",
        "description": "social_core.tests.backends.test_azuread_b2c",
        "peekOfCode": "RSA_PUBLIC_JWT_KEY = {\n    # https://github.com/jpadilla/pyjwt/blob/06f461a/tests/keys/jwk_rsa_pub.json\n    'kty': 'RSA',\n    'kid': 'bilbo.baggins@hobbiton.example',\n    'use': 'sig',\n    'n': 'n4EPtAOCc9AlkeQHPzHStgAbgs7bTZLwUBZdR8_KuKPEHLd4rHVTeT-O-' + \\\n         'XV2jRojdNhxJWTDvNd7nqQ0VEiZQHz_AJmSCpMaJMRBSFKrKb2wqVwGU_NsYOYL-' + \\\n         'QtiWN2lbzcEe6XC0dApr5ydQLrHqkHHig3RBordaZ6Aj-oBHqFEHYpPe7Tpe-' + \\\n         'OfVfHd1E6cS6M1FZcD1NNLYD5lFHpPI9bTwJlsde3uhGqC0ZCuEHg8lhzwOHrt' + \\\n         'IQbS0FVbb9k3-tVTU4fg_3L_vniUFAKwuCLqKnS2BYwdq_mzSnbLY7h_qixoR7' + \\",
        "detail": "social_core.tests.backends.test_azuread_b2c",
        "documentation": {}
    },
    {
        "label": "RSA_PRIVATE_JWT_KEY",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_azuread_b2c",
        "description": "social_core.tests.backends.test_azuread_b2c",
        "peekOfCode": "RSA_PRIVATE_JWT_KEY = {\n    # https://github.com/jpadilla/pyjwt/blob/06f461a/tests/keys/jwk_rsa_key.json\n    'kty': 'RSA',\n    'kid': 'bilbo.baggins@hobbiton.example',\n    'use': 'sig',\n    'n': 'n4EPtAOCc9AlkeQHPzHStgAbgs7bTZLwUBZdR8_KuKPEHLd4rHVTeT-O-' + \\\n         'XV2jRojdNhxJWTDvNd7nqQ0VEiZQHz_AJmSCpMaJMRBSFKrKb2wqVwGU_NsYOYL-' + \\\n         'QtiWN2lbzcEe6XC0dApr5ydQLrHqkHHig3RBordaZ6Aj-oBHqFEHYpPe7Tpe-' + \\\n         'OfVfHd1E6cS6M1FZcD1NNLYD5lFHpPI9bTwJlsde3uhGqC0ZCuEHg8lhzwOHrtIQ' + \\\n         'bS0FVbb9k3-tVTU4fg_3L_vniUFAKwuCLqKnS2BYwdq_mzSnbLY7h_qixoR7jig3' + \\",
        "detail": "social_core.tests.backends.test_azuread_b2c",
        "documentation": {}
    },
    {
        "label": "BehanceOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_behance",
        "description": "social_core.tests.backends.test_behance",
        "peekOfCode": "class BehanceOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.behance.BehanceOAuth2'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'valid': 1,\n        'user': {\n            'username': 'foobar',\n            'city': 'Foo City',\n            'first_name': 'Foo',\n            'last_name': 'Bar',",
        "detail": "social_core.tests.backends.test_behance",
        "documentation": {}
    },
    {
        "label": "BitbucketOAuthMixin",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_bitbucket",
        "description": "social_core.tests.backends.test_bitbucket",
        "peekOfCode": "class BitbucketOAuthMixin:\n    user_data_url = 'https://api.bitbucket.org/2.0/user'\n    expected_username = 'foobar'\n    bb_api_user_emails = 'https://api.bitbucket.org/2.0/user/emails'\n    user_data_body = json.dumps({\n        'created_on': '2012-03-29T18:07:38+00:00',\n        'display_name': 'Foo Bar',\n        'links': {\n            'avatar': {'href': 'https://bitbucket.org/account/foobar/avatar/32/'},\n            'followers': {'href': 'https://api.bitbucket.org/2.0/users/foobar/followers'},",
        "detail": "social_core.tests.backends.test_bitbucket",
        "documentation": {}
    },
    {
        "label": "BitbucketOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_bitbucket",
        "description": "social_core.tests.backends.test_bitbucket",
        "peekOfCode": "class BitbucketOAuth1Test(BitbucketOAuthMixin, OAuth1Test):\n    backend_path = 'social_core.backends.bitbucket.BitbucketOAuth'\n    request_token_body = urlencode({\n        'oauth_token_secret': 'foobar-secret',\n        'oauth_token': 'foobar',\n        'oauth_callback_confirmed': 'true'\n    })\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'",
        "detail": "social_core.tests.backends.test_bitbucket",
        "documentation": {}
    },
    {
        "label": "BitbucketOAuth1FailTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_bitbucket",
        "description": "social_core.tests.backends.test_bitbucket",
        "peekOfCode": "class BitbucketOAuth1FailTest(BitbucketOAuth1Test):\n    emails_body = json.dumps({\n        'page': 1,\n        'pagelen': 10,\n        'size': 1,\n        'values': [\n            {\n                'email': 'foo@bar.com',\n                'is_confirmed': False,\n                'is_primary': True,",
        "detail": "social_core.tests.backends.test_bitbucket",
        "documentation": {}
    },
    {
        "label": "BitbucketOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_bitbucket",
        "description": "social_core.tests.backends.test_bitbucket",
        "peekOfCode": "class BitbucketOAuth2Test(BitbucketOAuthMixin, OAuth2Test):\n    backend_path = 'social_core.backends.bitbucket.BitbucketOAuth2'\n    access_token_body = json.dumps({\n        'access_token': 'foobar_access',\n        'scopes': 'foo_scope',\n        'expires_in': 3600,\n        'refresh_token': 'foobar_refresh',\n        'token_type': 'bearer'\n    })\n    def test_login(self):",
        "detail": "social_core.tests.backends.test_bitbucket",
        "documentation": {}
    },
    {
        "label": "BitbucketOAuth2FailTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_bitbucket",
        "description": "social_core.tests.backends.test_bitbucket",
        "peekOfCode": "class BitbucketOAuth2FailTest(BitbucketOAuth2Test):\n    emails_body = json.dumps({\n        'page': 1,\n        'pagelen': 10,\n        'size': 1,\n        'values': [\n            {\n                'email': 'foo@bar.com',\n                'is_confirmed': False,\n                'is_primary': True,",
        "detail": "social_core.tests.backends.test_bitbucket",
        "documentation": {}
    },
    {
        "label": "BoxOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_box",
        "description": "social_core.tests.backends.test_box",
        "peekOfCode": "class BoxOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.box.BoxOAuth2'\n    user_data_url = 'https://api.box.com/2.0/users/me'\n    expected_username = 'sean+awesome@box.com'\n    access_token_body = json.dumps({\n        'access_token': 'T9cE5asGnuyYCCqIZFoWjFHvNbvVqHjl',\n        'expires_in': 3600,\n        'restricted_to': [],\n        'token_type': 'bearer',\n        'refresh_token': 'J7rxTiWOHMoSC1isKZKBZWizoRXjkQzig5C6jFgCVJ9bU'",
        "detail": "social_core.tests.backends.test_box",
        "documentation": {}
    },
    {
        "label": "BrokenBackendAuth",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_broken",
        "description": "social_core.tests.backends.test_broken",
        "peekOfCode": "class BrokenBackendAuth(BaseAuth):\n    name = 'broken'\nclass BrokenBackendTest(unittest.TestCase):\n    def setUp(self):\n        self.backend = BrokenBackendAuth(TestStrategy(TestStorage))\n    def tearDown(self):\n        self.backend = None\n    def test_auth_url(self):\n        with self.assertRaisesRegex(NotImplementedError,\n                                    'Implement in subclass'):",
        "detail": "social_core.tests.backends.test_broken",
        "documentation": {}
    },
    {
        "label": "BrokenBackendTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_broken",
        "description": "social_core.tests.backends.test_broken",
        "peekOfCode": "class BrokenBackendTest(unittest.TestCase):\n    def setUp(self):\n        self.backend = BrokenBackendAuth(TestStrategy(TestStorage))\n    def tearDown(self):\n        self.backend = None\n    def test_auth_url(self):\n        with self.assertRaisesRegex(NotImplementedError,\n                                    'Implement in subclass'):\n            self.backend.auth_url()\n    def test_auth_html(self):",
        "detail": "social_core.tests.backends.test_broken",
        "documentation": {}
    },
    {
        "label": "ChatworkOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_chatwork",
        "description": "social_core.tests.backends.test_chatwork",
        "peekOfCode": "class ChatworkOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.chatwork.ChatworkOAuth2'\n    user_data_url = 'https://api.chatwork.com/v2/me'\n    expected_username = 'hogehoge'\n    access_token_body = json.dumps({\n        'access_token': 'pyopyopyopyopyopyopyopyopyopyo',\n        'token_type': 'Bearer',\n        'expires_in': '1501138041000',\n        'refresh_token': 'pyopyopyopyopyopyo',\n        'scope': 'rooms.all:read_write'",
        "detail": "social_core.tests.backends.test_chatwork",
        "documentation": {}
    },
    {
        "label": "CILogonOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_cilogon",
        "description": "social_core.tests.backends.test_cilogon",
        "peekOfCode": "class CILogonOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.cilogon.CILogonOAuth2'\n    user_data_url = 'https://cilogon.org/oauth2/userinfo'\n    user_data_url_post = True\n    expected_username = 'jbasney@illinois.edu'\n    access_token_body = json.dumps({\n        'access_token':'https://cilogon.org/oauth2/accessToken/sample-token123',\n        'refresh_token':'https://cilogon.org/oauth2/refreshToken/sample123/refresh-token123',\n        'id_token':'aBigStringOfRandomChars.123abc',\n        'token_type':'Bearer',",
        "detail": "social_core.tests.backends.test_cilogon",
        "documentation": {}
    },
    {
        "label": "ClefOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_clef",
        "description": "social_core.tests.backends.test_clef",
        "peekOfCode": "class ClefOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.clef.ClefOAuth2'\n    user_data_url = 'https://clef.io/api/v1/info'\n    expected_username = 'test'\n    access_token_body = json.dumps({\n        'access_token': 'foobar'\n    })\n    user_data_body = json.dumps({\n        'info': {\n            'id': '123456789',",
        "detail": "social_core.tests.backends.test_clef",
        "documentation": {}
    },
    {
        "label": "CognitoAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_cognito",
        "description": "social_core.tests.backends.test_cognito",
        "peekOfCode": "class CognitoAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.cognito.CognitoOAuth2'\n    pool_domain = 'https://social_core.auth.eu-west-1.amazoncognito.com'\n    expected_username = 'cognito.account.ABCDE1234'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'given_name': 'John',",
        "detail": "social_core.tests.backends.test_cognito",
        "documentation": {}
    },
    {
        "label": "CoinbaseOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_coinbase",
        "description": "social_core.tests.backends.test_coinbase",
        "peekOfCode": "class CoinbaseOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.coinbase.CoinbaseOAuth2'\n    user_data_url = 'https://api.coinbase.com/v2/user'\n    expected_username = 'satoshi_nakomoto'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'data': {",
        "detail": "social_core.tests.backends.test_coinbase",
        "documentation": {}
    },
    {
        "label": "CourseraOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_coursera",
        "description": "social_core.tests.backends.test_coursera",
        "peekOfCode": "class CourseraOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.coursera.CourseraOAuth2'\n    user_data_url = \\\n        'https://api.coursera.org/api/externalBasicProfiles.v1?q=me'\n    expected_username = '560e7ed2076e0d589e88bd74b6aad4b7'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'Bearer',\n        'expires_in': 1795\n    })",
        "detail": "social_core.tests.backends.test_coursera",
        "documentation": {}
    },
    {
        "label": "DailymotionOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_dailymotion",
        "description": "social_core.tests.backends.test_dailymotion",
        "peekOfCode": "class DailymotionOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.dailymotion.DailymotionOAuth2'\n    user_data_url = 'https://api.dailymotion.com/auth/'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'id': 'foobar',",
        "detail": "social_core.tests.backends.test_dailymotion",
        "documentation": {}
    },
    {
        "label": "DeezerOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_deezer",
        "description": "social_core.tests.backends.test_deezer",
        "peekOfCode": "class DeezerOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.deezer.DeezerOAuth2'\n    user_data_url = 'http://api.deezer.com/user/me'\n    expected_username = 'foobar'\n    access_token_body = 'access_token=foobar&expires=0'\n    user_data_body = json.dumps({\n        'id': '1',\n        'name': 'foobar',\n        'lastname': '',\n        'firstname': '',",
        "detail": "social_core.tests.backends.test_deezer",
        "documentation": {}
    },
    {
        "label": "DigitalOceanOAuthTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_digitalocean",
        "description": "social_core.tests.backends.test_digitalocean",
        "peekOfCode": "class DigitalOceanOAuthTest(OAuth2Test):\n    backend_path = 'social_core.backends.digitalocean.DigitalOceanOAuth'\n    user_data_url = 'https://api.digitalocean.com/v2/account'\n    expected_username = 'sammy@digitalocean.com'\n    access_token_body = json.dumps({\n        'access_token': '547cac21118ae7',\n        'token_type': 'bearer',\n        'expires_in': 2592000,\n        'refresh_token': '00a3aae641658d',\n        'scope': 'read write',",
        "detail": "social_core.tests.backends.test_digitalocean",
        "documentation": {}
    },
    {
        "label": "DiscourseTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_discourse",
        "description": "social_core.tests.backends.test_discourse",
        "peekOfCode": "class DiscourseTest(BaseBackendTest):\n    backend_path = 'social_core.backends.discourse.DiscourseAuth'\n    expected_username = 'beepboop'\n    raw_complete_url = '/complete/{0}/'\n    def post_start(self):\n        pass\n    def do_start(self):\n        self.post_start()\n        start = self.backend.start()\n        start_url = start.url",
        "detail": "social_core.tests.backends.test_discourse",
        "documentation": {}
    },
    {
        "label": "DisqusOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_disqus",
        "description": "social_core.tests.backends.test_disqus",
        "peekOfCode": "class DisqusOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.disqus.DisqusOAuth2'\n    user_data_url = 'https://disqus.com/api/3.0/users/details.json'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'code': 0,",
        "detail": "social_core.tests.backends.test_disqus",
        "documentation": {}
    },
    {
        "label": "DribbbleOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_dribbble",
        "description": "social_core.tests.backends.test_dribbble",
        "peekOfCode": "class DribbbleOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.dribbble.DribbbleOAuth2'\n    user_data_url = 'https://api.dribbble.com/v1/user'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'id': 'foobar',",
        "detail": "social_core.tests.backends.test_dribbble",
        "documentation": {}
    },
    {
        "label": "DripOAuthTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_drip",
        "description": "social_core.tests.backends.test_drip",
        "peekOfCode": "class DripOAuthTest(OAuth2Test):\n    backend_path = 'social_core.backends.drip.DripOAuth'\n    user_data_url = 'https://api.getdrip.com/v2/user'\n    expected_username = 'other@example.com'\n    access_token_body = json.dumps({\n        'access_token': '822bbf7cd12243df',\n        'token_type': 'bearer',\n        'scope': 'public'\n    })\n    user_data_body = json.dumps({",
        "detail": "social_core.tests.backends.test_drip",
        "documentation": {}
    },
    {
        "label": "DropboxOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_dropbox",
        "description": "social_core.tests.backends.test_dropbox",
        "peekOfCode": "class DropboxOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.dropbox.DropboxOAuth2V2'\n    user_data_url = 'https://api.dropboxapi.com/2/users/get_current_account'\n    user_data_url_post = True\n    expected_username = 'dbidAAH4f99T0taONIb-OurWxbNQ6ywGRopQngc'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({",
        "detail": "social_core.tests.backends.test_dropbox",
        "documentation": {}
    },
    {
        "label": "DummyOAuth2",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_dummy",
        "description": "social_core.tests.backends.test_dummy",
        "peekOfCode": "class DummyOAuth2(BaseOAuth2):\n    name = 'dummy'\n    AUTHORIZATION_URL = 'http://dummy.com/oauth/authorize'\n    ACCESS_TOKEN_URL = 'http://dummy.com/oauth/access_token'\n    REVOKE_TOKEN_URL = 'https://dummy.com/oauth/revoke'\n    REVOKE_TOKEN_METHOD = 'GET'\n    GET_ALL_EXTRA_DATA = False\n    EXTRA_DATA = [\n        ('id', 'id'),\n        ('expires', 'expires'),",
        "detail": "social_core.tests.backends.test_dummy",
        "documentation": {}
    },
    {
        "label": "Dummy2OAuth2",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_dummy",
        "description": "social_core.tests.backends.test_dummy",
        "peekOfCode": "class Dummy2OAuth2(DummyOAuth2):\n    GET_ALL_EXTRA_DATA = True\nclass DummyOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.tests.backends.test_dummy.DummyOAuth2'\n    user_data_url = 'http://dummy.com/user'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })",
        "detail": "social_core.tests.backends.test_dummy",
        "documentation": {}
    },
    {
        "label": "DummyOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_dummy",
        "description": "social_core.tests.backends.test_dummy",
        "peekOfCode": "class DummyOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.tests.backends.test_dummy.DummyOAuth2'\n    user_data_url = 'http://dummy.com/user'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'id': 1,",
        "detail": "social_core.tests.backends.test_dummy",
        "documentation": {}
    },
    {
        "label": "WhitelistEmailsTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_dummy",
        "description": "social_core.tests.backends.test_dummy",
        "peekOfCode": "class WhitelistEmailsTest(DummyOAuth2Test):\n    def test_valid_login(self):\n        self.strategy.set_settings({\n            'SOCIAL_AUTH_WHITELISTED_EMAILS': ['foo@bar.com']\n        })\n        self.do_login()\n    def test_invalid_login(self):\n        self.strategy.set_settings({\n            'SOCIAL_AUTH_WHITELISTED_EMAILS': ['foo2@bar.com']\n        })",
        "detail": "social_core.tests.backends.test_dummy",
        "documentation": {}
    },
    {
        "label": "WhitelistDomainsTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_dummy",
        "description": "social_core.tests.backends.test_dummy",
        "peekOfCode": "class WhitelistDomainsTest(DummyOAuth2Test):\n    def test_valid_login(self):\n        self.strategy.set_settings({\n            'SOCIAL_AUTH_WHITELISTED_DOMAINS': ['bar.com']\n        })\n        self.do_login()\n    def test_invalid_login(self):\n        self.strategy.set_settings({\n            'SOCIAL_AUTH_WHITELISTED_EMAILS': ['bar2.com']\n        })",
        "detail": "social_core.tests.backends.test_dummy",
        "documentation": {}
    },
    {
        "label": "ExpirationTimeTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_dummy",
        "description": "social_core.tests.backends.test_dummy",
        "peekOfCode": "class ExpirationTimeTest(DummyOAuth2Test):\n    user_data_body = json.dumps({\n        'id': 1,\n        'username': 'foobar',\n        'url': 'http://dummy.com/user/foobar',\n        'first_name': 'Foo',\n        'last_name': 'Bar',\n        'email': 'foo@bar.com',\n        'expires': time.mktime((datetime.datetime.utcnow() +\n                                DELTA).timetuple())",
        "detail": "social_core.tests.backends.test_dummy",
        "documentation": {}
    },
    {
        "label": "AllExtraDataTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_dummy",
        "description": "social_core.tests.backends.test_dummy",
        "peekOfCode": "class AllExtraDataTest(DummyOAuth2Test):\n    backend_path = 'social_core.tests.backends.test_dummy.Dummy2OAuth2'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'id': 1,\n        'username': 'foobar',\n        'url': 'http://dummy.com/user/foobar',",
        "detail": "social_core.tests.backends.test_dummy",
        "documentation": {}
    },
    {
        "label": "DELTA",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_dummy",
        "description": "social_core.tests.backends.test_dummy",
        "peekOfCode": "DELTA = datetime.timedelta(days=1)\nclass ExpirationTimeTest(DummyOAuth2Test):\n    user_data_body = json.dumps({\n        'id': 1,\n        'username': 'foobar',\n        'url': 'http://dummy.com/user/foobar',\n        'first_name': 'Foo',\n        'last_name': 'Bar',\n        'email': 'foo@bar.com',\n        'expires': time.mktime((datetime.datetime.utcnow() +",
        "detail": "social_core.tests.backends.test_dummy",
        "documentation": {}
    },
    {
        "label": "EdmodoOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_edmodo",
        "description": "social_core.tests.backends.test_edmodo",
        "peekOfCode": "class EdmodoOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.edmodo.EdmodoOAuth2'\n    user_data_url = 'https://api.edmodo.com/users/me'\n    expected_username = 'foobar12345'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'username': 'foobar12345',",
        "detail": "social_core.tests.backends.test_edmodo",
        "documentation": {}
    },
    {
        "label": "ElixirOpenIdConnectTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_elixir",
        "description": "social_core.tests.backends.test_elixir",
        "peekOfCode": "class ElixirOpenIdConnectTest(OpenIdConnectTestMixin, OAuth2Test):\n    backend_path = 'social_core.backends.elixir.ElixirOpenIdConnect'\n    issuer = 'https://login.elixir-czech.org/oidc/'\n    openid_config_body = \"\"\"\n    {\n        \"claims_supported\": [\n            \"sub\",\n            \"name\",\n            \"preferred_username\",\n            \"given_name\",",
        "detail": "social_core.tests.backends.test_elixir",
        "documentation": {}
    },
    {
        "label": "EmailTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_email",
        "description": "social_core.tests.backends.test_email",
        "peekOfCode": "class EmailTest(BaseLegacyTest):\n    backend_path = 'social_core.backends.email.EmailAuth'\n    expected_username = 'foo'\n    response_body = 'email=foo@bar.com'\n    form = \"\"\"\n    <form method=\"post\" action=\"{0}\">\n        <input name=\"email\" type=\"text\">\n        <button>Submit</button>\n    </form>\n    \"\"\"",
        "detail": "social_core.tests.backends.test_email",
        "documentation": {}
    },
    {
        "label": "EventbriteAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_eventbrite",
        "description": "social_core.tests.backends.test_eventbrite",
        "peekOfCode": "class EventbriteAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.eventbrite.EventbriteOAuth2'\n    user_data_url = 'https://www.eventbriteapi.com/v3/users/me'\n    expected_username = 'sean+awesome@eventbrite.com'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'first_name': 'sean',",
        "detail": "social_core.tests.backends.test_eventbrite",
        "documentation": {}
    },
    {
        "label": "EvernoteOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_evernote",
        "description": "social_core.tests.backends.test_evernote",
        "peekOfCode": "class EvernoteOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.evernote.EvernoteOAuth'\n    expected_username = '101010'\n    access_token_body = urlencode({\n        'edam_webApiUrlPrefix': 'https://sandbox.evernote.com/shard/s1/',\n        'edam_shard': 's1',\n        'oauth_token': 'foobar',\n        'edam_expires': '1395118279645',\n        'edam_userId': '101010',\n        'edam_noteStoreUrl': 'https://sandbox.evernote.com/shard/s1/notestore'",
        "detail": "social_core.tests.backends.test_evernote",
        "documentation": {}
    },
    {
        "label": "EvernoteOAuth1CanceledTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_evernote",
        "description": "social_core.tests.backends.test_evernote",
        "peekOfCode": "class EvernoteOAuth1CanceledTest(EvernoteOAuth1Test):\n    access_token_status = 401\n    def test_login(self):\n        with self.assertRaises(AuthCanceled) as cm:\n            self.do_login()\n        self.assertTrue(cm.exception.response is not None)\n    def test_partial_pipeline(self):\n        with self.assertRaises(AuthCanceled) as cm:\n            self.do_partial_pipeline()\n        self.assertTrue(cm.exception.response is not None)",
        "detail": "social_core.tests.backends.test_evernote",
        "documentation": {}
    },
    {
        "label": "EvernoteOAuth1ErrorTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_evernote",
        "description": "social_core.tests.backends.test_evernote",
        "peekOfCode": "class EvernoteOAuth1ErrorTest(EvernoteOAuth1Test):\n    access_token_status = 500\n    def test_login(self):\n        with self.assertRaises(HTTPError):\n            self.do_login()\n    def test_partial_pipeline(self):\n        with self.assertRaises(HTTPError):\n            self.do_partial_pipeline()",
        "detail": "social_core.tests.backends.test_evernote",
        "documentation": {}
    },
    {
        "label": "FacebookOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_facebook",
        "description": "social_core.tests.backends.test_facebook",
        "peekOfCode": "class FacebookOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.facebook.FacebookOAuth2'\n    user_data_url = 'https://graph.facebook.com/v{version}/me'.format(\n        version=API_VERSION\n    )\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })",
        "detail": "social_core.tests.backends.test_facebook",
        "documentation": {}
    },
    {
        "label": "FacebookOAuth2WrongUserDataTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_facebook",
        "description": "social_core.tests.backends.test_facebook",
        "peekOfCode": "class FacebookOAuth2WrongUserDataTest(FacebookOAuth2Test):\n    user_data_body = 'null'\n    def test_login(self):\n        with self.assertRaises(AuthUnknownError):\n            self.do_login()\n    def test_partial_pipeline(self):\n        with self.assertRaises(AuthUnknownError):\n            self.do_partial_pipeline()\nclass FacebookOAuth2AuthCancelTest(FacebookOAuth2Test):\n    access_token_status = 400",
        "detail": "social_core.tests.backends.test_facebook",
        "documentation": {}
    },
    {
        "label": "FacebookOAuth2AuthCancelTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_facebook",
        "description": "social_core.tests.backends.test_facebook",
        "peekOfCode": "class FacebookOAuth2AuthCancelTest(FacebookOAuth2Test):\n    access_token_status = 400\n    access_token_body = json.dumps({\n        'error': {\n            'message': \"redirect_uri isn't an absolute URI. Check RFC 3986.\",\n            'code': 191,\n            'type': 'OAuthException',\n            'fbtrace_id': '123Abc'\n        }\n    })",
        "detail": "social_core.tests.backends.test_facebook",
        "documentation": {}
    },
    {
        "label": "FenceOpenIdConnectTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_fence",
        "description": "social_core.tests.backends.test_fence",
        "peekOfCode": "class FenceOpenIdConnectTest(OpenIdConnectTestMixin, OAuth2Test):\n    backend_path = \\\n        'social_core.backends.fence.Fence'\n    issuer = 'https://nci-crdc.datacommons.io/'\n    openid_config_body = json.dumps({\n        'issuer': 'https://nci-crdc.datacommons.io/',\n        'authorization_endpoint': 'https://nci-crdc.datacommons.io/user/oauth2/authorize',\n        'userinfo_endpoint': 'https://nci-crdc.datacommons.io/user/user/',\n        'token_endpoint': 'https://nci-crdc.datacommons.io/user/oauth2/token',\n        'revocation_endpoint': 'https://nci-crdc.datacommons.io/user/oauth2/revoke',",
        "detail": "social_core.tests.backends.test_fence",
        "documentation": {}
    },
    {
        "label": "FitbitOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_fitbit",
        "description": "social_core.tests.backends.test_fitbit",
        "peekOfCode": "class FitbitOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.fitbit.FitbitOAuth1'\n    expected_username = 'foobar'\n    access_token_body = urlencode({\n        'oauth_token_secret': 'a-secret',\n        'encoded_user_id': '101010',\n        'oauth_token': 'foobar'\n    })\n    request_token_body = urlencode({\n        'oauth_token_secret': 'foobar-secret',",
        "detail": "social_core.tests.backends.test_fitbit",
        "documentation": {}
    },
    {
        "label": "FiveHundredPxOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_five_hundred_px",
        "description": "social_core.tests.backends.test_five_hundred_px",
        "peekOfCode": "class FiveHundredPxOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.five_hundred_px.FiveHundredPxOAuth'\n    user_data_url = 'https://api.500px.com/v1/users'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    request_token_body = urlencode({\n        'oauth_token_secret': 'foobar-secret',",
        "detail": "social_core.tests.backends.test_five_hundred_px",
        "documentation": {}
    },
    {
        "label": "FlatOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_flat",
        "description": "social_core.tests.backends.test_flat",
        "peekOfCode": "class FlatOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.flat.FlatOAuth2'\n    user_data_url = 'https://api.flat.io/v2/me'\n    expected_username = 'vincent'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'id': '541a137946fd04d57cb2e3c0',",
        "detail": "social_core.tests.backends.test_flat",
        "documentation": {}
    },
    {
        "label": "FlickrOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_flickr",
        "description": "social_core.tests.backends.test_flickr",
        "peekOfCode": "class FlickrOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.flickr.FlickrOAuth'\n    expected_username = 'foobar'\n    access_token_body = urlencode({\n        'oauth_token_secret': 'a-secret',\n        'username': 'foobar',\n        'oauth_token': 'foobar',\n        'user_nsid': '10101010@N01'\n    })\n    request_token_body = urlencode({",
        "detail": "social_core.tests.backends.test_flickr",
        "documentation": {}
    },
    {
        "label": "FoursquareOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_foursquare",
        "description": "social_core.tests.backends.test_foursquare",
        "peekOfCode": "class FoursquareOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.foursquare.FoursquareOAuth2'\n    user_data_url = 'https://api.foursquare.com/v2/users/self'\n    expected_username = 'FooBar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'notifications': [{",
        "detail": "social_core.tests.backends.test_foursquare",
        "documentation": {}
    },
    {
        "label": "GiteaOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_gitea",
        "description": "social_core.tests.backends.test_gitea",
        "peekOfCode": "class GiteaOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.gitea.GiteaOAuth2'\n    user_data_url = 'https://gitea.com/api/v1/user'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n        'expires_in': 7200,\n        'refresh_token': 'barfoo'\n    })",
        "detail": "social_core.tests.backends.test_gitea",
        "documentation": {}
    },
    {
        "label": "GiteaCustomDomainOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_gitea",
        "description": "social_core.tests.backends.test_gitea",
        "peekOfCode": "class GiteaCustomDomainOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.gitea.GiteaOAuth2'\n    user_data_url = 'https://example.com/api/v1/user'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n        'expires_in': 7200,\n        'refresh_token': 'barfoo'\n    })",
        "detail": "social_core.tests.backends.test_gitea",
        "documentation": {}
    },
    {
        "label": "GithubOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_github",
        "description": "social_core.tests.backends.test_github",
        "peekOfCode": "class GithubOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.github.GithubOAuth2'\n    user_data_url = 'https://api.github.com/user'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'login': 'foobar',",
        "detail": "social_core.tests.backends.test_github",
        "documentation": {}
    },
    {
        "label": "GithubOAuth2NoEmailTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_github",
        "description": "social_core.tests.backends.test_github",
        "peekOfCode": "class GithubOAuth2NoEmailTest(GithubOAuth2Test):\n    user_data_body = json.dumps({\n        'login': 'foobar',\n        'id': 1,\n        'avatar_url': 'https://github.com/images/error/foobar_happy.gif',\n        'gravatar_id': 'somehexcode',\n        'url': 'https://api.github.com/users/foobar',\n        'name': 'monalisa foobar',\n        'company': 'GitHub',\n        'blog': 'https://github.com/blog',",
        "detail": "social_core.tests.backends.test_github",
        "documentation": {}
    },
    {
        "label": "GithubOrganizationOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_github",
        "description": "social_core.tests.backends.test_github",
        "peekOfCode": "class GithubOrganizationOAuth2Test(GithubOAuth2Test):\n    backend_path = 'social_core.backends.github.GithubOrganizationOAuth2'\n    def auth_handlers(self, start_url):\n        url = 'https://api.github.com/orgs/foobar/members/foobar'\n        HTTPretty.register_uri(HTTPretty.GET, url, status=204, body='')\n        return super().auth_handlers(start_url)\n    def test_login(self):\n        self.strategy.set_settings({'SOCIAL_AUTH_GITHUB_ORG_NAME': 'foobar'})\n        self.do_login()\n    def test_partial_pipeline(self):",
        "detail": "social_core.tests.backends.test_github",
        "documentation": {}
    },
    {
        "label": "GithubOrganizationOAuth2FailTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_github",
        "description": "social_core.tests.backends.test_github",
        "peekOfCode": "class GithubOrganizationOAuth2FailTest(GithubOAuth2Test):\n    backend_path = 'social_core.backends.github.GithubOrganizationOAuth2'\n    def auth_handlers(self, start_url):\n        url = 'https://api.github.com/orgs/foobar/members/foobar'\n        HTTPretty.register_uri(HTTPretty.GET, url, status=404,\n                               body='{\"message\": \"Not Found\"}',\n                               content_type='application/json')\n        return super().auth_handlers(start_url)\n    def test_login(self):\n        self.strategy.set_settings({'SOCIAL_AUTH_GITHUB_ORG_NAME': 'foobar'})",
        "detail": "social_core.tests.backends.test_github",
        "documentation": {}
    },
    {
        "label": "GithubTeamOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_github",
        "description": "social_core.tests.backends.test_github",
        "peekOfCode": "class GithubTeamOAuth2Test(GithubOAuth2Test):\n    backend_path = 'social_core.backends.github.GithubTeamOAuth2'\n    def auth_handlers(self, start_url):\n        url = 'https://api.github.com/teams/123/members/foobar'\n        HTTPretty.register_uri(HTTPretty.GET, url, status=204, body='')\n        return super().auth_handlers(start_url)\n    def test_login(self):\n        self.strategy.set_settings({'SOCIAL_AUTH_GITHUB_TEAM_ID': '123'})\n        self.do_login()\n    def test_partial_pipeline(self):",
        "detail": "social_core.tests.backends.test_github",
        "documentation": {}
    },
    {
        "label": "GithubTeamOAuth2FailTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_github",
        "description": "social_core.tests.backends.test_github",
        "peekOfCode": "class GithubTeamOAuth2FailTest(GithubOAuth2Test):\n    backend_path = 'social_core.backends.github.GithubTeamOAuth2'\n    def auth_handlers(self, start_url):\n        url = 'https://api.github.com/teams/123/members/foobar'\n        HTTPretty.register_uri(HTTPretty.GET, url, status=404,\n                               body='{\"message\": \"Not Found\"}',\n                               content_type='application/json')\n        return super().auth_handlers(start_url)\n    def test_login(self):\n        self.strategy.set_settings({'SOCIAL_AUTH_GITHUB_TEAM_ID': '123'})",
        "detail": "social_core.tests.backends.test_github",
        "documentation": {}
    },
    {
        "label": "GithubEnterpriseOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_github_enterprise",
        "description": "social_core.tests.backends.test_github_enterprise",
        "peekOfCode": "class GithubEnterpriseOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.github_enterprise.GithubEnterpriseOAuth2'\n    user_data_url = 'https://www.example.com/api/v3/user'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'login': 'foobar',",
        "detail": "social_core.tests.backends.test_github_enterprise",
        "documentation": {}
    },
    {
        "label": "GithubEnterpriseOAuth2NoEmailTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_github_enterprise",
        "description": "social_core.tests.backends.test_github_enterprise",
        "peekOfCode": "class GithubEnterpriseOAuth2NoEmailTest(GithubEnterpriseOAuth2Test):\n    user_data_body = json.dumps({\n        'login': 'foobar',\n        'id': 1,\n        'avatar_url': 'https://www.example.com/images/error/foobar_happy.gif',\n        'gravatar_id': 'somehexcode',\n        'url': 'https://www.example.com/api/v3/users/foobar',\n        'name': 'monalisa foobar',\n        'company': 'GitHub',\n        'blog': 'https://www.example.com/blog',",
        "detail": "social_core.tests.backends.test_github_enterprise",
        "documentation": {}
    },
    {
        "label": "GithubEnterpriseOrganizationOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_github_enterprise",
        "description": "social_core.tests.backends.test_github_enterprise",
        "peekOfCode": "class GithubEnterpriseOrganizationOAuth2Test(GithubEnterpriseOAuth2Test):\n    backend_path = 'social_core.backends.github_enterprise.GithubEnterpriseOrganizationOAuth2'\n    def auth_handlers(self, start_url):\n        url = 'https://www.example.com/api/v3/orgs/foobar/members/foobar'\n        HTTPretty.register_uri(HTTPretty.GET, url, status=204, body='')\n        return super().auth_handlers(start_url)\n    def test_login(self):\n        self.strategy.set_settings({\n            'SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL': 'https://www.example.com'})\n        self.strategy.set_settings({",
        "detail": "social_core.tests.backends.test_github_enterprise",
        "documentation": {}
    },
    {
        "label": "GithubEnterpriseOrganizationOAuth2FailTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_github_enterprise",
        "description": "social_core.tests.backends.test_github_enterprise",
        "peekOfCode": "class GithubEnterpriseOrganizationOAuth2FailTest(GithubEnterpriseOAuth2Test):\n    backend_path = 'social_core.backends.github_enterprise.GithubEnterpriseOrganizationOAuth2'\n    def auth_handlers(self, start_url):\n        url = 'https://www.example.com/api/v3/orgs/foobar/members/foobar'\n        HTTPretty.register_uri(HTTPretty.GET, url, status=404,\n                               body='{\"message\": \"Not Found\"}',\n                               content_type='application/json')\n        return super().auth_handlers(start_url)\n    def test_login(self):\n        self.strategy.set_settings({",
        "detail": "social_core.tests.backends.test_github_enterprise",
        "documentation": {}
    },
    {
        "label": "GithubEnterpriseTeamOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_github_enterprise",
        "description": "social_core.tests.backends.test_github_enterprise",
        "peekOfCode": "class GithubEnterpriseTeamOAuth2Test(GithubEnterpriseOAuth2Test):\n    backend_path = 'social_core.backends.github_enterprise.GithubEnterpriseTeamOAuth2'\n    def auth_handlers(self, start_url):\n        url = 'https://www.example.com/api/v3/teams/123/members/foobar'\n        HTTPretty.register_uri(HTTPretty.GET, url, status=204, body='')\n        return super().auth_handlers(start_url)\n    def test_login(self):\n        self.strategy.set_settings({\n            'SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL': 'https://www.example.com'})\n        self.strategy.set_settings({",
        "detail": "social_core.tests.backends.test_github_enterprise",
        "documentation": {}
    },
    {
        "label": "GithubEnterpriseTeamOAuth2FailTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_github_enterprise",
        "description": "social_core.tests.backends.test_github_enterprise",
        "peekOfCode": "class GithubEnterpriseTeamOAuth2FailTest(GithubEnterpriseOAuth2Test):\n    backend_path = 'social_core.backends.github_enterprise.GithubEnterpriseTeamOAuth2'\n    def auth_handlers(self, start_url):\n        url = 'https://www.example.com/api/v3/teams/123/members/foobar'\n        HTTPretty.register_uri(HTTPretty.GET, url, status=404,\n                               body='{\"message\": \"Not Found\"}',\n                               content_type='application/json')\n        return super().auth_handlers(start_url)\n    def test_login(self):\n        self.strategy.set_settings({",
        "detail": "social_core.tests.backends.test_github_enterprise",
        "documentation": {}
    },
    {
        "label": "GitLabOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_gitlab",
        "description": "social_core.tests.backends.test_gitlab",
        "peekOfCode": "class GitLabOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.gitlab.GitLabOAuth2'\n    user_data_url = 'https://gitlab.com/api/v4/user'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n        'expires_in': 7200,\n        'refresh_token': 'barfoo'\n    })",
        "detail": "social_core.tests.backends.test_gitlab",
        "documentation": {}
    },
    {
        "label": "GitLabCustomDomainOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_gitlab",
        "description": "social_core.tests.backends.test_gitlab",
        "peekOfCode": "class GitLabCustomDomainOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.gitlab.GitLabOAuth2'\n    user_data_url = 'https://example.com/api/v4/user'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n        'expires_in': 7200,\n        'refresh_token': 'barfoo'\n    })",
        "detail": "social_core.tests.backends.test_gitlab",
        "documentation": {}
    },
    {
        "label": "GlobusOpenIdConnectTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_globus",
        "description": "social_core.tests.backends.test_globus",
        "peekOfCode": "class GlobusOpenIdConnectTest(OpenIdConnectTestMixin, OAuth2Test):\n    backend_path = \\\n        'social_core.backends.globus.GlobusOpenIdConnect'\n    issuer = 'https://auth.globus.org'\n    openid_config_body = json.dumps({\n        'issuer': 'https://auth.globus.org',\n        'authorization_endpoint': 'https://auth.globus.org/v2/oauth2/authorize',\n        'userinfo_endpoint': 'https://auth.globus.org/v2/oauth2/userinfo',\n        'token_endpoint': 'https://auth.globus.org/v2/oauth2/token',\n        'revocation_endpoint': 'https://auth.globus.org/v2/oauth2/token/revoke',",
        "detail": "social_core.tests.backends.test_globus",
        "documentation": {}
    },
    {
        "label": "GoogleOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_google",
        "description": "social_core.tests.backends.test_google",
        "peekOfCode": "class GoogleOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.google.GoogleOAuth2'\n    user_data_url = 'https://www.googleapis.com/oauth2/v3/userinfo'\n    expected_username = 'foo'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'profile': 'https://plus.google.com/101010101010101010101',",
        "detail": "social_core.tests.backends.test_google",
        "documentation": {}
    },
    {
        "label": "GoogleOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_google",
        "description": "social_core.tests.backends.test_google",
        "peekOfCode": "class GoogleOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.google.GoogleOAuth'\n    user_data_url = 'https://www.googleapis.com/userinfo/email'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    request_token_body = urlencode({\n        'oauth_token_secret': 'foobar-secret',",
        "detail": "social_core.tests.backends.test_google",
        "documentation": {}
    },
    {
        "label": "GoogleRevokeTokenTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_google",
        "description": "social_core.tests.backends.test_google",
        "peekOfCode": "class GoogleRevokeTokenTest(GoogleOAuth2Test):\n    def test_revoke_token(self):\n        self.strategy.set_settings({\n            'SOCIAL_AUTH_GOOGLE_OAUTH2_REVOKE_TOKENS_ON_DISCONNECT': True\n        })\n        self.do_login()\n        user = User.get(self.expected_username)\n        user.password = 'password'\n        HTTPretty.register_uri(self._method(self.backend.REVOKE_TOKEN_METHOD),\n                               self.backend.REVOKE_TOKEN_URL,",
        "detail": "social_core.tests.backends.test_google",
        "documentation": {}
    },
    {
        "label": "GoogleOpenIdConnectTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_google",
        "description": "social_core.tests.backends.test_google",
        "peekOfCode": "class GoogleOpenIdConnectTest(OpenIdConnectTestMixin, OAuth2Test):\n    backend_path = \\\n        'social_core.backends.google_openidconnect.GoogleOpenIdConnect'\n    user_data_url = \\\n        'https://www.googleapis.com/plus/v1/people/me/openIdConnect'\n    issuer = 'accounts.google.com'\n    openid_config_body = json.dumps({\n        'issuer': 'https://accounts.google.com',\n        'authorization_endpoint': 'https://accounts.google.com/o/oauth2/v2/auth',\n        'token_endpoint': 'https://www.googleapis.com/oauth2/v4/token',",
        "detail": "social_core.tests.backends.test_google",
        "documentation": {}
    },
    {
        "label": "GrafanaOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_grafana",
        "description": "social_core.tests.backends.test_grafana",
        "peekOfCode": "class GrafanaOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.grafana.GrafanaOAuth2'\n    user_data_url = 'https://grafana.com/api/oauth2/user'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n    })\n    user_data_body = json.dumps({\n        'login': 'fooboy',\n        'email': 'foo@bar.com',",
        "detail": "social_core.tests.backends.test_grafana",
        "documentation": {}
    },
    {
        "label": "InstagramOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_instagram",
        "description": "social_core.tests.backends.test_instagram",
        "peekOfCode": "class InstagramOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.instagram.InstagramOAuth2'\n    user_data_url = 'https://graph.instagram.com/me'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n        'meta': {\n            'code': 200\n        },",
        "detail": "social_core.tests.backends.test_instagram",
        "documentation": {}
    },
    {
        "label": "ItembaseOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_itembase",
        "description": "social_core.tests.backends.test_itembase",
        "peekOfCode": "class ItembaseOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.itembase.ItembaseOAuth2'\n    user_data_url = 'https://users.itembase.com/v1/me'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar-token',\n        'expires_in': 2592000,\n        'token_type': 'bearer',\n        'scope': 'user.minimal',\n        'refresh_token': 'foobar-refresh-token'",
        "detail": "social_core.tests.backends.test_itembase",
        "documentation": {}
    },
    {
        "label": "ItembaseOAuth2SandboxTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_itembase",
        "description": "social_core.tests.backends.test_itembase",
        "peekOfCode": "class ItembaseOAuth2SandboxTest(OAuth2Test):\n    backend_path = 'social_core.backends.itembase.ItembaseOAuth2Sandbox'\n    user_data_url = 'http://sandbox.users.itembase.io/v1/me'",
        "detail": "social_core.tests.backends.test_itembase",
        "documentation": {}
    },
    {
        "label": "KakaoOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_kakao",
        "description": "social_core.tests.backends.test_kakao",
        "peekOfCode": "class KakaoOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.kakao.KakaoOAuth2'\n    user_data_url = 'https://kapi.kakao.com/v2/user/me'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar'\n    })\n    user_data_body = json.dumps({\n        'id': '101010101',\n        'properties': {",
        "detail": "social_core.tests.backends.test_kakao",
        "documentation": {}
    },
    {
        "label": "KeycloakOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_keycloak",
        "description": "social_core.tests.backends.test_keycloak",
        "peekOfCode": "class KeycloakOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.keycloak.KeycloakOAuth2'\n    expected_username = 'john.doe'\n    access_token_body = json.dumps({\n        'token_type': 'Bearer',\n        'id_token': _encode(_PAYLOAD),\n        'access_token': _encode(_PAYLOAD),\n    })\n    def extra_settings(self):\n        return {",
        "detail": "social_core.tests.backends.test_keycloak",
        "documentation": {}
    },
    {
        "label": "_PRIVATE_KEY_HEADERLESS",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_keycloak",
        "description": "social_core.tests.backends.test_keycloak",
        "peekOfCode": "_PRIVATE_KEY_HEADERLESS = \"\"\"\nMIIEowIBAAKCAQEAvyo2hx1L3ALHeUd/6xk/lIhTyZ/HJZ+Sss/ge6T6gPdES4Dw\nBvwGlAp21iEbmjmizsv6+ZsyuKZUiC1J4A90lmIA57aYXHHoh9GBWQZzXeCNgghP\nJpGYYSCN+1qeD4nbwD9cQBtPrGBpPpPtv2a/xdPqDm5ko6adMhmbm8e4Me/ppWPi\n0U+skWQJepBhjEt3x+AOMKDv2TUBWOc3mYFNkr9qNOPe7FxnqUk6ZtkI3QNjZTky\nAU7cat87u1vT5thAxVY18i1GfSZwtQbU3Ba6hXI5SIHB1lS88SJ9/+E/flJJPD2N\nNzv2z3HAVuTUOYi48fnXFHpJLGv+mGLNtE77hwIDAQABAoIBAQCUyQYno2Wnl4Ip\norys/rm9oV2VUAZwAgLrqV/O3Fkch1dgbLpktUNpdbuIbbxODQ3qZliwbVrM3Khu\nVNFq0pyrbxvFPRjY2s9g5m8GGz8vkdaRnmX8XtV6wxu+xoi/D006FBZ4zsj0IRXI\n3tnsXsxj7Mv+72zk8ojmtYend4qlUfzBVTpMRDc4XDC4Ya91fgFgfibtUE1qc8Ap",
        "detail": "social_core.tests.backends.test_keycloak",
        "documentation": {}
    },
    {
        "label": "_PRIVATE_KEY",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_keycloak",
        "description": "social_core.tests.backends.test_keycloak",
        "peekOfCode": "_PRIVATE_KEY = \"\"\"\n-----BEGIN RSA PRIVATE KEY-----\n{_PRIVATE_KEY_HEADERLESS}\n-----END RSA PRIVATE KEY-----\n\"\"\".format(\n    _PRIVATE_KEY_HEADERLESS=_PRIVATE_KEY_HEADERLESS\n)\n_PUBLIC_KEY_HEADERLESS = \"\"\"\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvyo2hx1L3ALHeUd/6xk/\nlIhTyZ/HJZ+Sss/ge6T6gPdES4DwBvwGlAp21iEbmjmizsv6+ZsyuKZUiC1J4A90",
        "detail": "social_core.tests.backends.test_keycloak",
        "documentation": {}
    },
    {
        "label": "_PUBLIC_KEY_HEADERLESS",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_keycloak",
        "description": "social_core.tests.backends.test_keycloak",
        "peekOfCode": "_PUBLIC_KEY_HEADERLESS = \"\"\"\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvyo2hx1L3ALHeUd/6xk/\nlIhTyZ/HJZ+Sss/ge6T6gPdES4DwBvwGlAp21iEbmjmizsv6+ZsyuKZUiC1J4A90\nlmIA57aYXHHoh9GBWQZzXeCNgghPJpGYYSCN+1qeD4nbwD9cQBtPrGBpPpPtv2a/\nxdPqDm5ko6adMhmbm8e4Me/ppWPi0U+skWQJepBhjEt3x+AOMKDv2TUBWOc3mYFN\nkr9qNOPe7FxnqUk6ZtkI3QNjZTkyAU7cat87u1vT5thAxVY18i1GfSZwtQbU3Ba6\nhXI5SIHB1lS88SJ9/+E/flJJPD2NNzv2z3HAVuTUOYi48fnXFHpJLGv+mGLNtE77\nhwIDAQAB\n\"\"\".strip()\n_PUBLIC_KEY = \"\"\"",
        "detail": "social_core.tests.backends.test_keycloak",
        "documentation": {}
    },
    {
        "label": "_PUBLIC_KEY",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_keycloak",
        "description": "social_core.tests.backends.test_keycloak",
        "peekOfCode": "_PUBLIC_KEY = \"\"\"\n-----BEGIN PUBLIC KEY-----\n{_PUBLIC_KEY_HEADERLESS}\n-----END PUBLIC KEY-----\n\"\"\".format(\n    _PUBLIC_KEY_HEADERLESS=_PUBLIC_KEY_HEADERLESS\n)\n_KEY = 'example'\n_SECRET = '1234abcd-1234-abcd-1234-abcd1234adcd'\n_AUTHORIZATION_URL = 'https://sso.example.com/auth/realms/example/protocol/openid-connect/auth'",
        "detail": "social_core.tests.backends.test_keycloak",
        "documentation": {}
    },
    {
        "label": "_KEY",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_keycloak",
        "description": "social_core.tests.backends.test_keycloak",
        "peekOfCode": "_KEY = 'example'\n_SECRET = '1234abcd-1234-abcd-1234-abcd1234adcd'\n_AUTHORIZATION_URL = 'https://sso.example.com/auth/realms/example/protocol/openid-connect/auth'\n_ACCESS_TOKEN_URL = 'https://sso.example.com/auth/realms/example/protocol/openid-connect/token'\n_ALGORITHM = 'RS256'\n_AUTH_TIME = int(time.time())\n_PAYLOAD = {\n    'preferred_username': 'john.doe',\n    'email': 'john.doe@example.com',\n    'name': 'John Doe',",
        "detail": "social_core.tests.backends.test_keycloak",
        "documentation": {}
    },
    {
        "label": "_SECRET",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_keycloak",
        "description": "social_core.tests.backends.test_keycloak",
        "peekOfCode": "_SECRET = '1234abcd-1234-abcd-1234-abcd1234adcd'\n_AUTHORIZATION_URL = 'https://sso.example.com/auth/realms/example/protocol/openid-connect/auth'\n_ACCESS_TOKEN_URL = 'https://sso.example.com/auth/realms/example/protocol/openid-connect/token'\n_ALGORITHM = 'RS256'\n_AUTH_TIME = int(time.time())\n_PAYLOAD = {\n    'preferred_username': 'john.doe',\n    'email': 'john.doe@example.com',\n    'name': 'John Doe',\n    'given_name': 'John',",
        "detail": "social_core.tests.backends.test_keycloak",
        "documentation": {}
    },
    {
        "label": "_AUTHORIZATION_URL",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_keycloak",
        "description": "social_core.tests.backends.test_keycloak",
        "peekOfCode": "_AUTHORIZATION_URL = 'https://sso.example.com/auth/realms/example/protocol/openid-connect/auth'\n_ACCESS_TOKEN_URL = 'https://sso.example.com/auth/realms/example/protocol/openid-connect/token'\n_ALGORITHM = 'RS256'\n_AUTH_TIME = int(time.time())\n_PAYLOAD = {\n    'preferred_username': 'john.doe',\n    'email': 'john.doe@example.com',\n    'name': 'John Doe',\n    'given_name': 'John',\n    'family_name': 'Doe',",
        "detail": "social_core.tests.backends.test_keycloak",
        "documentation": {}
    },
    {
        "label": "_ACCESS_TOKEN_URL",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_keycloak",
        "description": "social_core.tests.backends.test_keycloak",
        "peekOfCode": "_ACCESS_TOKEN_URL = 'https://sso.example.com/auth/realms/example/protocol/openid-connect/token'\n_ALGORITHM = 'RS256'\n_AUTH_TIME = int(time.time())\n_PAYLOAD = {\n    'preferred_username': 'john.doe',\n    'email': 'john.doe@example.com',\n    'name': 'John Doe',\n    'given_name': 'John',\n    'family_name': 'Doe',\n    'iss': 'https://sso.example.com',",
        "detail": "social_core.tests.backends.test_keycloak",
        "documentation": {}
    },
    {
        "label": "_ALGORITHM",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_keycloak",
        "description": "social_core.tests.backends.test_keycloak",
        "peekOfCode": "_ALGORITHM = 'RS256'\n_AUTH_TIME = int(time.time())\n_PAYLOAD = {\n    'preferred_username': 'john.doe',\n    'email': 'john.doe@example.com',\n    'name': 'John Doe',\n    'given_name': 'John',\n    'family_name': 'Doe',\n    'iss': 'https://sso.example.com',\n    'sub': 'john.doe',",
        "detail": "social_core.tests.backends.test_keycloak",
        "documentation": {}
    },
    {
        "label": "_AUTH_TIME",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_keycloak",
        "description": "social_core.tests.backends.test_keycloak",
        "peekOfCode": "_AUTH_TIME = int(time.time())\n_PAYLOAD = {\n    'preferred_username': 'john.doe',\n    'email': 'john.doe@example.com',\n    'name': 'John Doe',\n    'given_name': 'John',\n    'family_name': 'Doe',\n    'iss': 'https://sso.example.com',\n    'sub': 'john.doe',\n    'aud': _KEY,",
        "detail": "social_core.tests.backends.test_keycloak",
        "documentation": {}
    },
    {
        "label": "_PAYLOAD",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_keycloak",
        "description": "social_core.tests.backends.test_keycloak",
        "peekOfCode": "_PAYLOAD = {\n    'preferred_username': 'john.doe',\n    'email': 'john.doe@example.com',\n    'name': 'John Doe',\n    'given_name': 'John',\n    'family_name': 'Doe',\n    'iss': 'https://sso.example.com',\n    'sub': 'john.doe',\n    'aud': _KEY,\n    'exp': _AUTH_TIME + 3600,",
        "detail": "social_core.tests.backends.test_keycloak",
        "documentation": {}
    },
    {
        "label": "KhanAcademyOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_khanacademy",
        "description": "social_core.tests.backends.test_khanacademy",
        "peekOfCode": "class KhanAcademyOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.khanacademy.KhanAcademyOAuth1'\n    user_data_url = 'https://www.khanacademy.org/api/v1/user'\n    expected_username = 'foo@bar.com'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    request_token_body = urlencode({\n        'oauth_token_secret': 'foobar-secret',",
        "detail": "social_core.tests.backends.test_khanacademy",
        "documentation": {}
    },
    {
        "label": "BaseLinkedinTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_linkedin",
        "description": "social_core.tests.backends.test_linkedin",
        "peekOfCode": "class BaseLinkedinTest:\n    user_data_url = 'https://api.linkedin.com/v2/me' \\\n                    '?projection=(firstName,id,lastName)'\n    expected_username = 'FooBar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    # Reference:\n    # https://docs.microsoft.com/en-us/linkedin/consumer/integrations/self",
        "detail": "social_core.tests.backends.test_linkedin",
        "documentation": {}
    },
    {
        "label": "LinkedinOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_linkedin",
        "description": "social_core.tests.backends.test_linkedin",
        "peekOfCode": "class LinkedinOAuth2Test(BaseLinkedinTest, OAuth2Test):\n    backend_path = 'social_core.backends.linkedin.LinkedinOAuth2'\nclass LinkedinMobileOAuth2Test(BaseLinkedinTest, OAuth2Test):\n    backend_path = 'social_core.backends.linkedin.LinkedinMobileOAuth2'",
        "detail": "social_core.tests.backends.test_linkedin",
        "documentation": {}
    },
    {
        "label": "LinkedinMobileOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_linkedin",
        "description": "social_core.tests.backends.test_linkedin",
        "peekOfCode": "class LinkedinMobileOAuth2Test(BaseLinkedinTest, OAuth2Test):\n    backend_path = 'social_core.backends.linkedin.LinkedinMobileOAuth2'",
        "detail": "social_core.tests.backends.test_linkedin",
        "documentation": {}
    },
    {
        "label": "LiveOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_live",
        "description": "social_core.tests.backends.test_live",
        "peekOfCode": "class LiveOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.live.LiveOAuth2'\n    user_data_url = 'https://apis.live.net/v5.0/me'\n    expected_username = 'FooBar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'first_name': 'Foo',",
        "detail": "social_core.tests.backends.test_live",
        "documentation": {}
    },
    {
        "label": "LiveJournalOpenIdTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_livejournal",
        "description": "social_core.tests.backends.test_livejournal",
        "peekOfCode": "class LiveJournalOpenIdTest(OpenIdTest):\n    backend_path = 'social_core.backends.livejournal.LiveJournalOpenId'\n    expected_username = 'foobar'\n    discovery_body = ''.join([\n        '<xrds:XRDS xmlns:xrds=\"xri://$xrds\" xmlns=\"xri://$xrd*($v*2.0)\">',\n        '<XRD>',\n        '<Service priority=\"0\">',\n        '<Type>http://specs.openid.net/auth/2.0/signon</Type>',\n        '<URI>http://www.livejournal.com/openid/server.bml</URI>',\n        '<LocalID>http://foobar.livejournal.com/</LocalID>',",
        "detail": "social_core.tests.backends.test_livejournal",
        "documentation": {}
    },
    {
        "label": "JANRAIN_NONCE",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_livejournal",
        "description": "social_core.tests.backends.test_livejournal",
        "peekOfCode": "JANRAIN_NONCE = datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')\nclass LiveJournalOpenIdTest(OpenIdTest):\n    backend_path = 'social_core.backends.livejournal.LiveJournalOpenId'\n    expected_username = 'foobar'\n    discovery_body = ''.join([\n        '<xrds:XRDS xmlns:xrds=\"xri://$xrds\" xmlns=\"xri://$xrd*($v*2.0)\">',\n        '<XRD>',\n        '<Service priority=\"0\">',\n        '<Type>http://specs.openid.net/auth/2.0/signon</Type>',\n        '<URI>http://www.livejournal.com/openid/server.bml</URI>',",
        "detail": "social_core.tests.backends.test_livejournal",
        "documentation": {}
    },
    {
        "label": "LyftOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_lyft",
        "description": "social_core.tests.backends.test_lyft",
        "peekOfCode": "class LyftOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.lyft.LyftOAuth2'\n    user_data_url = 'https://api.lyft.com/v1/profile'\n    access_token_body = json.dumps({\n        'access_token': 'atoken_foo',\n        'refresh_token': 'rtoken_bar',\n        'token_type': 'bearer',\n        'expires_in': 3600,\n        'scope': 'public profile rides.read rides.request',\n        'id': 'user_foobar'",
        "detail": "social_core.tests.backends.test_lyft",
        "documentation": {}
    },
    {
        "label": "MRGOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_mailru",
        "description": "social_core.tests.backends.test_mailru",
        "peekOfCode": "class MRGOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.mailru.MRGOAuth2'\n    user_data_url = 'https://oauth.mail.ru/userinfo'\n    expected_username = 'FooBar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'first_name': 'Foo',",
        "detail": "social_core.tests.backends.test_mailru",
        "documentation": {}
    },
    {
        "label": "MapMyFitnessOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_mapmyfitness",
        "description": "social_core.tests.backends.test_mapmyfitness",
        "peekOfCode": "class MapMyFitnessOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.mapmyfitness.MapMyFitnessOAuth2'\n    user_data_url = 'https://oauth2-api.mapmyapi.com/v7.0/user/self/'\n    expected_username = 'FredFlinstone'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'Bearer',\n        'expires_in': 4000000,\n        'refresh_token': 'bambaz',\n        'scope': 'read'",
        "detail": "social_core.tests.backends.test_mapmyfitness",
        "documentation": {}
    },
    {
        "label": "MicrosoftOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_microsoft",
        "description": "social_core.tests.backends.test_microsoft",
        "peekOfCode": "class MicrosoftOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.microsoft.MicrosoftOAuth2'\n    user_data_url = 'https://graph.microsoft.com/v1.0/me'\n    expected_username = 'foobar'\n    user_data_body = json.dumps({\n        'displayName': 'foo bar',\n        'givenName': 'foobar',\n        'jobTitle': 'Auditor',\n        'mail': 'foobar@foobar.com',\n        'mobilePhone': None,",
        "detail": "social_core.tests.backends.test_microsoft",
        "documentation": {}
    },
    {
        "label": "MineIDOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_mineid",
        "description": "social_core.tests.backends.test_mineid",
        "peekOfCode": "class MineIDOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.mineid.MineIDOAuth2'\n    user_data_url = 'https://www.mineid.org/api/user'\n    expected_username = 'foo@bar.com'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'email': 'foo@bar.com',",
        "detail": "social_core.tests.backends.test_mineid",
        "documentation": {}
    },
    {
        "label": "MixcloudOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_mixcloud",
        "description": "social_core.tests.backends.test_mixcloud",
        "peekOfCode": "class MixcloudOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.mixcloud.MixcloudOAuth2'\n    user_data_url = 'https://api.mixcloud.com/me/'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'username': 'foobar',",
        "detail": "social_core.tests.backends.test_mixcloud",
        "documentation": {}
    },
    {
        "label": "MusicBrainzAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_musicbrainz",
        "description": "social_core.tests.backends.test_musicbrainz",
        "peekOfCode": "class MusicBrainzAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.musicbrainz.MusicBrainzOAuth2'\n    user_data_url = 'https://musicbrainz.org/oauth2/userinfo'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n      'access_token': 'GjtKfJS6G4lupbQcCOiTKo4HcLXUgI1p',\n      'expires_in': 3600,\n      'token_type': 'Bearer',\n      'refresh_token': 'GjSCBBjp4fnbE0AKo3uFu9qq9K2fFm4u'\n    })",
        "detail": "social_core.tests.backends.test_musicbrainz",
        "documentation": {}
    },
    {
        "label": "NationBuilderOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_nationbuilder",
        "description": "social_core.tests.backends.test_nationbuilder",
        "peekOfCode": "class NationBuilderOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.nationbuilder.NationBuilderOAuth2'\n    user_data_url = 'https://foobar.nationbuilder.com/api/v1/people/me'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n        'created_at': 1422937981,\n        'expires_in': 2592000\n    })",
        "detail": "social_core.tests.backends.test_nationbuilder",
        "documentation": {}
    },
    {
        "label": "NaverOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_naver",
        "description": "social_core.tests.backends.test_naver",
        "peekOfCode": "class NaverOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.naver.NaverOAuth2'\n    user_data_url = 'https://openapi.naver.com/v1/nid/me'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n    })\n    user_data_content_type = 'text/json'\n    user_data_body = json.dumps({",
        "detail": "social_core.tests.backends.test_naver",
        "documentation": {}
    },
    {
        "label": "NGPVANActionIDOpenIDTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_ngpvan",
        "description": "social_core.tests.backends.test_ngpvan",
        "peekOfCode": "class NGPVANActionIDOpenIDTest(OpenIdTest):\n    \"\"\"Test the NGP VAN ActionID OpenID 1.1 Backend\"\"\"\n    backend_path = 'social_core.backends.ngpvan.ActionIDOpenID'\n    expected_username = 'testuser@user.local'\n    discovery_body = ' '.join([\n        '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n        '<xrds:XRDS',\n        'xmlns:xrds=\"xri://$xrds\"',\n        'xmlns:openid=\"http://openid.net/xmlns/1.0\"',\n        'xmlns=\"xri://$xrd*($v*2.0)\">',",
        "detail": "social_core.tests.backends.test_ngpvan",
        "documentation": {}
    },
    {
        "label": "JANRAIN_NONCE",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_ngpvan",
        "description": "social_core.tests.backends.test_ngpvan",
        "peekOfCode": "JANRAIN_NONCE = datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')\nclass NGPVANActionIDOpenIDTest(OpenIdTest):\n    \"\"\"Test the NGP VAN ActionID OpenID 1.1 Backend\"\"\"\n    backend_path = 'social_core.backends.ngpvan.ActionIDOpenID'\n    expected_username = 'testuser@user.local'\n    discovery_body = ' '.join([\n        '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n        '<xrds:XRDS',\n        'xmlns:xrds=\"xri://$xrds\"',\n        'xmlns:openid=\"http://openid.net/xmlns/1.0\"',",
        "detail": "social_core.tests.backends.test_ngpvan",
        "documentation": {}
    },
    {
        "label": "OktaOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_okta",
        "description": "social_core.tests.backends.test_okta",
        "peekOfCode": "class OktaOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.okta.OktaOAuth2'\n    user_data_url = 'https://dev-000000.oktapreview.com/oauth2/v1/userinfo'\n    expected_username = 'foo'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'family_name': 'Bar',",
        "detail": "social_core.tests.backends.test_okta",
        "documentation": {}
    },
    {
        "label": "OktaOpenIdConnectTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_okta",
        "description": "social_core.tests.backends.test_okta",
        "peekOfCode": "class OktaOpenIdConnectTest(OpenIdConnectTestMixin, OAuth2Test):\n    backend_path = \\\n        'social_core.backends.okta_openidconnect.OktaOpenIdConnect'\n    user_data_url = \\\n        'https://dev-000000.oktapreview.com/oauth2/v1/userinfo'\n    issuer = 'https://dev-000000.oktapreview.com/oauth2'\n    openid_config_body = json.dumps({\n        'issuer': 'https://dev-000000.oktapreview.com/oauth2',\n        'authorization_endpoint': 'https://dev-000000.oktapreview.com/oauth2/v1/authorize',\n        'token_endpoint': 'https://dev-000000.oktapreview.com/oauth2/v1/token',",
        "detail": "social_core.tests.backends.test_okta",
        "documentation": {}
    },
    {
        "label": "JWK_KEY",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_okta",
        "description": "social_core.tests.backends.test_okta",
        "peekOfCode": "JWK_KEY = {\n    'kty': 'RSA',\n    'd': 'ZmswNokEvBcxW_Kvcy8mWUQOQCBdGbnM0xR7nhvGHC-Q24z3XAQWlMWbsmGc_R1o'\n         '_F3zK7DBlc3BokdRaO1KJirNmnHCw5TlnBlJrXiWpFBtVglUg98-4sRRO0VWnGXK'\n         'JPOkBQ6b_DYRO3b0o8CSpWowpiV6HB71cjXTqKPZf-aXU9WjCCAtxVjfIxgQFu5I'\n         '-G1Qah8mZeY8HK_y99L4f0siZcbUoaIcfeWBhxi14ODyuSAHt0sNEkhiIVBZE7QZ'\n         'm-SEP1ryT9VAaljbwHHPmg7NC26vtLZhvaBGbTTJnEH0ZubbN2PMzsfeNyoCIHy4'\n         '4QDSpQDCHfgcGOlHY_t5gQ',\n    'e': 'AQAB',\n    'use': 'sig',",
        "detail": "social_core.tests.backends.test_okta",
        "documentation": {}
    },
    {
        "label": "JWK_PUBLIC_KEY",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_okta",
        "description": "social_core.tests.backends.test_okta",
        "peekOfCode": "JWK_PUBLIC_KEY = {key: value for key, value in JWK_KEY.items() if key != 'd'}\nclass OktaOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.okta.OktaOAuth2'\n    user_data_url = 'https://dev-000000.oktapreview.com/oauth2/v1/userinfo'\n    expected_username = 'foo'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({",
        "detail": "social_core.tests.backends.test_okta",
        "documentation": {}
    },
    {
        "label": "OpenIdConnectTestMixin",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_open_id_connect",
        "description": "social_core.tests.backends.test_open_id_connect",
        "peekOfCode": "class OpenIdConnectTestMixin:\n    \"\"\"\n    Mixin to test OpenID Connect consumers. Inheriting classes should also\n    inherit OAuth2Test.\n    \"\"\"\n    client_key = 'a-key'\n    client_secret = 'a-secret-key'\n    issuer = None  # id_token issuer\n    openid_config_body = None\n    key = None",
        "detail": "social_core.tests.backends.test_open_id_connect",
        "documentation": {}
    },
    {
        "label": "BaseOpenIdConnectTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_open_id_connect",
        "description": "social_core.tests.backends.test_open_id_connect",
        "peekOfCode": "class BaseOpenIdConnectTest(OpenIdConnectTestMixin, OAuth2Test):\n    backend_path = \\\n        'social_core.backends.open_id_connect.OpenIdConnectAuth'\n    issuer = 'https://example.com'\n    openid_config_body = json.dumps({\n        'issuer': 'https://example.com',\n        'authorization_endpoint': 'https://example.com/oidc/auth',\n        'token_endpoint': 'https://example.com/oidc/token',\n        'userinfo_endpoint': 'https://example.com/oidc/userinfo',\n        'revocation_endpoint': 'https://example.com/oidc/revoke',",
        "detail": "social_core.tests.backends.test_open_id_connect",
        "documentation": {}
    },
    {
        "label": "ExampleOpenIdConnectAuth",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_open_id_connect",
        "description": "social_core.tests.backends.test_open_id_connect",
        "peekOfCode": "class ExampleOpenIdConnectAuth(OpenIdConnectAuth):\n    name = 'example123'\n    OIDC_ENDPOINT = 'https://example.com/oidc'\nclass ExampleOpenIdConnectTest(OpenIdConnectTestMixin, OAuth2Test):\n    backend_path = \\\n        'social_core.tests.backends.test_open_id_connect.ExampleOpenIdConnectAuth'\n    issuer = 'https://example.com'\n    openid_config_body = json.dumps({\n        'issuer': 'https://example.com',\n        'authorization_endpoint': 'https://example.com/oidc/auth',",
        "detail": "social_core.tests.backends.test_open_id_connect",
        "documentation": {}
    },
    {
        "label": "ExampleOpenIdConnectTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_open_id_connect",
        "description": "social_core.tests.backends.test_open_id_connect",
        "peekOfCode": "class ExampleOpenIdConnectTest(OpenIdConnectTestMixin, OAuth2Test):\n    backend_path = \\\n        'social_core.tests.backends.test_open_id_connect.ExampleOpenIdConnectAuth'\n    issuer = 'https://example.com'\n    openid_config_body = json.dumps({\n        'issuer': 'https://example.com',\n        'authorization_endpoint': 'https://example.com/oidc/auth',\n        'token_endpoint': 'https://example.com/oidc/token',\n        'userinfo_endpoint': 'https://example.com/oidc/userinfo',\n        'revocation_endpoint': 'https://example.com/oidc/revoke',",
        "detail": "social_core.tests.backends.test_open_id_connect",
        "documentation": {}
    },
    {
        "label": "TEST_ROOT",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_open_id_connect",
        "description": "social_core.tests.backends.test_open_id_connect",
        "peekOfCode": "TEST_ROOT = os.path.dirname(os.path.dirname(__file__))\nJWK_KEY = {\n    'kty': 'RSA',\n    'd': 'ZmswNokEvBcxW_Kvcy8mWUQOQCBdGbnM0xR7nhvGHC-Q24z3XAQWlMWbsmGc_R1o'\n         '_F3zK7DBlc3BokdRaO1KJirNmnHCw5TlnBlJrXiWpFBtVglUg98-4sRRO0VWnGXK'\n         'JPOkBQ6b_DYRO3b0o8CSpWowpiV6HB71cjXTqKPZf-aXU9WjCCAtxVjfIxgQFu5I'\n         '-G1Qah8mZeY8HK_y99L4f0siZcbUoaIcfeWBhxi14ODyuSAHt0sNEkhiIVBZE7QZ'\n         'm-SEP1ryT9VAaljbwHHPmg7NC26vtLZhvaBGbTTJnEH0ZubbN2PMzsfeNyoCIHy4'\n         '4QDSpQDCHfgcGOlHY_t5gQ',\n    'e': 'AQAB',",
        "detail": "social_core.tests.backends.test_open_id_connect",
        "documentation": {}
    },
    {
        "label": "JWK_KEY",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_open_id_connect",
        "description": "social_core.tests.backends.test_open_id_connect",
        "peekOfCode": "JWK_KEY = {\n    'kty': 'RSA',\n    'd': 'ZmswNokEvBcxW_Kvcy8mWUQOQCBdGbnM0xR7nhvGHC-Q24z3XAQWlMWbsmGc_R1o'\n         '_F3zK7DBlc3BokdRaO1KJirNmnHCw5TlnBlJrXiWpFBtVglUg98-4sRRO0VWnGXK'\n         'JPOkBQ6b_DYRO3b0o8CSpWowpiV6HB71cjXTqKPZf-aXU9WjCCAtxVjfIxgQFu5I'\n         '-G1Qah8mZeY8HK_y99L4f0siZcbUoaIcfeWBhxi14ODyuSAHt0sNEkhiIVBZE7QZ'\n         'm-SEP1ryT9VAaljbwHHPmg7NC26vtLZhvaBGbTTJnEH0ZubbN2PMzsfeNyoCIHy4'\n         '4QDSpQDCHfgcGOlHY_t5gQ',\n    'e': 'AQAB',\n    'use': 'sig',",
        "detail": "social_core.tests.backends.test_open_id_connect",
        "documentation": {}
    },
    {
        "label": "JWK_PUBLIC_KEY",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_open_id_connect",
        "description": "social_core.tests.backends.test_open_id_connect",
        "peekOfCode": "JWK_PUBLIC_KEY = {key: value for key, value in JWK_KEY.items() if key != 'd'}\nclass OpenIdConnectTestMixin:\n    \"\"\"\n    Mixin to test OpenID Connect consumers. Inheriting classes should also\n    inherit OAuth2Test.\n    \"\"\"\n    client_key = 'a-key'\n    client_secret = 'a-secret-key'\n    issuer = None  # id_token issuer\n    openid_config_body = None",
        "detail": "social_core.tests.backends.test_open_id_connect",
        "documentation": {}
    },
    {
        "label": "OrbiOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_orbi",
        "description": "social_core.tests.backends.test_orbi",
        "peekOfCode": "class OrbiOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.orbi.OrbiOAuth2'\n    user_data_url = 'https://login.orbi.kr/oauth/user/get'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n    })\n    user_data_body = json.dumps({\n        'username': 'foobar',\n        'first_name': 'Foo',",
        "detail": "social_core.tests.backends.test_orbi",
        "documentation": {}
    },
    {
        "label": "ORCIDOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_orcid",
        "description": "social_core.tests.backends.test_orcid",
        "peekOfCode": "class ORCIDOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.orcid.ORCIDOAuth2'\n    user_data_url = ORCIDOAuth2.USER_ID_URL\n    expected_username = '0000-0002-2601-8132'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n        'orcid-identifier': {\n            'path': '0000-0002-2601-8132'\n        },",
        "detail": "social_core.tests.backends.test_orcid",
        "documentation": {}
    },
    {
        "label": "OssoOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_osso",
        "description": "social_core.tests.backends.test_osso",
        "peekOfCode": "class OssoOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.osso.OssoOAuth2'\n    user_data_url = 'https://demo.ossoapp.com/oauth/me'\n    expected_username = 'user@example.com'\n    access_token_body = json.dumps(\n        {\n            'access_token': '3633395cffe739bb87089235c152155ae73b6794f7af353b2aa189aeeacee1ec',\n            'token_type': 'bearer',\n            'expires_in': 600\n        }",
        "detail": "social_core.tests.backends.test_osso",
        "documentation": {}
    },
    {
        "label": "PatreonOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_patreon",
        "description": "social_core.tests.backends.test_patreon",
        "peekOfCode": "class PatreonOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.patreon.PatreonOAuth2'\n    user_data_url = 'https://www.patreon.com/api/oauth2/v2/identity?' + \\\n        'fields%5Buser%5D=about,created,email,first_name,full_name,' + \\\n        'image_url,last_name,social_connections,thumb_url,url,vanity'\n    expected_username = 'JohnInterwebs'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n    })",
        "detail": "social_core.tests.backends.test_patreon",
        "documentation": {}
    },
    {
        "label": "PayPalOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_paypal",
        "description": "social_core.tests.backends.test_paypal",
        "peekOfCode": "class PayPalOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.paypal.PayPalOAuth2'\n    user_data_url = (\n        'https://api.paypal.com/v1/identity/oauth2/userinfo?schema=paypalv1.1'\n    )\n    expected_username = 'mWq6_1sU85v5EG9yHdPxJRrhGHrnMJ-1PQKtX6pcsmA'\n    access_token_body = json.dumps(\n        {\n            'token_type': 'Bearer',\n            'expires_in': 28800,",
        "detail": "social_core.tests.backends.test_paypal",
        "documentation": {}
    },
    {
        "label": "PhabricatorOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_phabricator",
        "description": "social_core.tests.backends.test_phabricator",
        "peekOfCode": "class PhabricatorOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.phabricator.PhabricatorOAuth2'\n    user_data_url = 'https://secure.phabricator.com/api/user.whoami'\n    expected_username = 'user'\n    access_token_body = json.dumps({\n        'access_token': 'loremipsumdolorsitametenim',\n        'token_type': 'Bearer',\n        'expires_in': 7200,\n        'refresh_token': 'foobar',\n    })",
        "detail": "social_core.tests.backends.test_phabricator",
        "documentation": {}
    },
    {
        "label": "PhabricatorCustomDomainOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_phabricator",
        "description": "social_core.tests.backends.test_phabricator",
        "peekOfCode": "class PhabricatorCustomDomainOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.phabricator.PhabricatorOAuth2'\n    user_data_url = 'https://example.com/api/user.whoami'\n    expected_username = 'user'\n    access_token_body = json.dumps({\n        'access_token': 'loremipsumdolorsitametenim',\n        'token_type': 'Bearer',\n        'expires_in': 7200,\n        'refresh_token': 'foobar',\n    })",
        "detail": "social_core.tests.backends.test_phabricator",
        "documentation": {}
    },
    {
        "label": "PinterestOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_pinterest",
        "description": "social_core.tests.backends.test_pinterest",
        "peekOfCode": "class PinterestOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.pinterest.PinterestOAuth2'\n    user_data_url = 'https://api.pinterest.com/v1/me/'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'id': '4788400174839062',",
        "detail": "social_core.tests.backends.test_pinterest",
        "documentation": {}
    },
    {
        "label": "PinterestOAuth2BrokenServerResponseTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_pinterest",
        "description": "social_core.tests.backends.test_pinterest",
        "peekOfCode": "class PinterestOAuth2BrokenServerResponseTest(OAuth2Test):\n    backend_path = 'social_core.backends.pinterest.PinterestOAuth2'\n    user_data_url = 'https://api.pinterest.com/v1/me/'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'data': {",
        "detail": "social_core.tests.backends.test_pinterest",
        "documentation": {}
    },
    {
        "label": "PodioOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_podio",
        "description": "social_core.tests.backends.test_podio",
        "peekOfCode": "class PodioOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.podio.PodioOAuth2'\n    user_data_url = 'https://api.podio.com/user/status'\n    expected_username = 'user_1010101010'\n    access_token_body = json.dumps({\n        'token_type': 'bearer',\n        'access_token': '11309ea9016a4ad99f1a3bcb9bc7a9d1',\n        'refresh_token': '52d01df8b9ac46a4a6be1333d9f81ef2',\n        'expires_in': 28800,\n        'ref': {",
        "detail": "social_core.tests.backends.test_podio",
        "documentation": {}
    },
    {
        "label": "QiitaOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_qiita",
        "description": "social_core.tests.backends.test_qiita",
        "peekOfCode": "class QiitaOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.qiita.QiitaOAuth2'\n    user_data_url = 'https://qiita.com/api/v2/authenticated_user'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'id': 'foobar',",
        "detail": "social_core.tests.backends.test_qiita",
        "documentation": {}
    },
    {
        "label": "QuizletOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_quizlet",
        "description": "social_core.tests.backends.test_quizlet",
        "peekOfCode": "class QuizletOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.quizlet.QuizletOAuth2'\n    expected_username = 'foo_bar'\n    access_token_body = json.dumps({\n        'access_token': 'EE1IDxytP04tJ767GbjH7ED9PpGmYvL',\n        'token_type': 'Bearer',\n        'expires_in': 3600,\n        'scope': 'read',\n        'user_id': 'foo_bar'\n    })",
        "detail": "social_core.tests.backends.test_quizlet",
        "documentation": {}
    },
    {
        "label": "ReadabilityOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_readability",
        "description": "social_core.tests.backends.test_readability",
        "peekOfCode": "class ReadabilityOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.readability.ReadabilityOAuth'\n    user_data_url = 'https://www.readability.com/api/rest/v1/users/_current'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    request_token_body = urlencode({\n        'oauth_token_secret': 'foobar-secret',",
        "detail": "social_core.tests.backends.test_readability",
        "documentation": {}
    },
    {
        "label": "RedditOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_reddit",
        "description": "social_core.tests.backends.test_reddit",
        "peekOfCode": "class RedditOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.reddit.RedditOAuth2'\n    user_data_url = 'https://oauth.reddit.com/api/v1/me.json'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'name': 'foobar',\n        'created': 1203420772.0,\n        'access_token': 'foobar-token',\n        'created_utc': 1203420772.0,\n        'expires_in': 3600.0,",
        "detail": "social_core.tests.backends.test_reddit",
        "documentation": {}
    },
    {
        "label": "SAMLTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_saml",
        "description": "social_core.tests.backends.test_saml",
        "peekOfCode": "class SAMLTest(BaseBackendTest):\n    backend_path = 'social_core.backends.saml.SAMLAuth'\n    expected_username = 'myself'\n    def extra_settings(self):\n        name = path.join(DATA_DIR, 'saml_config.json')\n        with open(name) as config_file:\n            config_str = config_file.read()\n        return json.loads(config_str)\n    def setUp(self):\n        \"\"\"Patch the time so that we can replay canned",
        "detail": "social_core.tests.backends.test_saml",
        "documentation": {}
    },
    {
        "label": "DATA_DIR",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_saml",
        "description": "social_core.tests.backends.test_saml",
        "peekOfCode": "DATA_DIR = path.join(path.dirname(__file__), 'data')\n@unittest.skipIf('TRAVIS' in os.environ,\n                  'Travis-ci segfaults probably due to a bad '\n                  'dependencies build')\n@unittest.skipIf('__pypy__' in sys.builtin_course_names,\n                  'dm.xmlsec not compatible with pypy')\nclass SAMLTest(BaseBackendTest):\n    backend_path = 'social_core.backends.saml.SAMLAuth'\n    expected_username = 'myself'\n    def extra_settings(self):",
        "detail": "social_core.tests.backends.test_saml",
        "documentation": {}
    },
    {
        "label": "ScistarterOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_scistarter",
        "description": "social_core.tests.backends.test_scistarter",
        "peekOfCode": "class ScistarterOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.scistarter.SciStarterOAuth2'\n    user_data_url = 'https://scistarter.com/api/user_info'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'profile_id': 42006,",
        "detail": "social_core.tests.backends.test_scistarter",
        "documentation": {}
    },
    {
        "label": "SimpleLoginOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_simplelogin",
        "description": "social_core.tests.backends.test_simplelogin",
        "peekOfCode": "class SimpleLoginOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.simplelogin.SimpleLoginOAuth2'\n    user_data_url = 'https://app.simplelogin.io/oauth2/userinfo'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'client': 'Continental',\n        'email': 'john@wick.com',",
        "detail": "social_core.tests.backends.test_simplelogin",
        "documentation": {}
    },
    {
        "label": "SketchfabOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_sketchfab",
        "description": "social_core.tests.backends.test_sketchfab",
        "peekOfCode": "class SketchfabOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.sketchfab.SketchfabOAuth2'\n    user_data_url = 'https://sketchfab.com/v2/users/me'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'uid': '42',",
        "detail": "social_core.tests.backends.test_sketchfab",
        "documentation": {}
    },
    {
        "label": "SkyrockOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_skyrock",
        "description": "social_core.tests.backends.test_skyrock",
        "peekOfCode": "class SkyrockOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.skyrock.SkyrockOAuth'\n    user_data_url = 'https://api.skyrock.com/v2/user/get.json'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    request_token_body = urlencode({\n        'oauth_token_secret': 'foobar-secret',",
        "detail": "social_core.tests.backends.test_skyrock",
        "documentation": {}
    },
    {
        "label": "SlackOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_slack",
        "description": "social_core.tests.backends.test_slack",
        "peekOfCode": "class SlackOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.slack.SlackOAuth2'\n    user_data_url = 'https://slack.com/api/users.identity'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'ok': True,\n        'user': {",
        "detail": "social_core.tests.backends.test_slack",
        "documentation": {}
    },
    {
        "label": "SlackOAuth2TestTeamName",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_slack",
        "description": "social_core.tests.backends.test_slack",
        "peekOfCode": "class SlackOAuth2TestTeamName(SlackOAuth2Test):\n    expected_username = 'foobar@Square'\n    user_data_body = json.dumps({\n        'ok': True,\n        'user': {\n            'email': 'foobar@example.com',\n            'name': 'Foo Bar',\n            'id': '123456'\n        },\n        'team': {",
        "detail": "social_core.tests.backends.test_slack",
        "documentation": {}
    },
    {
        "label": "SlackOAuth2TestUnicodeTeamName",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_slack",
        "description": "social_core.tests.backends.test_slack",
        "peekOfCode": "class SlackOAuth2TestUnicodeTeamName(SlackOAuth2Test):\n    user_data_body = json.dumps({\n        'ok': True,\n        'user': {\n            'email': 'foobar@example.com',\n            'name': 'Foo Bar',\n            'id': '123456'\n        },\n        'team': {\n            'id': '456789',",
        "detail": "social_core.tests.backends.test_slack",
        "documentation": {}
    },
    {
        "label": "SoundcloudOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_soundcloud",
        "description": "social_core.tests.backends.test_soundcloud",
        "peekOfCode": "class SoundcloudOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.soundcloud.SoundcloudOAuth2'\n    user_data_url = 'https://api.soundcloud.com/me.json'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'website': None,",
        "detail": "social_core.tests.backends.test_soundcloud",
        "documentation": {}
    },
    {
        "label": "SpotifyOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_spotify",
        "description": "social_core.tests.backends.test_spotify",
        "peekOfCode": "class SpotifyOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.spotify.SpotifyOAuth2'\n    user_data_url = 'https://api.spotify.com/v1/me'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'display_name': None,",
        "detail": "social_core.tests.backends.test_spotify",
        "documentation": {}
    },
    {
        "label": "StackoverflowOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_stackoverflow",
        "description": "social_core.tests.backends.test_stackoverflow",
        "peekOfCode": "class StackoverflowOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.stackoverflow.StackoverflowOAuth2'\n    user_data_url = 'https://api.stackexchange.com/2.1/me'\n    expected_username = 'foobar'\n    access_token_body = urlencode({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'items': [{",
        "detail": "social_core.tests.backends.test_stackoverflow",
        "documentation": {}
    },
    {
        "label": "SteamOpenIdTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_steam",
        "description": "social_core.tests.backends.test_steam",
        "peekOfCode": "class SteamOpenIdTest(OpenIdTest):\n    backend_path = 'social_core.backends.steam.SteamOpenId'\n    expected_username = 'foobar'\n    discovery_body = ''.join([\n        '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n        '<xrds:XRDS xmlns:xrds=\"xri://$xrds\" xmlns=\"xri://$xrd*($v*2.0)\">',\n        '<XRD>',\n        '<Service priority=\"0\">',\n        '<Type>http://specs.openid.net/auth/2.0/server</Type>',\n        '<URI>https://steamcommunity.com/openid/login</URI>',",
        "detail": "social_core.tests.backends.test_steam",
        "documentation": {}
    },
    {
        "label": "SteamOpenIdMissingSteamIdTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_steam",
        "description": "social_core.tests.backends.test_steam",
        "peekOfCode": "class SteamOpenIdMissingSteamIdTest(SteamOpenIdTest):\n    server_response = urlencode({\n        'janrain_nonce': JANRAIN_NONCE,\n        'openid.ns': 'http://specs.openid.net/auth/2.0',\n        'openid.mode': 'id_res',\n        'openid.op_endpoint': 'https://steamcommunity.com/openid/login',\n        'openid.claimed_id': 'https://steamcommunity.com/openid/BROKEN',\n        'openid.identity': 'https://steamcommunity.com/openid/BROKEN',\n        'openid.return_to': 'http://myapp.com/complete/steam/?'\n                            'janrain_nonce=' + JANRAIN_NONCE,",
        "detail": "social_core.tests.backends.test_steam",
        "documentation": {}
    },
    {
        "label": "INFO_URL",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_steam",
        "description": "social_core.tests.backends.test_steam",
        "peekOfCode": "INFO_URL = 'http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?'\nJANRAIN_NONCE = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ')\nclass SteamOpenIdTest(OpenIdTest):\n    backend_path = 'social_core.backends.steam.SteamOpenId'\n    expected_username = 'foobar'\n    discovery_body = ''.join([\n        '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n        '<xrds:XRDS xmlns:xrds=\"xri://$xrds\" xmlns=\"xri://$xrd*($v*2.0)\">',\n        '<XRD>',\n        '<Service priority=\"0\">',",
        "detail": "social_core.tests.backends.test_steam",
        "documentation": {}
    },
    {
        "label": "JANRAIN_NONCE",
        "kind": 5,
        "importPath": "social_core.tests.backends.test_steam",
        "description": "social_core.tests.backends.test_steam",
        "peekOfCode": "JANRAIN_NONCE = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ')\nclass SteamOpenIdTest(OpenIdTest):\n    backend_path = 'social_core.backends.steam.SteamOpenId'\n    expected_username = 'foobar'\n    discovery_body = ''.join([\n        '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n        '<xrds:XRDS xmlns:xrds=\"xri://$xrds\" xmlns=\"xri://$xrd*($v*2.0)\">',\n        '<XRD>',\n        '<Service priority=\"0\">',\n        '<Type>http://specs.openid.net/auth/2.0/server</Type>',",
        "detail": "social_core.tests.backends.test_steam",
        "documentation": {}
    },
    {
        "label": "StocktwitsOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_stocktwits",
        "description": "social_core.tests.backends.test_stocktwits",
        "peekOfCode": "class StocktwitsOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.stocktwits.StocktwitsOAuth2'\n    user_data_url = 'https://api.stocktwits.com/api/2/account/verify.json'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'response': {",
        "detail": "social_core.tests.backends.test_stocktwits",
        "documentation": {}
    },
    {
        "label": "StocktwitsOAuth2UsernameAlternativeTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_stocktwits",
        "description": "social_core.tests.backends.test_stocktwits",
        "peekOfCode": "class StocktwitsOAuth2UsernameAlternativeTest(StocktwitsOAuth2Test):\n    user_data_body = json.dumps({\n        'response': {\n            'status': 200\n        },\n        'user': {\n            'username': 'foobar',\n            'name': 'Foobar',\n            'classification': [],\n            'avatar_url': 'http://avatars.stocktwits.net/images/'",
        "detail": "social_core.tests.backends.test_stocktwits",
        "documentation": {}
    },
    {
        "label": "StravaOAuthTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_strava",
        "description": "social_core.tests.backends.test_strava",
        "peekOfCode": "class StravaOAuthTest(OAuth2Test):\n    backend_path = 'social_core.backends.strava.StravaOAuth'\n    user_data_url = 'https://www.strava.com/api/v3/athlete'\n    expected_username = 'marianne_v'\n    access_token_body = json.dumps({\n        'token_type': 'Bearer',\n        'expires_at': 1572805000,\n        'expires_in': 227615,\n        'refresh_token': 'f51defab4632d27255dd0d106504dfd7568fd1df6',\n        'access_token': '83ebeabdec09f6670863766f792ead24d61fe3f9',",
        "detail": "social_core.tests.backends.test_strava",
        "documentation": {}
    },
    {
        "label": "StripeOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_stripe",
        "description": "social_core.tests.backends.test_stripe",
        "peekOfCode": "class StripeOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.stripe.StripeOAuth2'\n    access_token_body = json.dumps({\n        'stripe_publishable_key': 'pk_test_foobar',\n        'access_token': 'foobar',\n        'livemode': False,\n        'token_type': 'bearer',\n        'scope': 'read_only',\n        'refresh_token': 'rt_foobar',\n        'stripe_user_id': 'acct_foobar'",
        "detail": "social_core.tests.backends.test_stripe",
        "documentation": {}
    },
    {
        "label": "TaobaoOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_taobao",
        "description": "social_core.tests.backends.test_taobao",
        "peekOfCode": "class TaobaoOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.taobao.TAOBAOAuth'\n    user_data_url = 'https://eco.taobao.com/router/rest'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'w2_expires_in': 0,",
        "detail": "social_core.tests.backends.test_taobao",
        "documentation": {}
    },
    {
        "label": "ThisIsMyJameOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_thisismyjam",
        "description": "social_core.tests.backends.test_thisismyjam",
        "peekOfCode": "class ThisIsMyJameOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.thisismyjam.ThisIsMyJamOAuth1'\n    user_data_url = 'http://api.thisismyjam.com/1/verify.json'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    request_token_body = urlencode({\n        'oauth_token_secret': 'foobar-secret',",
        "detail": "social_core.tests.backends.test_thisismyjam",
        "documentation": {}
    },
    {
        "label": "TripitOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_tripit",
        "description": "social_core.tests.backends.test_tripit",
        "peekOfCode": "class TripitOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.tripit.TripItOAuth'\n    user_data_url = 'https://api.tripit.com/v1/get/profile'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    request_token_body = urlencode({\n        'oauth_token_secret': 'foobar-secret',",
        "detail": "social_core.tests.backends.test_tripit",
        "documentation": {}
    },
    {
        "label": "TripitOAuth1UsernameAlternativesTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_tripit",
        "description": "social_core.tests.backends.test_tripit",
        "peekOfCode": "class TripitOAuth1UsernameAlternativesTest(TripitOAuth1Test):\n    user_data_body = \\\n        '<Response>' \\\n        '<timestamp>1363590451</timestamp>' \\\n        '<num_bytes>1040</num_bytes>' \\\n        '<Profile ref=\"ignore-me\">' \\\n        '<ProfileEmailAddresses>' \\\n        '<ProfileEmailAddress>' \\\n        '<address>foobar@gmail.com</address>' \\\n        '<is_auto_import>false</is_auto_import>' \\",
        "detail": "social_core.tests.backends.test_tripit",
        "documentation": {}
    },
    {
        "label": "TumblrOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_tumblr",
        "description": "social_core.tests.backends.test_tumblr",
        "peekOfCode": "class TumblrOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.tumblr.TumblrOAuth'\n    user_data_url = 'http://api.tumblr.com/v2/user/info'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    request_token_body = urlencode({\n        'oauth_token_secret': 'foobar-secret',",
        "detail": "social_core.tests.backends.test_tumblr",
        "documentation": {}
    },
    {
        "label": "TwitchOpenIdConnectTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_twitch",
        "description": "social_core.tests.backends.test_twitch",
        "peekOfCode": "class TwitchOpenIdConnectTest(OpenIdConnectTestMixin, OAuth2Test):\n    backend_path = 'social_core.backends.twitch.TwitchOpenIdConnect'\n    user_data_url = 'https://id.twitch.tv/oauth2/userinfo'\n    issuer = 'https://id.twitch.tv/oauth2'\n    expected_username = 'test_user1'\n    openid_config_body = json.dumps({\n        'authorization_endpoint': 'https://id.twitch.tv/oauth2/authorize',\n        'claims_parameter_supported': True,\n        'claims_supported': [\n            'iss',",
        "detail": "social_core.tests.backends.test_twitch",
        "documentation": {}
    },
    {
        "label": "TwitchOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_twitch",
        "description": "social_core.tests.backends.test_twitch",
        "peekOfCode": "class TwitchOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.twitch.TwitchOAuth2'\n    user_data_url = 'https://api.twitch.tv/helix/users'\n    expected_username = 'test_user1'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n    })\n    user_data_body = json.dumps({\n        'data': [",
        "detail": "social_core.tests.backends.test_twitch",
        "documentation": {}
    },
    {
        "label": "TwitterOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_twitter",
        "description": "social_core.tests.backends.test_twitter",
        "peekOfCode": "class TwitterOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.twitter.TwitterOAuth'\n    user_data_url = 'https://api.twitter.com/1.1/account/' \\\n        'verify_credentials.json'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    request_token_body = urlencode({",
        "detail": "social_core.tests.backends.test_twitter",
        "documentation": {}
    },
    {
        "label": "TwitterOAuth1IncludeEmailTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_twitter",
        "description": "social_core.tests.backends.test_twitter",
        "peekOfCode": "class TwitterOAuth1IncludeEmailTest(OAuth1Test):\n    backend_path = 'social_core.backends.twitter.TwitterOAuth'\n    user_data_url = 'https://api.twitter.com/1.1/account/' \\\n        'verify_credentials.json?include_email=true'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    request_token_body = urlencode({",
        "detail": "social_core.tests.backends.test_twitter",
        "documentation": {}
    },
    {
        "label": "UberOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_uber",
        "description": "social_core.tests.backends.test_uber",
        "peekOfCode": "class UberOAuth2Test(OAuth2Test):\n    user_data_url = 'https://api.uber.com/v1/me'\n    backend_path = 'social_core.backends.uber.UberOAuth2'\n    expected_username = 'foo@bar.com'\n    user_data_body = json.dumps({\n        'first_name': 'Foo',\n        'last_name': 'Bar',\n        'email': 'foo@bar.com',\n        'picture': 'https://',\n        'promo_code': 'barfoo',",
        "detail": "social_core.tests.backends.test_uber",
        "documentation": {}
    },
    {
        "label": "DatagouvfrOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_udata",
        "description": "social_core.tests.backends.test_udata",
        "peekOfCode": "class DatagouvfrOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.udata.DatagouvfrOAuth2'\n    user_data_url = 'https://www.data.gouv.fr/api/1/me/'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n        'first_name': 'foobar',\n        'email': 'foobar@example.com'\n    })",
        "detail": "social_core.tests.backends.test_udata",
        "documentation": {}
    },
    {
        "label": "UniverseAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_universe",
        "description": "social_core.tests.backends.test_universe",
        "peekOfCode": "class UniverseAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.universe.UniverseOAuth2'\n    user_data_url = 'https://www.universe.com/api/v2/current_user'\n    expected_username = 'scott+awesome@universe.com'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps(\n        {",
        "detail": "social_core.tests.backends.test_universe",
        "documentation": {}
    },
    {
        "label": "UpworkOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_upwork",
        "description": "social_core.tests.backends.test_upwork",
        "peekOfCode": "class UpworkOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.upwork.UpworkOAuth'\n    user_data_url = 'https://www.upwork.com/api/auth/v1/info.json'\n    expected_username = '10101010'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    request_token_body = urlencode({\n        'oauth_token_secret': 'foobar-secret',",
        "detail": "social_core.tests.backends.test_upwork",
        "documentation": {}
    },
    {
        "label": "UsernameTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_username",
        "description": "social_core.tests.backends.test_username",
        "peekOfCode": "class UsernameTest(BaseLegacyTest):\n    backend_path = 'social_core.backends.username.UsernameAuth'\n    expected_username = 'foobar'\n    response_body = 'username=foobar'\n    form = \"\"\"\n    <form method=\"post\" action=\"{0}\">\n        <input name=\"username\" type=\"text\">\n        <button>Submit</button>\n    </form>\n    \"\"\"",
        "detail": "social_core.tests.backends.test_username",
        "documentation": {}
    },
    {
        "label": "BaseBackendUtilsTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_utils",
        "description": "social_core.tests.backends.test_utils",
        "peekOfCode": "class BaseBackendUtilsTest(unittest.TestCase):\n    def setUp(self):\n        self.strategy = TestStrategy(storage=TestStorage)\n    def tearDown(self):\n        self.strategy = None\nclass LoadBackendsTest(BaseBackendUtilsTest):\n    def test_load_backends(self):\n        loaded_backends = load_backends((\n            'social_core.backends.github.GithubOAuth2',\n            'social_core.backends.facebook.FacebookOAuth2',",
        "detail": "social_core.tests.backends.test_utils",
        "documentation": {}
    },
    {
        "label": "LoadBackendsTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_utils",
        "description": "social_core.tests.backends.test_utils",
        "peekOfCode": "class LoadBackendsTest(BaseBackendUtilsTest):\n    def test_load_backends(self):\n        loaded_backends = load_backends((\n            'social_core.backends.github.GithubOAuth2',\n            'social_core.backends.facebook.FacebookOAuth2',\n            'social_core.backends.flickr.FlickrOAuth'\n        ), force_load=True)\n        keys = list(loaded_backends.keys())\n        self.assertEqual(keys, ['github', 'facebook', 'flickr'])\n        backends = ()",
        "detail": "social_core.tests.backends.test_utils",
        "documentation": {}
    },
    {
        "label": "GetBackendTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_utils",
        "description": "social_core.tests.backends.test_utils",
        "peekOfCode": "class GetBackendTest(BaseBackendUtilsTest):\n    def test_get_backend(self):\n        backend = get_backend((\n            'social_core.backends.github.GithubOAuth2',\n            'social_core.backends.facebook.FacebookOAuth2',\n            'social_core.backends.flickr.FlickrOAuth'\n        ), 'github')\n        self.assertEqual(backend, GithubOAuth2)\n    def test_get_missing_backend(self):\n        with self.assertRaisesRegex(MissingBackend,",
        "detail": "social_core.tests.backends.test_utils",
        "documentation": {}
    },
    {
        "label": "VaultOpenIdConnectTest",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_vault",
        "description": "social_core.tests.backends.test_vault",
        "peekOfCode": "class VaultOpenIdConnectTest(OpenIdConnectTestMixin, OAuth2Test):\n    backend_path = \\\n        'social_core.backends.vault.VaultOpenIdConnect'\n    issuer = 'https://vault.example.net:8200/v1/identity/oidc/provider/default'\n    openid_config_body = json.dumps({\n      'issuer': 'https://vault.example.net:8200/v1/identity/oidc/provider/default',\n      'jwks_uri': 'https://vault.example.net:8200/v1/identity/oidc/provider/default/.well-known/keys',\n      'authorization_endpoint': 'https://vault.example.net:8200/ui/vault/identity/oidc/provider/default/authorize',\n      'token_endpoint': 'https://vault.example.net:8200/v1/identity/oidc/provider/default/token',\n      'userinfo_endpoint': 'https://vault.example.net:8200/v1/identity/oidc/provider/default/userinfo',",
        "detail": "social_core.tests.backends.test_vault",
        "documentation": {}
    },
    {
        "label": "VKOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_vk",
        "description": "social_core.tests.backends.test_vk",
        "peekOfCode": "class VKOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.vk.VKOAuth2'\n    user_data_url = 'https://api.vk.com/method/users.get'\n    expected_username = 'durov'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'response': [{",
        "detail": "social_core.tests.backends.test_vk",
        "documentation": {}
    },
    {
        "label": "WunderlistOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_wunderlist",
        "description": "social_core.tests.backends.test_wunderlist",
        "peekOfCode": "class WunderlistOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.wunderlist.WunderlistOAuth2'\n    user_data_url = 'https://a.wunderlist.com/api/v1/user'\n    expected_username = '12345'\n    access_token_body = json.dumps({\n        'access_token': 'foobar-token',\n        'token_type': 'foobar'})\n    user_data_body = json.dumps({\n        'created_at': '2015-01-21T00:56:51.442Z',\n        'email': 'foo@bar.com',",
        "detail": "social_core.tests.backends.test_wunderlist",
        "documentation": {}
    },
    {
        "label": "XingOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_xing",
        "description": "social_core.tests.backends.test_xing",
        "peekOfCode": "class XingOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.xing.XingOAuth'\n    user_data_url = 'https://api.xing.com/v1/users/me.json'\n    expected_username = 'FooBar'\n    access_token_body = urlencode({\n        'access_token': 'foobar',\n        'token_type': 'bearer',\n        'user_id': '123456_abcdef',\n        'oauth_token_secret': 'foobar-secret',\n        'oauth_token': 'foobar',",
        "detail": "social_core.tests.backends.test_xing",
        "documentation": {}
    },
    {
        "label": "YahooOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_yahoo",
        "description": "social_core.tests.backends.test_yahoo",
        "peekOfCode": "class YahooOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.yahoo.YahooOAuth'\n    user_data_url = 'https://social.yahooapis.com/v1/user/a-guid/profile?' \\\n                    'format=json'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    request_token_body = urlencode({",
        "detail": "social_core.tests.backends.test_yahoo",
        "documentation": {}
    },
    {
        "label": "YammerOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_yammer",
        "description": "social_core.tests.backends.test_yammer",
        "peekOfCode": "class YammerOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.yammer.YammerOAuth2'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': {\n            'user_id': 1010101010,\n            'view_groups': True,\n            'modify_messages': True,\n            'network_id': 101010,\n            'created_at': '2013/03/17 16:39:56 +0000',",
        "detail": "social_core.tests.backends.test_yammer",
        "documentation": {}
    },
    {
        "label": "YandexOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_yandex",
        "description": "social_core.tests.backends.test_yandex",
        "peekOfCode": "class YandexOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.yandex.YandexOAuth2'\n    user_data_url = 'https://login.yandex.ru/info'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',\n        'token_type': 'bearer'\n    })\n    user_data_body = json.dumps({\n        'display_name': 'foobar',",
        "detail": "social_core.tests.backends.test_yandex",
        "documentation": {}
    },
    {
        "label": "YandexOAuth2TestEmptyEmail",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_yandex",
        "description": "social_core.tests.backends.test_yandex",
        "peekOfCode": "class YandexOAuth2TestEmptyEmail(OAuth2Test):\n    \"\"\"\n    When user log in to yandex service with social network account (e.g.\n    vk.com), they `default_email` could be empty.\n    \"\"\"\n    backend_path = 'social_core.backends.yandex.YandexOAuth2'\n    user_data_url = 'https://login.yandex.ru/info'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar',",
        "detail": "social_core.tests.backends.test_yandex",
        "documentation": {}
    },
    {
        "label": "ZoomOAuth2Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_zoom",
        "description": "social_core.tests.backends.test_zoom",
        "peekOfCode": "class ZoomOAuth2Test(OAuth2Test):\n    backend_path = 'social_core.backends.zoom.ZoomOAuth2'\n    user_data_url = 'https://api.zoom.us/v2/users/me'\n    expected_username = 'foobar'\n    access_token_body = json.dumps({\n        'access_token': 'foobar-token',\n        'token_type': 'bearer',\n        'refresh_token': 'foobar-refresh-token',\n        'expires_in': 3599,\n        'scope': 'identity'",
        "detail": "social_core.tests.backends.test_zoom",
        "documentation": {}
    },
    {
        "label": "ZoteroOAuth1Test",
        "kind": 6,
        "importPath": "social_core.tests.backends.test_zotero",
        "description": "social_core.tests.backends.test_zotero",
        "peekOfCode": "class ZoteroOAuth1Test(OAuth1Test):\n    backend_path = 'social_core.backends.zotero.ZoteroOAuth'\n    expected_username = 'FooBar'\n    access_token_body = urlencode({\n        'oauth_token': 'foobar',\n        'oauth_token_secret': 'rodgsNDK4hLJU1504Atk131G',\n        'userID': '123456_abcdef',\n        'username': 'FooBar'\n    })\n    request_token_body = urlencode({",
        "detail": "social_core.tests.backends.test_zotero",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "social_core.tests.models",
        "description": "social_core.tests.models",
        "peekOfCode": "class BaseModel:\n    @classmethod\n    def next_id(cls):\n        cls.NEXT_ID += 1\n        return cls.NEXT_ID - 1\n    @classmethod\n    def get(cls, key):\n        return cls.cache.get(key)\n    @classmethod\n    def reset_cache(cls):",
        "detail": "social_core.tests.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "social_core.tests.models",
        "description": "social_core.tests.models",
        "peekOfCode": "class User(BaseModel):\n    NEXT_ID = 1\n    cache = {}\n    _is_active = True\n    def __init__(self, username, email=None, **extra_user_fields):\n        self.id = User.next_id()\n        self.username = username\n        self.email = email\n        self.first_name = None\n        self.password = None",
        "detail": "social_core.tests.models",
        "documentation": {}
    },
    {
        "label": "TestUserSocialAuth",
        "kind": 6,
        "importPath": "social_core.tests.models",
        "description": "social_core.tests.models",
        "peekOfCode": "class TestUserSocialAuth(UserMixin, BaseModel):\n    NEXT_ID = 1\n    cache = {}\n    cache_by_uid = {}\n    def __init__(self, user, provider, uid, extra_data=None):\n        self.id = TestUserSocialAuth.next_id()\n        self.user = user\n        self.provider = provider\n        self.uid = uid\n        self.extra_data = extra_data or {}",
        "detail": "social_core.tests.models",
        "documentation": {}
    },
    {
        "label": "TestNonce",
        "kind": 6,
        "importPath": "social_core.tests.models",
        "description": "social_core.tests.models",
        "peekOfCode": "class TestNonce(NonceMixin, BaseModel):\n    NEXT_ID = 1\n    cache = {}\n    def __init__(self, server_url, timestamp, salt):\n        self.id = TestNonce.next_id()\n        self.server_url = server_url\n        self.timestamp = timestamp\n        self.salt = salt\n    @classmethod\n    def use(cls, server_url, timestamp, salt):",
        "detail": "social_core.tests.models",
        "documentation": {}
    },
    {
        "label": "TestAssociation",
        "kind": 6,
        "importPath": "social_core.tests.models",
        "description": "social_core.tests.models",
        "peekOfCode": "class TestAssociation(AssociationMixin, BaseModel):\n    NEXT_ID = 1\n    cache = {}\n    def __init__(self, server_url, handle):\n        self.id = TestAssociation.next_id()\n        self.server_url = server_url\n        self.handle = handle\n    def save(self):\n        TestAssociation.cache[(self.server_url, self.handle)] = self\n    @classmethod",
        "detail": "social_core.tests.models",
        "documentation": {}
    },
    {
        "label": "TestCode",
        "kind": 6,
        "importPath": "social_core.tests.models",
        "description": "social_core.tests.models",
        "peekOfCode": "class TestCode(CodeMixin, BaseModel):\n    NEXT_ID = 1\n    cache = {}\n    @classmethod\n    def get_code(cls, code):\n        for c in cls.cache.values():\n            if c.code == code:\n                return c\nclass TestPartial(PartialMixin, BaseModel):\n    NEXT_ID = 1",
        "detail": "social_core.tests.models",
        "documentation": {}
    },
    {
        "label": "TestPartial",
        "kind": 6,
        "importPath": "social_core.tests.models",
        "description": "social_core.tests.models",
        "peekOfCode": "class TestPartial(PartialMixin, BaseModel):\n    NEXT_ID = 1\n    cache = {}\n    def save(self):\n        TestPartial.cache[self.token] = self\n    @classmethod\n    def load(cls, token):\n        return cls.cache.get(token)\n    @classmethod\n    def destroy(cls, token):",
        "detail": "social_core.tests.models",
        "documentation": {}
    },
    {
        "label": "TestStorage",
        "kind": 6,
        "importPath": "social_core.tests.models",
        "description": "social_core.tests.models",
        "peekOfCode": "class TestStorage(BaseStorage):\n    user = TestUserSocialAuth\n    nonce = TestNonce\n    association = TestAssociation\n    code = TestCode\n    partial = TestPartial\n    @classmethod\n    def is_integrity_error(cls, exception):\n        pass",
        "detail": "social_core.tests.models",
        "documentation": {}
    },
    {
        "label": "ask_for_password",
        "kind": 2,
        "importPath": "social_core.tests.pipeline",
        "description": "social_core.tests.pipeline",
        "peekOfCode": "def ask_for_password(strategy, *args, **kwargs):\n    if strategy.session_get('password'):\n        return {'password': strategy.session_get('password')}\n    else:\n        return strategy.redirect(strategy.build_absolute_uri('/password'))\n@partial\ndef ask_for_slug(strategy, *args, **kwargs):\n    if strategy.session_get('slug'):\n        return {'slug': strategy.session_get('slug')}\n    else:",
        "detail": "social_core.tests.pipeline",
        "documentation": {}
    },
    {
        "label": "ask_for_slug",
        "kind": 2,
        "importPath": "social_core.tests.pipeline",
        "description": "social_core.tests.pipeline",
        "peekOfCode": "def ask_for_slug(strategy, *args, **kwargs):\n    if strategy.session_get('slug'):\n        return {'slug': strategy.session_get('slug')}\n    else:\n        return strategy.redirect(strategy.build_absolute_uri('/slug'))\ndef set_password(strategy, user, *args, **kwargs):\n    user.set_password(kwargs['password'])\ndef set_slug(strategy, user, *args, **kwargs):\n    user.slug = kwargs['slug']\ndef remove_user(strategy, user, *args, **kwargs):",
        "detail": "social_core.tests.pipeline",
        "documentation": {}
    },
    {
        "label": "set_password",
        "kind": 2,
        "importPath": "social_core.tests.pipeline",
        "description": "social_core.tests.pipeline",
        "peekOfCode": "def set_password(strategy, user, *args, **kwargs):\n    user.set_password(kwargs['password'])\ndef set_slug(strategy, user, *args, **kwargs):\n    user.slug = kwargs['slug']\ndef remove_user(strategy, user, *args, **kwargs):\n    return {'user': None}\n@partial\ndef set_user_from_kwargs(strategy, *args, **kwargs):\n    if strategy.session_get('attribute'):\n        kwargs['user'].id",
        "detail": "social_core.tests.pipeline",
        "documentation": {}
    },
    {
        "label": "set_slug",
        "kind": 2,
        "importPath": "social_core.tests.pipeline",
        "description": "social_core.tests.pipeline",
        "peekOfCode": "def set_slug(strategy, user, *args, **kwargs):\n    user.slug = kwargs['slug']\ndef remove_user(strategy, user, *args, **kwargs):\n    return {'user': None}\n@partial\ndef set_user_from_kwargs(strategy, *args, **kwargs):\n    if strategy.session_get('attribute'):\n        kwargs['user'].id\n    else:\n        return strategy.redirect(strategy.build_absolute_uri('/attribute'))",
        "detail": "social_core.tests.pipeline",
        "documentation": {}
    },
    {
        "label": "remove_user",
        "kind": 2,
        "importPath": "social_core.tests.pipeline",
        "description": "social_core.tests.pipeline",
        "peekOfCode": "def remove_user(strategy, user, *args, **kwargs):\n    return {'user': None}\n@partial\ndef set_user_from_kwargs(strategy, *args, **kwargs):\n    if strategy.session_get('attribute'):\n        kwargs['user'].id\n    else:\n        return strategy.redirect(strategy.build_absolute_uri('/attribute'))\n@partial\ndef set_user_from_args(strategy, user, *args, **kwargs):",
        "detail": "social_core.tests.pipeline",
        "documentation": {}
    },
    {
        "label": "set_user_from_kwargs",
        "kind": 2,
        "importPath": "social_core.tests.pipeline",
        "description": "social_core.tests.pipeline",
        "peekOfCode": "def set_user_from_kwargs(strategy, *args, **kwargs):\n    if strategy.session_get('attribute'):\n        kwargs['user'].id\n    else:\n        return strategy.redirect(strategy.build_absolute_uri('/attribute'))\n@partial\ndef set_user_from_args(strategy, user, *args, **kwargs):\n    if strategy.session_get('attribute'):\n        user.id\n    else:",
        "detail": "social_core.tests.pipeline",
        "documentation": {}
    },
    {
        "label": "set_user_from_args",
        "kind": 2,
        "importPath": "social_core.tests.pipeline",
        "description": "social_core.tests.pipeline",
        "peekOfCode": "def set_user_from_args(strategy, user, *args, **kwargs):\n    if strategy.session_get('attribute'):\n        user.id\n    else:\n        return strategy.redirect(strategy.build_absolute_uri('/attribute'))",
        "detail": "social_core.tests.pipeline",
        "documentation": {}
    },
    {
        "label": "Redirect",
        "kind": 6,
        "importPath": "social_core.tests.strategy",
        "description": "social_core.tests.strategy",
        "peekOfCode": "class Redirect:\n    def __init__(self, url):\n        self.url = url\nclass TestTemplateStrategy(BaseTemplateStrategy):\n    def render_template(self, tpl, context):\n        return tpl\n    def render_string(self, html, context):\n        return html\nclass TestStrategy(BaseStrategy):\n    DEFAULT_TEMPLATE_STRATEGY = TestTemplateStrategy",
        "detail": "social_core.tests.strategy",
        "documentation": {}
    },
    {
        "label": "TestTemplateStrategy",
        "kind": 6,
        "importPath": "social_core.tests.strategy",
        "description": "social_core.tests.strategy",
        "peekOfCode": "class TestTemplateStrategy(BaseTemplateStrategy):\n    def render_template(self, tpl, context):\n        return tpl\n    def render_string(self, html, context):\n        return html\nclass TestStrategy(BaseStrategy):\n    DEFAULT_TEMPLATE_STRATEGY = TestTemplateStrategy\n    def __init__(self, storage, tpl=None):\n        self._request_data = {}\n        self._settings = {}",
        "detail": "social_core.tests.strategy",
        "documentation": {}
    },
    {
        "label": "TestStrategy",
        "kind": 6,
        "importPath": "social_core.tests.strategy",
        "description": "social_core.tests.strategy",
        "peekOfCode": "class TestStrategy(BaseStrategy):\n    DEFAULT_TEMPLATE_STRATEGY = TestTemplateStrategy\n    def __init__(self, storage, tpl=None):\n        self._request_data = {}\n        self._settings = {}\n        self._session = {}\n        super().__init__(storage, tpl)\n    def redirect(self, url):\n        return Redirect(url)\n    def get_setting(self, name):",
        "detail": "social_core.tests.strategy",
        "documentation": {}
    },
    {
        "label": "TEST_URI",
        "kind": 5,
        "importPath": "social_core.tests.strategy",
        "description": "social_core.tests.strategy",
        "peekOfCode": "TEST_URI = 'http://myapp.com'\nTEST_HOST = 'myapp.com'\nclass Redirect:\n    def __init__(self, url):\n        self.url = url\nclass TestTemplateStrategy(BaseTemplateStrategy):\n    def render_template(self, tpl, context):\n        return tpl\n    def render_string(self, html, context):\n        return html",
        "detail": "social_core.tests.strategy",
        "documentation": {}
    },
    {
        "label": "TEST_HOST",
        "kind": 5,
        "importPath": "social_core.tests.strategy",
        "description": "social_core.tests.strategy",
        "peekOfCode": "TEST_HOST = 'myapp.com'\nclass Redirect:\n    def __init__(self, url):\n        self.url = url\nclass TestTemplateStrategy(BaseTemplateStrategy):\n    def render_template(self, tpl, context):\n        return tpl\n    def render_string(self, html, context):\n        return html\nclass TestStrategy(BaseStrategy):",
        "detail": "social_core.tests.strategy",
        "documentation": {}
    },
    {
        "label": "BaseExceptionTestCase",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class BaseExceptionTestCase(unittest.TestCase):\n    exception = None\n    expected_message = ''\n    def test_exception_message(self):\n        if self.exception is None and self.expected_message == '':\n            return\n        try:\n            raise self.exception\n        except SocialAuthBaseException as err:\n            self.assertEqual(str(err), self.expected_message)",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "WrongBackendTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class WrongBackendTest(BaseExceptionTestCase):\n    exception = WrongBackend('foobar')\n    expected_message = 'Incorrect authentication service \"foobar\"'\nclass AuthFailedTest(BaseExceptionTestCase):\n    exception = AuthFailed('foobar', 'wrong_user')\n    expected_message = 'Authentication failed: wrong_user'\nclass AuthFailedDeniedTest(BaseExceptionTestCase):\n    exception = AuthFailed('foobar', 'access_denied')\n    expected_message = 'Authentication process was canceled'\nclass AuthTokenErrorTest(BaseExceptionTestCase):",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthFailedTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthFailedTest(BaseExceptionTestCase):\n    exception = AuthFailed('foobar', 'wrong_user')\n    expected_message = 'Authentication failed: wrong_user'\nclass AuthFailedDeniedTest(BaseExceptionTestCase):\n    exception = AuthFailed('foobar', 'access_denied')\n    expected_message = 'Authentication process was canceled'\nclass AuthTokenErrorTest(BaseExceptionTestCase):\n    exception = AuthTokenError('foobar', 'Incorrect tokens')\n    expected_message = 'Token error: Incorrect tokens'\nclass AuthMissingParameterTest(BaseExceptionTestCase):",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthFailedDeniedTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthFailedDeniedTest(BaseExceptionTestCase):\n    exception = AuthFailed('foobar', 'access_denied')\n    expected_message = 'Authentication process was canceled'\nclass AuthTokenErrorTest(BaseExceptionTestCase):\n    exception = AuthTokenError('foobar', 'Incorrect tokens')\n    expected_message = 'Token error: Incorrect tokens'\nclass AuthMissingParameterTest(BaseExceptionTestCase):\n    exception = AuthMissingParameter('foobar', 'username')\n    expected_message = 'Missing needed parameter username'\nclass AuthStateMissingTest(BaseExceptionTestCase):",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthTokenErrorTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthTokenErrorTest(BaseExceptionTestCase):\n    exception = AuthTokenError('foobar', 'Incorrect tokens')\n    expected_message = 'Token error: Incorrect tokens'\nclass AuthMissingParameterTest(BaseExceptionTestCase):\n    exception = AuthMissingParameter('foobar', 'username')\n    expected_message = 'Missing needed parameter username'\nclass AuthStateMissingTest(BaseExceptionTestCase):\n    exception = AuthStateMissing('foobar')\n    expected_message = 'Session value state missing.'\nclass NotAllowedToDisconnectTest(BaseExceptionTestCase):",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthMissingParameterTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthMissingParameterTest(BaseExceptionTestCase):\n    exception = AuthMissingParameter('foobar', 'username')\n    expected_message = 'Missing needed parameter username'\nclass AuthStateMissingTest(BaseExceptionTestCase):\n    exception = AuthStateMissing('foobar')\n    expected_message = 'Session value state missing.'\nclass NotAllowedToDisconnectTest(BaseExceptionTestCase):\n    exception = NotAllowedToDisconnect()\n    expected_message = 'This account is not allowed to be disconnected.'\nclass AuthExceptionTest(BaseExceptionTestCase):",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthStateMissingTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthStateMissingTest(BaseExceptionTestCase):\n    exception = AuthStateMissing('foobar')\n    expected_message = 'Session value state missing.'\nclass NotAllowedToDisconnectTest(BaseExceptionTestCase):\n    exception = NotAllowedToDisconnect()\n    expected_message = 'This account is not allowed to be disconnected.'\nclass AuthExceptionTest(BaseExceptionTestCase):\n    exception = AuthException('foobar', 'message')\n    expected_message = 'message'\nclass AuthCanceledTest(BaseExceptionTestCase):",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "NotAllowedToDisconnectTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class NotAllowedToDisconnectTest(BaseExceptionTestCase):\n    exception = NotAllowedToDisconnect()\n    expected_message = 'This account is not allowed to be disconnected.'\nclass AuthExceptionTest(BaseExceptionTestCase):\n    exception = AuthException('foobar', 'message')\n    expected_message = 'message'\nclass AuthCanceledTest(BaseExceptionTestCase):\n    exception = AuthCanceled('foobar')\n    expected_message = 'Authentication process canceled'\nclass AuthCanceledWithExtraMessageTest(BaseExceptionTestCase):",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthExceptionTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthExceptionTest(BaseExceptionTestCase):\n    exception = AuthException('foobar', 'message')\n    expected_message = 'message'\nclass AuthCanceledTest(BaseExceptionTestCase):\n    exception = AuthCanceled('foobar')\n    expected_message = 'Authentication process canceled'\nclass AuthCanceledWithExtraMessageTest(BaseExceptionTestCase):\n    exception = AuthCanceled('foobar', 'error_message')\n    expected_message = 'Authentication process canceled: error_message'\nclass AuthUnknownErrorTest(BaseExceptionTestCase):",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthCanceledTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthCanceledTest(BaseExceptionTestCase):\n    exception = AuthCanceled('foobar')\n    expected_message = 'Authentication process canceled'\nclass AuthCanceledWithExtraMessageTest(BaseExceptionTestCase):\n    exception = AuthCanceled('foobar', 'error_message')\n    expected_message = 'Authentication process canceled: error_message'\nclass AuthUnknownErrorTest(BaseExceptionTestCase):\n    exception = AuthUnknownError('foobar', 'some error')\n    expected_message = 'An unknown error happened while ' \\\n                       'authenticating some error'",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthCanceledWithExtraMessageTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthCanceledWithExtraMessageTest(BaseExceptionTestCase):\n    exception = AuthCanceled('foobar', 'error_message')\n    expected_message = 'Authentication process canceled: error_message'\nclass AuthUnknownErrorTest(BaseExceptionTestCase):\n    exception = AuthUnknownError('foobar', 'some error')\n    expected_message = 'An unknown error happened while ' \\\n                       'authenticating some error'\nclass AuthStateForbiddenTest(BaseExceptionTestCase):\n    exception = AuthStateForbidden('foobar')\n    expected_message = 'Wrong state parameter given.'",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthUnknownErrorTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthUnknownErrorTest(BaseExceptionTestCase):\n    exception = AuthUnknownError('foobar', 'some error')\n    expected_message = 'An unknown error happened while ' \\\n                       'authenticating some error'\nclass AuthStateForbiddenTest(BaseExceptionTestCase):\n    exception = AuthStateForbidden('foobar')\n    expected_message = 'Wrong state parameter given.'\nclass AuthAlreadyAssociatedTest(BaseExceptionTestCase):\n    exception = AuthAlreadyAssociated('foobar')\n    expected_message = 'This account is already in use.'",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthStateForbiddenTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthStateForbiddenTest(BaseExceptionTestCase):\n    exception = AuthStateForbidden('foobar')\n    expected_message = 'Wrong state parameter given.'\nclass AuthAlreadyAssociatedTest(BaseExceptionTestCase):\n    exception = AuthAlreadyAssociated('foobar')\n    expected_message = 'This account is already in use.'\nclass AuthTokenRevokedTest(BaseExceptionTestCase):\n    exception = AuthTokenRevoked('foobar')\n    expected_message = 'User revoke access to the token'\nclass AuthForbiddenTest(BaseExceptionTestCase):",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthAlreadyAssociatedTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthAlreadyAssociatedTest(BaseExceptionTestCase):\n    exception = AuthAlreadyAssociated('foobar')\n    expected_message = 'This account is already in use.'\nclass AuthTokenRevokedTest(BaseExceptionTestCase):\n    exception = AuthTokenRevoked('foobar')\n    expected_message = 'User revoke access to the token'\nclass AuthForbiddenTest(BaseExceptionTestCase):\n    exception = AuthForbidden('foobar')\n    expected_message = 'Your credentials aren\\'t allowed'\nclass AuthUnreachableProviderTest(BaseExceptionTestCase):",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthTokenRevokedTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthTokenRevokedTest(BaseExceptionTestCase):\n    exception = AuthTokenRevoked('foobar')\n    expected_message = 'User revoke access to the token'\nclass AuthForbiddenTest(BaseExceptionTestCase):\n    exception = AuthForbidden('foobar')\n    expected_message = 'Your credentials aren\\'t allowed'\nclass AuthUnreachableProviderTest(BaseExceptionTestCase):\n    exception = AuthUnreachableProvider('foobar')\n    expected_message = 'The authentication provider could not be reached'\nclass InvalidEmailTest(BaseExceptionTestCase):",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthForbiddenTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthForbiddenTest(BaseExceptionTestCase):\n    exception = AuthForbidden('foobar')\n    expected_message = 'Your credentials aren\\'t allowed'\nclass AuthUnreachableProviderTest(BaseExceptionTestCase):\n    exception = AuthUnreachableProvider('foobar')\n    expected_message = 'The authentication provider could not be reached'\nclass InvalidEmailTest(BaseExceptionTestCase):\n    exception = InvalidEmail('foobar')\n    expected_message = 'Email couldn\\'t be validated'\nclass MissingBackendTest(BaseExceptionTestCase):",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "AuthUnreachableProviderTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class AuthUnreachableProviderTest(BaseExceptionTestCase):\n    exception = AuthUnreachableProvider('foobar')\n    expected_message = 'The authentication provider could not be reached'\nclass InvalidEmailTest(BaseExceptionTestCase):\n    exception = InvalidEmail('foobar')\n    expected_message = 'Email couldn\\'t be validated'\nclass MissingBackendTest(BaseExceptionTestCase):\n    exception = MissingBackend('backend')\n    expected_message = 'Missing backend \"backend\" entry'",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidEmailTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class InvalidEmailTest(BaseExceptionTestCase):\n    exception = InvalidEmail('foobar')\n    expected_message = 'Email couldn\\'t be validated'\nclass MissingBackendTest(BaseExceptionTestCase):\n    exception = MissingBackend('backend')\n    expected_message = 'Missing backend \"backend\" entry'",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "MissingBackendTest",
        "kind": 6,
        "importPath": "social_core.tests.test_exceptions",
        "description": "social_core.tests.test_exceptions",
        "peekOfCode": "class MissingBackendTest(BaseExceptionTestCase):\n    exception = MissingBackend('backend')\n    expected_message = 'Missing backend \"backend\" entry'",
        "detail": "social_core.tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "PartialDecoratorTestCase",
        "kind": 6,
        "importPath": "social_core.tests.test_partial",
        "description": "social_core.tests.test_partial",
        "peekOfCode": "class PartialDecoratorTestCase(unittest.TestCase):\n    def setUp(self):\n        super().setUp()\n        self.mock_current_partial_token = Mock()\n        self.mock_current_partial = Mock(token=self.mock_current_partial_token)\n        self.mock_strategy = Mock()\n        self.mock_backend = Mock()\n        self.mock_pipeline_index = Mock()\n        self.mock_partial_store = Mock()\n        self.mock_strategy.storage.partial.store = self.mock_partial_store",
        "detail": "social_core.tests.test_partial",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class IntegrityError(Exception):\n    pass\nclass UnknownError(Exception):\n    pass\nclass IntegrityErrorUserSocialAuth(TestUserSocialAuth):\n    @classmethod\n    def create_social_auth(cls, user, uid, provider):\n        raise IntegrityError()\n    @classmethod\n    def get_social_auth(cls, provider, uid):",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "UnknownError",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class UnknownError(Exception):\n    pass\nclass IntegrityErrorUserSocialAuth(TestUserSocialAuth):\n    @classmethod\n    def create_social_auth(cls, user, uid, provider):\n        raise IntegrityError()\n    @classmethod\n    def get_social_auth(cls, provider, uid):\n        if not hasattr(cls, '_called_times'):\n            cls._called_times = 0",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "IntegrityErrorUserSocialAuth",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class IntegrityErrorUserSocialAuth(TestUserSocialAuth):\n    @classmethod\n    def create_social_auth(cls, user, uid, provider):\n        raise IntegrityError()\n    @classmethod\n    def get_social_auth(cls, provider, uid):\n        if not hasattr(cls, '_called_times'):\n            cls._called_times = 0\n        cls._called_times += 1\n        if cls._called_times == 2:",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "IntegrityErrorStorage",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class IntegrityErrorStorage(TestStorage):\n    user = IntegrityErrorUserSocialAuth\n    @classmethod\n    def is_integrity_error(cls, exception):\n        \"\"\"Check if given exception flags an integrity error in the DB\"\"\"\n        return isinstance(exception, IntegrityError)\nclass UnknownErrorUserSocialAuth(TestUserSocialAuth):\n    @classmethod\n    def create_social_auth(cls, user, uid, provider):\n        raise UnknownError()",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "UnknownErrorUserSocialAuth",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class UnknownErrorUserSocialAuth(TestUserSocialAuth):\n    @classmethod\n    def create_social_auth(cls, user, uid, provider):\n        raise UnknownError()\nclass UnknownErrorStorage(IntegrityErrorStorage):\n    user = UnknownErrorUserSocialAuth\nclass IntegrityErrorOnLoginTest(BaseActionTest):\n    def setUp(self):\n        self.strategy = TestStrategy(IntegrityErrorStorage)\n        super().setUp()",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "UnknownErrorStorage",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class UnknownErrorStorage(IntegrityErrorStorage):\n    user = UnknownErrorUserSocialAuth\nclass IntegrityErrorOnLoginTest(BaseActionTest):\n    def setUp(self):\n        self.strategy = TestStrategy(IntegrityErrorStorage)\n        super().setUp()\n    def test_integrity_error(self):\n        self.do_login()\nclass UnknownErrorOnLoginTest(BaseActionTest):\n    def setUp(self):",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "IntegrityErrorOnLoginTest",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class IntegrityErrorOnLoginTest(BaseActionTest):\n    def setUp(self):\n        self.strategy = TestStrategy(IntegrityErrorStorage)\n        super().setUp()\n    def test_integrity_error(self):\n        self.do_login()\nclass UnknownErrorOnLoginTest(BaseActionTest):\n    def setUp(self):\n        self.strategy = TestStrategy(UnknownErrorStorage)\n        super().setUp()",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "UnknownErrorOnLoginTest",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class UnknownErrorOnLoginTest(BaseActionTest):\n    def setUp(self):\n        self.strategy = TestStrategy(UnknownErrorStorage)\n        super().setUp()\n    def test_unknown_error(self):\n        with self.assertRaises(UnknownError):\n            self.do_login()\nclass EmailAsUsernameTest(BaseActionTest):\n    expected_username = 'foo@bar.com'\n    def test_email_as_username(self):",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "EmailAsUsernameTest",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class EmailAsUsernameTest(BaseActionTest):\n    expected_username = 'foo@bar.com'\n    def test_email_as_username(self):\n        self.strategy.set_settings({\n            'SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL': True\n        })\n        self.do_login()\nclass RandomUsernameTest(BaseActionTest):\n    user_data_body = json.dumps({\n        'id': 1,",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "RandomUsernameTest",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class RandomUsernameTest(BaseActionTest):\n    user_data_body = json.dumps({\n        'id': 1,\n        'avatar_url': 'https://github.com/images/error/foobar_happy.gif',\n        'gravatar_id': 'somehexcode',\n        'url': 'https://api.github.com/users/foobar',\n        'name': 'monalisa foobar',\n        'company': 'GitHub',\n        'blog': 'https://github.com/blog',\n        'location': 'San Francisco',",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "SluggedUsernameTest",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class SluggedUsernameTest(BaseActionTest):\n    expected_username = 'foo-bar'\n    user_data_body = json.dumps({\n        'login': 'Foo Bar',\n        'id': 1,\n        'avatar_url': 'https://github.com/images/error/foobar_happy.gif',\n        'gravatar_id': 'somehexcode',\n        'url': 'https://api.github.com/users/foobar',\n        'name': 'monalisa foobar',\n        'company': 'GitHub',",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "RepeatedUsernameTest",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class RepeatedUsernameTest(BaseActionTest):\n    def test_random_username(self):\n        User(username='foobar')\n        self.do_login(after_complete_checks=False)\n        self.assertTrue(self.strategy.session_get('username')\n                                     .startswith('foobar'))\nclass AssociateByEmailTest(BaseActionTest):\n    def test_multiple_accounts_with_same_email(self):\n        user = User(username='foobar1')\n        user.email = 'foo@bar.com'",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "AssociateByEmailTest",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class AssociateByEmailTest(BaseActionTest):\n    def test_multiple_accounts_with_same_email(self):\n        user = User(username='foobar1')\n        user.email = 'foo@bar.com'\n        self.do_login(after_complete_checks=False)\n        self.assertTrue(self.strategy.session_get('username')\n                                     .startswith('foobar'))\nclass MultipleAccountsWithSameEmailTest(BaseActionTest):\n    def test_multiple_accounts_with_same_email(self):\n        user1 = User(username='foobar1')",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "MultipleAccountsWithSameEmailTest",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class MultipleAccountsWithSameEmailTest(BaseActionTest):\n    def test_multiple_accounts_with_same_email(self):\n        user1 = User(username='foobar1')\n        user2 = User(username='foobar2')\n        user1.email = 'foo@bar.com'\n        user2.email = 'foo@bar.com'\n        with self.assertRaises(AuthException):\n            self.do_login(after_complete_checks=False)\nclass UserPersistsInPartialPipeline(BaseActionTest):\n    def test_user_persists_in_partial_pipeline_kwargs(self):",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "UserPersistsInPartialPipeline",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class UserPersistsInPartialPipeline(BaseActionTest):\n    def test_user_persists_in_partial_pipeline_kwargs(self):\n        user = User(username='foobar1')\n        user.email = 'foo@bar.com'\n        self.strategy.set_settings({\n            'SOCIAL_AUTH_PIPELINE': (\n                'social_core.pipeline.social_auth.social_details',\n                'social_core.pipeline.social_auth.social_uid',\n                'social_core.pipeline.social_auth.associate_by_email',\n                'social_core.tests.pipeline.set_user_from_kwargs'",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "TestUserDetails",
        "kind": 6,
        "importPath": "social_core.tests.test_pipeline",
        "description": "social_core.tests.test_pipeline",
        "peekOfCode": "class TestUserDetails(BaseActionTest):\n    def test_user_details(self):\n        self.strategy.set_settings({})\n        details = {'first_name': 'Test'}\n        user = User(username='foobar')\n        backend = None\n        user_details(self.strategy, details, backend, user)\n        self.assertEqual(user.first_name, 'Test')\n        # Also test mutation\n        details = {'first_name': 'Test2'}",
        "detail": "social_core.tests.test_pipeline",
        "documentation": {}
    },
    {
        "label": "BrokenUser",
        "kind": 6,
        "importPath": "social_core.tests.test_storage",
        "description": "social_core.tests.test_storage",
        "peekOfCode": "class BrokenUser(UserMixin):\n    pass\nclass BrokenAssociation(AssociationMixin):\n    pass\nclass BrokenNonce(NonceMixin):\n    pass\nclass BrokenCode(CodeMixin):\n    pass\nclass BrokenStrategy(BaseStrategy):\n    pass",
        "detail": "social_core.tests.test_storage",
        "documentation": {}
    },
    {
        "label": "BrokenAssociation",
        "kind": 6,
        "importPath": "social_core.tests.test_storage",
        "description": "social_core.tests.test_storage",
        "peekOfCode": "class BrokenAssociation(AssociationMixin):\n    pass\nclass BrokenNonce(NonceMixin):\n    pass\nclass BrokenCode(CodeMixin):\n    pass\nclass BrokenStrategy(BaseStrategy):\n    pass\nclass BrokenStrategyWithSettings(BrokenStrategy):\n    def get_setting(self, name):",
        "detail": "social_core.tests.test_storage",
        "documentation": {}
    },
    {
        "label": "BrokenNonce",
        "kind": 6,
        "importPath": "social_core.tests.test_storage",
        "description": "social_core.tests.test_storage",
        "peekOfCode": "class BrokenNonce(NonceMixin):\n    pass\nclass BrokenCode(CodeMixin):\n    pass\nclass BrokenStrategy(BaseStrategy):\n    pass\nclass BrokenStrategyWithSettings(BrokenStrategy):\n    def get_setting(self, name):\n        raise AttributeError()\nclass BrokenStorage(BaseStorage):",
        "detail": "social_core.tests.test_storage",
        "documentation": {}
    },
    {
        "label": "BrokenCode",
        "kind": 6,
        "importPath": "social_core.tests.test_storage",
        "description": "social_core.tests.test_storage",
        "peekOfCode": "class BrokenCode(CodeMixin):\n    pass\nclass BrokenStrategy(BaseStrategy):\n    pass\nclass BrokenStrategyWithSettings(BrokenStrategy):\n    def get_setting(self, name):\n        raise AttributeError()\nclass BrokenStorage(BaseStorage):\n    pass\nclass BrokenUserTests(unittest.TestCase):",
        "detail": "social_core.tests.test_storage",
        "documentation": {}
    },
    {
        "label": "BrokenStrategy",
        "kind": 6,
        "importPath": "social_core.tests.test_storage",
        "description": "social_core.tests.test_storage",
        "peekOfCode": "class BrokenStrategy(BaseStrategy):\n    pass\nclass BrokenStrategyWithSettings(BrokenStrategy):\n    def get_setting(self, name):\n        raise AttributeError()\nclass BrokenStorage(BaseStorage):\n    pass\nclass BrokenUserTests(unittest.TestCase):\n    def setUp(self):\n        self.user = BrokenUser",
        "detail": "social_core.tests.test_storage",
        "documentation": {}
    },
    {
        "label": "BrokenStrategyWithSettings",
        "kind": 6,
        "importPath": "social_core.tests.test_storage",
        "description": "social_core.tests.test_storage",
        "peekOfCode": "class BrokenStrategyWithSettings(BrokenStrategy):\n    def get_setting(self, name):\n        raise AttributeError()\nclass BrokenStorage(BaseStorage):\n    pass\nclass BrokenUserTests(unittest.TestCase):\n    def setUp(self):\n        self.user = BrokenUser\n    def tearDown(self):\n        self.user = None",
        "detail": "social_core.tests.test_storage",
        "documentation": {}
    },
    {
        "label": "BrokenStorage",
        "kind": 6,
        "importPath": "social_core.tests.test_storage",
        "description": "social_core.tests.test_storage",
        "peekOfCode": "class BrokenStorage(BaseStorage):\n    pass\nclass BrokenUserTests(unittest.TestCase):\n    def setUp(self):\n        self.user = BrokenUser\n    def tearDown(self):\n        self.user = None\n    def test_get_username(self):\n        with self.assertRaisesRegex(NotImplementedError, NOT_IMPLEMENTED_MSG):\n            self.user.get_username(User('foobar'))",
        "detail": "social_core.tests.test_storage",
        "documentation": {}
    },
    {
        "label": "BrokenUserTests",
        "kind": 6,
        "importPath": "social_core.tests.test_storage",
        "description": "social_core.tests.test_storage",
        "peekOfCode": "class BrokenUserTests(unittest.TestCase):\n    def setUp(self):\n        self.user = BrokenUser\n    def tearDown(self):\n        self.user = None\n    def test_get_username(self):\n        with self.assertRaisesRegex(NotImplementedError, NOT_IMPLEMENTED_MSG):\n            self.user.get_username(User('foobar'))\n    def test_user_model(self):\n        with self.assertRaisesRegex(NotImplementedError, NOT_IMPLEMENTED_MSG):",
        "detail": "social_core.tests.test_storage",
        "documentation": {}
    },
    {
        "label": "BrokenAssociationTests",
        "kind": 6,
        "importPath": "social_core.tests.test_storage",
        "description": "social_core.tests.test_storage",
        "peekOfCode": "class BrokenAssociationTests(unittest.TestCase):\n    def setUp(self):\n        self.association = BrokenAssociation\n    def tearDown(self):\n        self.association = None\n    def test_store(self):\n        with self.assertRaisesRegex(NotImplementedError, NOT_IMPLEMENTED_MSG):\n            self.association.store('http://foobar.com', BrokenAssociation())\n    def test_get(self):\n        with self.assertRaisesRegex(NotImplementedError, NOT_IMPLEMENTED_MSG):",
        "detail": "social_core.tests.test_storage",
        "documentation": {}
    },
    {
        "label": "BrokenNonceTests",
        "kind": 6,
        "importPath": "social_core.tests.test_storage",
        "description": "social_core.tests.test_storage",
        "peekOfCode": "class BrokenNonceTests(unittest.TestCase):\n    def setUp(self):\n        self.nonce = BrokenNonce\n    def tearDown(self):\n        self.nonce = None\n    def test_use(self):\n        with self.assertRaisesRegex(NotImplementedError, NOT_IMPLEMENTED_MSG):\n            self.nonce.use('http://foobar.com', 1364951922, 'foobar123')\nclass BrokenCodeTest(unittest.TestCase):\n    def setUp(self):",
        "detail": "social_core.tests.test_storage",
        "documentation": {}
    },
    {
        "label": "BrokenCodeTest",
        "kind": 6,
        "importPath": "social_core.tests.test_storage",
        "description": "social_core.tests.test_storage",
        "peekOfCode": "class BrokenCodeTest(unittest.TestCase):\n    def setUp(self):\n        self.code = BrokenCode\n    def tearDown(self):\n        self.code = None\n    def test_get_code(self):\n        with self.assertRaisesRegex(NotImplementedError, NOT_IMPLEMENTED_MSG):\n            self.code.get_code('foobar')\nclass BrokenStrategyTests(unittest.TestCase):\n    def setUp(self):",
        "detail": "social_core.tests.test_storage",
        "documentation": {}
    },
    {
        "label": "BrokenStrategyTests",
        "kind": 6,
        "importPath": "social_core.tests.test_storage",
        "description": "social_core.tests.test_storage",
        "peekOfCode": "class BrokenStrategyTests(unittest.TestCase):\n    def setUp(self):\n        self.strategy = BrokenStrategy(storage=BrokenStorage)\n    def tearDown(self):\n        self.strategy = None\n    def test_redirect(self):\n        with self.assertRaisesRegex(NotImplementedError, NOT_IMPLEMENTED_MSG):\n            self.strategy.redirect('http://foobar.com')\n    def test_get_setting(self):\n        with self.assertRaisesRegex(NotImplementedError, NOT_IMPLEMENTED_MSG):",
        "detail": "social_core.tests.test_storage",
        "documentation": {}
    },
    {
        "label": "NOT_IMPLEMENTED_MSG",
        "kind": 5,
        "importPath": "social_core.tests.test_storage",
        "description": "social_core.tests.test_storage",
        "peekOfCode": "NOT_IMPLEMENTED_MSG = 'Implement in subclass'\nclass BrokenUser(UserMixin):\n    pass\nclass BrokenAssociation(AssociationMixin):\n    pass\nclass BrokenNonce(NonceMixin):\n    pass\nclass BrokenCode(CodeMixin):\n    pass\nclass BrokenStrategy(BaseStrategy):",
        "detail": "social_core.tests.test_storage",
        "documentation": {}
    },
    {
        "label": "SanitizeRedirectTest",
        "kind": 6,
        "importPath": "social_core.tests.test_utils",
        "description": "social_core.tests.test_utils",
        "peekOfCode": "class SanitizeRedirectTest(unittest.TestCase):\n    def test_none_redirect(self):\n        self.assertEqual(sanitize_redirect(['myapp.com'], None), None)\n    def test_empty_redirect(self):\n        self.assertEqual(sanitize_redirect(['myapp.com'], ''), None)\n    def test_dict_redirect(self):\n        self.assertEqual(sanitize_redirect(['myapp.com'], {}), None)\n    def test_invalid_redirect(self):\n        self.assertEqual(sanitize_redirect(['myapp.com'], {'foo': 'bar'}), None)\n    def test_wrong_path_redirect(self):",
        "detail": "social_core.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "UserIsAuthenticatedTest",
        "kind": 6,
        "importPath": "social_core.tests.test_utils",
        "description": "social_core.tests.test_utils",
        "peekOfCode": "class UserIsAuthenticatedTest(unittest.TestCase):\n    def test_user_is_none(self):\n        self.assertEqual(user_is_authenticated(None), False)\n    def test_user_is_not_none(self):\n        self.assertEqual(user_is_authenticated(object()), True)\n    def test_user_has_is_authenticated(self):\n        class User:\n            is_authenticated = True\n        self.assertEqual(user_is_authenticated(User()), True)\n    def test_user_has_is_authenticated_callable(self):",
        "detail": "social_core.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "UserIsActiveTest",
        "kind": 6,
        "importPath": "social_core.tests.test_utils",
        "description": "social_core.tests.test_utils",
        "peekOfCode": "class UserIsActiveTest(unittest.TestCase):\n    def test_user_is_none(self):\n        self.assertEqual(user_is_active(None), False)\n    def test_user_is_not_none(self):\n        self.assertEqual(user_is_active(object()), True)\n    def test_user_has_is_active(self):\n        class User:\n            is_active = True\n        self.assertEqual(user_is_active(User()), True)\n    def test_user_has_is_active_callable(self):",
        "detail": "social_core.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "SlugifyTest",
        "kind": 6,
        "importPath": "social_core.tests.test_utils",
        "description": "social_core.tests.test_utils",
        "peekOfCode": "class SlugifyTest(unittest.TestCase):\n    def test_slugify_formats(self):\n        if PY3:\n            self.assertEqual(slugify('FooBar'), 'foobar')\n            self.assertEqual(slugify('Foo Bar'), 'foo-bar')\n            self.assertEqual(slugify('Foo (Bar)'), 'foo-bar')\n        else:\n            self.assertEqual(slugify('FooBar'.decode('utf-8')), 'foobar')\n            self.assertEqual(slugify('Foo Bar'.decode('utf-8')), 'foo-bar')\n            self.assertEqual(slugify('Foo (Bar)'.decode('utf-8')), 'foo-bar')",
        "detail": "social_core.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "BuildAbsoluteURITest",
        "kind": 6,
        "importPath": "social_core.tests.test_utils",
        "description": "social_core.tests.test_utils",
        "peekOfCode": "class BuildAbsoluteURITest(unittest.TestCase):\n    def setUp(self):\n        self.host = 'http://foobar.com'\n    def tearDown(self):\n        self.host = None\n    def test_path_none(self):\n        self.assertEqual(build_absolute_uri(self.host), self.host)\n    def test_path_empty(self):\n        self.assertEqual(build_absolute_uri(self.host, ''), self.host)\n    def test_path_http(self):",
        "detail": "social_core.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "PartialPipelineData",
        "kind": 6,
        "importPath": "social_core.tests.test_utils",
        "description": "social_core.tests.test_utils",
        "peekOfCode": "class PartialPipelineData(unittest.TestCase):\n    def test_returns_partial_when_uid_and_email_do_match(self):\n        email = 'foo@example.com'\n        backend = self._backend({'uid': email})\n        backend.strategy.request_data.return_value = {\n            backend.ID_KEY: email\n        }\n        key, val = ('foo', 'bar')\n        partial = partial_pipeline_data(backend, None,\n                                        *(), **dict([(key, val)]))",
        "detail": "social_core.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "social_core.tests.test_utils",
        "description": "social_core.tests.test_utils",
        "peekOfCode": "PY3 = sys.version_info[0] == 3\nclass SanitizeRedirectTest(unittest.TestCase):\n    def test_none_redirect(self):\n        self.assertEqual(sanitize_redirect(['myapp.com'], None), None)\n    def test_empty_redirect(self):\n        self.assertEqual(sanitize_redirect(['myapp.com'], ''), None)\n    def test_dict_redirect(self):\n        self.assertEqual(sanitize_redirect(['myapp.com'], {}), None)\n    def test_invalid_redirect(self):\n        self.assertEqual(sanitize_redirect(['myapp.com'], {'foo': 'bar'}), None)",
        "detail": "social_core.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "do_auth",
        "kind": 2,
        "importPath": "social_core.actions",
        "description": "social_core.actions",
        "peekOfCode": "def do_auth(backend, redirect_name='next'):\n    # Save any defined next value into session\n    data = backend.strategy.request_data(merge=False)\n    # Save extra data into session.\n    for field_name in backend.setting('FIELDS_STORED_IN_SESSION', []):\n        if field_name in data:\n            backend.strategy.session_set(field_name, data[field_name])\n        else:\n            backend.strategy.session_set(field_name, None)\n    if redirect_name in data:",
        "detail": "social_core.actions",
        "documentation": {}
    },
    {
        "label": "do_complete",
        "kind": 2,
        "importPath": "social_core.actions",
        "description": "social_core.actions",
        "peekOfCode": "def do_complete(backend, login, user=None, redirect_name='next',\n                *args, **kwargs):\n    data = backend.strategy.request_data()\n    is_authenticated = user_is_authenticated(user)\n    user = user if is_authenticated else None\n    partial = partial_pipeline_data(backend, user, *args, **kwargs)\n    if partial:\n        user = backend.continue_pipeline(partial)\n        # clean partial data after usage\n        backend.strategy.clean_partial_pipeline(partial.token)",
        "detail": "social_core.actions",
        "documentation": {}
    },
    {
        "label": "do_disconnect",
        "kind": 2,
        "importPath": "social_core.actions",
        "description": "social_core.actions",
        "peekOfCode": "def do_disconnect(backend, user, association_id=None, redirect_name='next',\n                  *args, **kwargs):\n    partial = partial_pipeline_data(backend, user, *args, **kwargs)\n    if partial:\n        if association_id and not partial.kwargs.get('association_id'):\n            partial.extend_kwargs({\n                'association_id': association_id\n            })\n        response = backend.disconnect(*partial.args, **partial.kwargs)\n        # clean partial data after usage",
        "detail": "social_core.actions",
        "documentation": {}
    },
    {
        "label": "SocialAuthBaseException",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class SocialAuthBaseException(ValueError):\n    \"\"\"Base class for pipeline exceptions.\"\"\"\n    pass\nclass WrongBackend(SocialAuthBaseException):\n    def __init__(self, backend_name):\n        self.backend_name = backend_name\n    def __str__(self):\n        return 'Incorrect authentication service \"{}\"'.format(\n            self.backend_name\n        )",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "WrongBackend",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class WrongBackend(SocialAuthBaseException):\n    def __init__(self, backend_name):\n        self.backend_name = backend_name\n    def __str__(self):\n        return 'Incorrect authentication service \"{}\"'.format(\n            self.backend_name\n        )\nclass MissingBackend(WrongBackend):\n    def __str__(self):\n        return f'Missing backend \"{self.backend_name}\" entry'",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "MissingBackend",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class MissingBackend(WrongBackend):\n    def __str__(self):\n        return f'Missing backend \"{self.backend_name}\" entry'\nclass NotAllowedToDisconnect(SocialAuthBaseException):\n    \"\"\"User is not allowed to disconnect it's social account.\"\"\"\n    def __str__(self):\n        return 'This account is not allowed to be disconnected.'\nclass AuthException(SocialAuthBaseException):\n    \"\"\"Auth process exception.\"\"\"\n    def __init__(self, backend, *args, **kwargs):",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "NotAllowedToDisconnect",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class NotAllowedToDisconnect(SocialAuthBaseException):\n    \"\"\"User is not allowed to disconnect it's social account.\"\"\"\n    def __str__(self):\n        return 'This account is not allowed to be disconnected.'\nclass AuthException(SocialAuthBaseException):\n    \"\"\"Auth process exception.\"\"\"\n    def __init__(self, backend, *args, **kwargs):\n        self.backend = backend\n        super().__init__(*args, **kwargs)\nclass AuthFailed(AuthException):",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthException",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class AuthException(SocialAuthBaseException):\n    \"\"\"Auth process exception.\"\"\"\n    def __init__(self, backend, *args, **kwargs):\n        self.backend = backend\n        super().__init__(*args, **kwargs)\nclass AuthFailed(AuthException):\n    \"\"\"Auth process failed for some reason.\"\"\"\n    def __str__(self):\n        msg = super().__str__()\n        if msg == 'access_denied':",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthFailed",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class AuthFailed(AuthException):\n    \"\"\"Auth process failed for some reason.\"\"\"\n    def __str__(self):\n        msg = super().__str__()\n        if msg == 'access_denied':\n            return 'Authentication process was canceled'\n        return f'Authentication failed: {msg}'\nclass AuthCanceled(AuthException):\n    \"\"\"Auth process was canceled by user.\"\"\"\n    def __init__(self, *args, **kwargs):",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthCanceled",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class AuthCanceled(AuthException):\n    \"\"\"Auth process was canceled by user.\"\"\"\n    def __init__(self, *args, **kwargs):\n        self.response = kwargs.pop('response', None)\n        super().__init__(*args, **kwargs)\n    def __str__(self):\n        msg = super().__str__()\n        if msg:\n            return f'Authentication process canceled: {msg}'\n        return 'Authentication process canceled'",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthUnknownError",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class AuthUnknownError(AuthException):\n    \"\"\"Unknown auth process error.\"\"\"\n    def __str__(self):\n        msg = super().__str__()\n        return f'An unknown error happened while authenticating {msg}'\nclass AuthTokenError(AuthException):\n    \"\"\"Auth token error.\"\"\"\n    def __str__(self):\n        msg = super().__str__()\n        return f'Token error: {msg}'",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthTokenError",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class AuthTokenError(AuthException):\n    \"\"\"Auth token error.\"\"\"\n    def __str__(self):\n        msg = super().__str__()\n        return f'Token error: {msg}'\nclass AuthMissingParameter(AuthException):\n    \"\"\"Missing parameter needed to start or complete the process.\"\"\"\n    def __init__(self, backend, parameter, *args, **kwargs):\n        self.parameter = parameter\n        super().__init__(backend, *args, **kwargs)",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthMissingParameter",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class AuthMissingParameter(AuthException):\n    \"\"\"Missing parameter needed to start or complete the process.\"\"\"\n    def __init__(self, backend, parameter, *args, **kwargs):\n        self.parameter = parameter\n        super().__init__(backend, *args, **kwargs)\n    def __str__(self):\n        return f'Missing needed parameter {self.parameter}'\nclass AuthStateMissing(AuthException):\n    \"\"\"State parameter is incorrect.\"\"\"\n    def __str__(self):",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthStateMissing",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class AuthStateMissing(AuthException):\n    \"\"\"State parameter is incorrect.\"\"\"\n    def __str__(self):\n        return 'Session value state missing.'\nclass AuthStateForbidden(AuthException):\n    \"\"\"State parameter is incorrect.\"\"\"\n    def __str__(self):\n        return 'Wrong state parameter given.'\nclass AuthAlreadyAssociated(AuthException):\n    \"\"\"A different user has already associated the target social account\"\"\"",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthStateForbidden",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class AuthStateForbidden(AuthException):\n    \"\"\"State parameter is incorrect.\"\"\"\n    def __str__(self):\n        return 'Wrong state parameter given.'\nclass AuthAlreadyAssociated(AuthException):\n    \"\"\"A different user has already associated the target social account\"\"\"\n    def __str__(self):\n        return 'This account is already in use.'\nclass AuthTokenRevoked(AuthException):\n    \"\"\"User revoked the access_token in the provider.\"\"\"",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthAlreadyAssociated",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class AuthAlreadyAssociated(AuthException):\n    \"\"\"A different user has already associated the target social account\"\"\"\n    def __str__(self):\n        return 'This account is already in use.'\nclass AuthTokenRevoked(AuthException):\n    \"\"\"User revoked the access_token in the provider.\"\"\"\n    def __str__(self):\n        return 'User revoke access to the token'\nclass AuthForbidden(AuthException):\n    \"\"\"Authentication for this user is forbidden\"\"\"",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthTokenRevoked",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class AuthTokenRevoked(AuthException):\n    \"\"\"User revoked the access_token in the provider.\"\"\"\n    def __str__(self):\n        return 'User revoke access to the token'\nclass AuthForbidden(AuthException):\n    \"\"\"Authentication for this user is forbidden\"\"\"\n    def __str__(self):\n        return 'Your credentials aren\\'t allowed'\nclass AuthUnreachableProvider(AuthException):\n    \"\"\"Cannot reach the provider\"\"\"",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthForbidden",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class AuthForbidden(AuthException):\n    \"\"\"Authentication for this user is forbidden\"\"\"\n    def __str__(self):\n        return 'Your credentials aren\\'t allowed'\nclass AuthUnreachableProvider(AuthException):\n    \"\"\"Cannot reach the provider\"\"\"\n    def __str__(self):\n        return 'The authentication provider could not be reached'\nclass InvalidEmail(AuthException):\n    def __str__(self):",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthUnreachableProvider",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class AuthUnreachableProvider(AuthException):\n    \"\"\"Cannot reach the provider\"\"\"\n    def __str__(self):\n        return 'The authentication provider could not be reached'\nclass InvalidEmail(AuthException):\n    def __str__(self):\n        return 'Email couldn\\'t be validated'",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidEmail",
        "kind": 6,
        "importPath": "social_core.exceptions",
        "description": "social_core.exceptions",
        "peekOfCode": "class InvalidEmail(AuthException):\n    def __str__(self):\n        return 'Email couldn\\'t be validated'",
        "detail": "social_core.exceptions",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "kind": 6,
        "importPath": "social_core.storage",
        "description": "social_core.storage",
        "peekOfCode": "class UserMixin:\n    # Consider tokens that expire in 5 seconds as already expired\n    ACCESS_TOKEN_EXPIRED_THRESHOLD = 5\n    user = ''\n    provider = ''\n    uid = None\n    extra_data = None\n    def get_backend(self, strategy):\n        return strategy.get_backend_class(self.provider)\n    def get_backend_instance(self, strategy):",
        "detail": "social_core.storage",
        "documentation": {}
    },
    {
        "label": "NonceMixin",
        "kind": 6,
        "importPath": "social_core.storage",
        "description": "social_core.storage",
        "peekOfCode": "class NonceMixin:\n    \"\"\"One use numbers\"\"\"\n    server_url = ''\n    timestamp = 0\n    salt = ''\n    @classmethod\n    def use(cls, server_url, timestamp, salt):\n        \"\"\"Create a Nonce instance\"\"\"\n        raise NotImplementedError('Implement in subclass')\n    @classmethod",
        "detail": "social_core.storage",
        "documentation": {}
    },
    {
        "label": "AssociationMixin",
        "kind": 6,
        "importPath": "social_core.storage",
        "description": "social_core.storage",
        "peekOfCode": "class AssociationMixin:\n    \"\"\"OpenId account association\"\"\"\n    server_url = ''\n    handle = ''\n    secret = ''\n    issued = 0\n    lifetime = 0\n    assoc_type = ''\n    @classmethod\n    def oids(cls, server_url, handle=None):",
        "detail": "social_core.storage",
        "documentation": {}
    },
    {
        "label": "CodeMixin",
        "kind": 6,
        "importPath": "social_core.storage",
        "description": "social_core.storage",
        "peekOfCode": "class CodeMixin:\n    email = ''\n    code = ''\n    verified = False\n    def verify(self):\n        self.verified = True\n        self.save()\n    @classmethod\n    def generate_code(cls):\n        return uuid.uuid4().hex",
        "detail": "social_core.storage",
        "documentation": {}
    },
    {
        "label": "PartialMixin",
        "kind": 6,
        "importPath": "social_core.storage",
        "description": "social_core.storage",
        "peekOfCode": "class PartialMixin:\n    token = ''\n    data = ''\n    next_step = ''\n    backend = ''\n    @property\n    def args(self):\n        return self.data.get('args', [])\n    @args.setter\n    def args(self, value):",
        "detail": "social_core.storage",
        "documentation": {}
    },
    {
        "label": "BaseStorage",
        "kind": 6,
        "importPath": "social_core.storage",
        "description": "social_core.storage",
        "peekOfCode": "class BaseStorage:\n    user = UserMixin\n    nonce = NonceMixin\n    association = AssociationMixin\n    code = CodeMixin\n    partial = PartialMixin\n    @classmethod\n    def is_integrity_error(cls, exception):\n        \"\"\"Check if given exception flags an integrity error in the DB\"\"\"\n        raise NotImplementedError('Implement in subclass')",
        "detail": "social_core.storage",
        "documentation": {}
    },
    {
        "label": "NO_ASCII_REGEX",
        "kind": 5,
        "importPath": "social_core.storage",
        "description": "social_core.storage",
        "peekOfCode": "NO_ASCII_REGEX = re.compile(r'[^\\x00-\\x7F]+')\nNO_SPECIAL_REGEX = re.compile(r'[^\\w.@+_-]+', re.UNICODE)\nclass UserMixin:\n    # Consider tokens that expire in 5 seconds as already expired\n    ACCESS_TOKEN_EXPIRED_THRESHOLD = 5\n    user = ''\n    provider = ''\n    uid = None\n    extra_data = None\n    def get_backend(self, strategy):",
        "detail": "social_core.storage",
        "documentation": {}
    },
    {
        "label": "NO_SPECIAL_REGEX",
        "kind": 5,
        "importPath": "social_core.storage",
        "description": "social_core.storage",
        "peekOfCode": "NO_SPECIAL_REGEX = re.compile(r'[^\\w.@+_-]+', re.UNICODE)\nclass UserMixin:\n    # Consider tokens that expire in 5 seconds as already expired\n    ACCESS_TOKEN_EXPIRED_THRESHOLD = 5\n    user = ''\n    provider = ''\n    uid = None\n    extra_data = None\n    def get_backend(self, strategy):\n        return strategy.get_backend_class(self.provider)",
        "detail": "social_core.storage",
        "documentation": {}
    },
    {
        "label": "OpenIdStore",
        "kind": 6,
        "importPath": "social_core.store",
        "description": "social_core.store",
        "peekOfCode": "class OpenIdStore(BaseOpenIDStore):\n    \"\"\"Storage class\"\"\"\n    def __init__(self, strategy):\n        \"\"\"Init method\"\"\"\n        super().__init__()\n        self.strategy = strategy\n        self.storage = strategy.storage\n        self.assoc = self.storage.association\n        self.nonce = self.storage.nonce\n        self.max_nonce_age = 6 * 60 * 60  # Six hours",
        "detail": "social_core.store",
        "documentation": {}
    },
    {
        "label": "OpenIdSessionWrapper",
        "kind": 6,
        "importPath": "social_core.store",
        "description": "social_core.store",
        "peekOfCode": "class OpenIdSessionWrapper(dict):\n    pickle_instances = (\n        '_yadis_services__openid_consumer_',\n        '_openid_consumer_last_token'\n    )\n    def __getitem__(self, name):\n        value = super().__getitem__(name)\n        if name in self.pickle_instances:\n            value = pickle.loads(value)\n        return value",
        "detail": "social_core.store",
        "documentation": {}
    },
    {
        "label": "BaseTemplateStrategy",
        "kind": 6,
        "importPath": "social_core.strategy",
        "description": "social_core.strategy",
        "peekOfCode": "class BaseTemplateStrategy:\n    def __init__(self, strategy):\n        self.strategy = strategy\n    def render(self, tpl=None, html=None, context=None):\n        if not tpl and not html:\n            raise ValueError('Missing template or html parameters')\n        context = context or {}\n        if tpl:\n            return self.render_template(tpl, context)\n        else:",
        "detail": "social_core.strategy",
        "documentation": {}
    },
    {
        "label": "BaseStrategy",
        "kind": 6,
        "importPath": "social_core.strategy",
        "description": "social_core.strategy",
        "peekOfCode": "class BaseStrategy:\n    ALLOWED_CHARS = 'abcdefghijklmnopqrstuvwxyz' \\\n                    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \\\n                    '0123456789'\n    DEFAULT_TEMPLATE_STRATEGY = BaseTemplateStrategy\n    def __init__(self, storage=None, tpl=None):\n        self.storage = storage\n        self.tpl = (tpl or self.DEFAULT_TEMPLATE_STRATEGY)(self)\n    def setting(self, name, default=None, backend=None):\n        names = [setting_name(name), name]",
        "detail": "social_core.strategy",
        "documentation": {}
    },
    {
        "label": "SSLHttpAdapter",
        "kind": 6,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "class SSLHttpAdapter(HTTPAdapter):\n    \"\"\"\"\n    Transport adapter that allows to use any SSL protocol. Based on:\n    http://requests.rtfd.org/latest/user/advanced/#example-specific-ssl-version\n    \"\"\"\n    def __init__(self, ssl_protocol):\n        self.ssl_protocol = ssl_protocol\n        super().__init__()\n    def init_poolmanager(self, connections, maxsize, block=False):\n        self.poolmanager = PoolManager(",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 6,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "class cache:\n    \"\"\"\n    Cache decorator that caches the return value of a method for a\n    specified time.\n    It maintains a cache per class, so subclasses have a different cache entry\n    for the same cached method.\n    Does not work for methods with arguments.\n    \"\"\"\n    def __init__(self, ttl):\n        self.ttl = ttl",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "import_course",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def import_course(name):\n    __import__(name)\n    return sys.courses[name]\ndef course_member(name):\n    mod, member = name.rsplit('.', 1)\n    course = import_course(mod)\n    return getattr(course, member)\ndef user_agent():\n    \"\"\"Builds a simple User-Agent string to send in requests\"\"\"\n    return 'social-auth-' + social_core.__version__",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "course_member",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def course_member(name):\n    mod, member = name.rsplit('.', 1)\n    course = import_course(mod)\n    return getattr(course, member)\ndef user_agent():\n    \"\"\"Builds a simple User-Agent string to send in requests\"\"\"\n    return 'social-auth-' + social_core.__version__\ndef url_add_parameters(url, params):\n    \"\"\"Adds parameters to URL, parameter will be repeated if already present\"\"\"\n    if params:",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "user_agent",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def user_agent():\n    \"\"\"Builds a simple User-Agent string to send in requests\"\"\"\n    return 'social-auth-' + social_core.__version__\ndef url_add_parameters(url, params):\n    \"\"\"Adds parameters to URL, parameter will be repeated if already present\"\"\"\n    if params:\n        fragments = list(urlparse(url))\n        value = parse_qs(fragments[4])\n        value.update(params)\n        fragments[4] = urlencode(value)",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "url_add_parameters",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def url_add_parameters(url, params):\n    \"\"\"Adds parameters to URL, parameter will be repeated if already present\"\"\"\n    if params:\n        fragments = list(urlparse(url))\n        value = parse_qs(fragments[4])\n        value.update(params)\n        fragments[4] = urlencode(value)\n        url = urlunparse(fragments)\n    return url\ndef to_setting_name(*names):",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "to_setting_name",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def to_setting_name(*names):\n    return '_'.join([name.upper().replace('-', '_') for name in names if name])\ndef setting_name(*names):\n    return to_setting_name(*((SETTING_PREFIX,) + names))\ndef sanitize_redirect(hosts, redirect_to):\n    \"\"\"\n    Given a list of hostnames and an untrusted URL to redirect to,\n    this method tests it to make sure it isn't garbage/harmful\n    and returns it, else returns None, similar as how's it done\n    on django.contrib.auth.views.",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "setting_name",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def setting_name(*names):\n    return to_setting_name(*((SETTING_PREFIX,) + names))\ndef sanitize_redirect(hosts, redirect_to):\n    \"\"\"\n    Given a list of hostnames and an untrusted URL to redirect to,\n    this method tests it to make sure it isn't garbage/harmful\n    and returns it, else returns None, similar as how's it done\n    on django.contrib.auth.views.\n    \"\"\"\n    # Avoid redirect on evil URLs like ///evil.com",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "sanitize_redirect",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def sanitize_redirect(hosts, redirect_to):\n    \"\"\"\n    Given a list of hostnames and an untrusted URL to redirect to,\n    this method tests it to make sure it isn't garbage/harmful\n    and returns it, else returns None, similar as how's it done\n    on django.contrib.auth.views.\n    \"\"\"\n    # Avoid redirect on evil URLs like ///evil.com\n    if not redirect_to or not hasattr(redirect_to, 'startswith') or \\\n       redirect_to.startswith('///'):",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "user_is_authenticated",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def user_is_authenticated(user):\n    if user and hasattr(user, 'is_authenticated'):\n        if callable(user.is_authenticated):\n            authenticated = user.is_authenticated()\n        else:\n            authenticated = user.is_authenticated\n    elif user:\n        authenticated = True\n    else:\n        authenticated = False",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "user_is_active",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def user_is_active(user):\n    if user and hasattr(user, 'is_active'):\n        if callable(user.is_active):\n            is_active = user.is_active()\n        else:\n            is_active = user.is_active\n    elif user:\n        is_active = True\n    else:\n        is_active = False",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "slugify",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def slugify(value):\n    \"\"\"Converts to lowercase, removes non-word characters (alphanumerics\n    and underscores) and converts spaces to hyphens. Also strips leading\n    and trailing whitespace.\"\"\"\n    value = unicodedata.normalize('NFKD', str(value)) \\\n                       .encode('ascii', 'ignore') \\\n                       .decode('ascii')\n    value = re.sub(r'[^\\w\\s-]', '', value).strip().lower()\n    return re.sub(r'[-\\s]+', '-', value)\ndef first(func, items):",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "first",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def first(func, items):\n    \"\"\"Return the first item in the list for what func returns True\"\"\"\n    for item in items:\n        if func(item):\n            return item\ndef parse_qs(value):\n    \"\"\"Like urlparse.parse_qs but transform list values to single items\"\"\"\n    return drop_lists(battery_parse_qs(value))\ndef drop_lists(value):\n    out = {}",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def parse_qs(value):\n    \"\"\"Like urlparse.parse_qs but transform list values to single items\"\"\"\n    return drop_lists(battery_parse_qs(value))\ndef drop_lists(value):\n    out = {}\n    for key, val in value.items():\n        val = val[0]\n        if isinstance(key, bytes):\n            key = str(key, 'utf-8')\n        if isinstance(val, bytes):",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "drop_lists",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def drop_lists(value):\n    out = {}\n    for key, val in value.items():\n        val = val[0]\n        if isinstance(key, bytes):\n            key = str(key, 'utf-8')\n        if isinstance(val, bytes):\n            val = str(val, 'utf-8')\n        out[key] = val\n    return out",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "partial_pipeline_data",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def partial_pipeline_data(backend, user=None, partial_token=None,\n                          *args, **kwargs):\n    request_data = backend.strategy.request_data()\n    partial_argument_name = backend.setting('PARTIAL_PIPELINE_TOKEN_NAME',\n                                            'partial_token')\n    partial_token = partial_token or \\\n        request_data.get(partial_argument_name) or \\\n        backend.strategy.session_get(PARTIAL_TOKEN_SESSION_NAME, None)\n    if partial_token:\n        partial = backend.strategy.partial_load(partial_token)",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "build_absolute_uri",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def build_absolute_uri(host_url, path=None):\n    \"\"\"Build absolute URI with given (optional) path\"\"\"\n    path = path or ''\n    if path.startswith('http://') or path.startswith('https://'):\n        return path\n    if host_url.endswith('/') and path.startswith('/'):\n        path = path[1:]\n    return host_url + path\ndef constant_time_compare(val1, val2):\n    \"\"\"Compare two values and prevent timing attacks for cryptographic use.\"\"\"",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "constant_time_compare",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def constant_time_compare(val1, val2):\n    \"\"\"Compare two values and prevent timing attacks for cryptographic use.\"\"\"\n    if isinstance(val1, str):\n        val1 = val1.encode('utf-8')\n    if isinstance(val2, str):\n        val2 = val2.encode('utf-8')\n    return hmac.compare_digest(val1, val2)\ndef is_url(value):\n    return value and \\\n           (value.startswith('http://') or",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "is_url",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def is_url(value):\n    return value and \\\n           (value.startswith('http://') or\n            value.startswith('https://') or\n            value.startswith('/'))\ndef setting_url(backend, *names):\n    for name in names:\n        if is_url(name):\n            return name\n        else:",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "setting_url",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def setting_url(backend, *names):\n    for name in names:\n        if is_url(name):\n            return name\n        else:\n            value = backend.setting(name)\n            if is_url(value):\n                return value\ndef handle_http_errors(func):\n    @functools.wraps(func)",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "handle_http_errors",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def handle_http_errors(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except requests.HTTPError as err:\n            if err.response.status_code == 400:\n                raise AuthCanceled(args[0], response=err.response)\n            elif err.response.status_code == 401:\n                raise AuthForbidden(args[0])",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "append_slash",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def append_slash(url):\n    \"\"\"Make sure we append a slash at the end of the URL otherwise we\n    have issues with urljoin Example:\n    >>> urlparse.urljoin('http://www.example.com/api/v3', 'user/1/')\n    'http://www.example.com/api/user/1/'\n    \"\"\"\n    if url and not url.endswith('/'):\n        url = f'{url}/'\n    return url\ndef get_strategy(strategy, storage, *args, **kwargs):",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "get_strategy",
        "kind": 2,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "def get_strategy(strategy, storage, *args, **kwargs):\n    Strategy = course_member(strategy)\n    Storage = course_member(storage)\n    return Strategy(Storage, *args, **kwargs)\nclass cache:\n    \"\"\"\n    Cache decorator that caches the return value of a method for a\n    specified time.\n    It maintains a cache per class, so subclasses have a different cache entry\n    for the same cached method.",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "SETTING_PREFIX",
        "kind": 5,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "SETTING_PREFIX = 'SOCIAL_AUTH'\nPARTIAL_TOKEN_SESSION_NAME = 'partial_pipeline_token'\nsocial_logger = logging.getLogger('social')\nclass SSLHttpAdapter(HTTPAdapter):\n    \"\"\"\"\n    Transport adapter that allows to use any SSL protocol. Based on:\n    http://requests.rtfd.org/latest/user/advanced/#example-specific-ssl-version\n    \"\"\"\n    def __init__(self, ssl_protocol):\n        self.ssl_protocol = ssl_protocol",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "PARTIAL_TOKEN_SESSION_NAME",
        "kind": 5,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "PARTIAL_TOKEN_SESSION_NAME = 'partial_pipeline_token'\nsocial_logger = logging.getLogger('social')\nclass SSLHttpAdapter(HTTPAdapter):\n    \"\"\"\"\n    Transport adapter that allows to use any SSL protocol. Based on:\n    http://requests.rtfd.org/latest/user/advanced/#example-specific-ssl-version\n    \"\"\"\n    def __init__(self, ssl_protocol):\n        self.ssl_protocol = ssl_protocol\n        super().__init__()",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "social_logger",
        "kind": 5,
        "importPath": "social_core.utils",
        "description": "social_core.utils",
        "peekOfCode": "social_logger = logging.getLogger('social')\nclass SSLHttpAdapter(HTTPAdapter):\n    \"\"\"\"\n    Transport adapter that allows to use any SSL protocol. Based on:\n    http://requests.rtfd.org/latest/user/advanced/#example-specific-ssl-version\n    \"\"\"\n    def __init__(self, ssl_protocol):\n        self.ssl_protocol = ssl_protocol\n        super().__init__()\n    def init_poolmanager(self, connections, maxsize, block=False):",
        "detail": "social_core.utils",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "social_django.management.commands.clearsocial",
        "description": "social_django.management.commands.clearsocial",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'removes old not used verification codes and partials'\n    def add_arguments(self, parser):\n        super().add_arguments(parser)\n        parser.add_argument(\n            '--age',\n            action='store',\n            type=int,\n            dest='age',\n            default=14,",
        "detail": "social_django.management.commands.clearsocial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0001_initial",
        "description": "social_django.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Partial',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "social_django.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0002_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0002_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 2, 20, 43, 35, 131350)),\n        ),",
        "detail": "social_django.migrations.0002_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0003_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0003_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0002_alter_code_timestamp_alter_partial_timestamp_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 6, 18, 48, 49, 431568)),\n        ),",
        "detail": "social_django.migrations.0003_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0004_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0004_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0003_alter_code_timestamp_alter_partial_timestamp_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 6, 19, 57, 10, 44377)),\n        ),",
        "detail": "social_django.migrations.0004_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0005_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0005_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0004_alter_code_timestamp_alter_partial_timestamp_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 7, 12, 46, 39, 797377)),\n        ),",
        "detail": "social_django.migrations.0005_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0006_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0006_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0005_alter_code_timestamp_alter_partial_timestamp_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 7, 15, 26, 44, 667932)),\n        ),",
        "detail": "social_django.migrations.0006_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0007_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0007_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0006_alter_code_timestamp_alter_partial_timestamp_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 7, 15, 35, 17, 793259)),\n        ),",
        "detail": "social_django.migrations.0007_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0008_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0008_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0007_alter_code_timestamp_alter_partial_timestamp_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 7, 15, 38, 8, 981944)),\n        ),",
        "detail": "social_django.migrations.0008_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0009_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0009_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0008_alter_code_timestamp_alter_partial_timestamp_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 8, 14, 57, 41, 144237)),\n        ),",
        "detail": "social_django.migrations.0009_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0010_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0010_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0009_alter_code_timestamp_alter_partial_timestamp_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 8, 15, 8, 13, 257491)),\n        ),",
        "detail": "social_django.migrations.0010_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0011_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0011_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0010_alter_code_timestamp_alter_partial_timestamp_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 8, 15, 54, 44, 550270)),\n        ),",
        "detail": "social_django.migrations.0011_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0012_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0012_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0011_alter_code_timestamp_alter_partial_timestamp_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 9, 18, 3, 53, 494144)),\n        ),",
        "detail": "social_django.migrations.0012_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0013_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0013_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0012_alter_code_timestamp_alter_partial_timestamp_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 16, 15, 11, 31, 773051)),\n        ),",
        "detail": "social_django.migrations.0013_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0014_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0014_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0013_alter_code_timestamp_alter_partial_timestamp_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 16, 15, 23, 45, 87888)),\n        ),",
        "detail": "social_django.migrations.0014_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_django.migrations.0015_alter_code_timestamp_alter_partial_timestamp_and_more",
        "description": "social_django.migrations.0015_alter_code_timestamp_alter_partial_timestamp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('social_django', '0014_alter_code_timestamp_alter_partial_timestamp_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='code',\n            name='timestamp',\n            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 1, 16, 17, 40, 49, 207394)),\n        ),",
        "detail": "social_django.migrations.0015_alter_code_timestamp_alter_partial_timestamp_and_more",
        "documentation": {}
    },
    {
        "label": "UserSocialAuthOption",
        "kind": 6,
        "importPath": "social_django.admin",
        "description": "social_django.admin",
        "peekOfCode": "class UserSocialAuthOption(admin.ModelAdmin):\n    \"\"\"Social Auth user options\"\"\"\n    list_display = ('user', 'id', 'provider', 'uid')\n    list_filter = ('provider',)\n    raw_id_fields = ('user',)\n    list_select_related = True\n    def get_search_fields(self, request=None):\n        search_fields = getattr(\n            settings, setting_name('ADMIN_USER_SEARCH_FIELDS'), None\n        )",
        "detail": "social_django.admin",
        "documentation": {}
    },
    {
        "label": "NonceOption",
        "kind": 6,
        "importPath": "social_django.admin",
        "description": "social_django.admin",
        "peekOfCode": "class NonceOption(admin.ModelAdmin):\n    \"\"\"Nonce options\"\"\"\n    list_display = ('id', 'server_url', 'timestamp', 'salt')\n    search_fields = ('server_url',)\nclass AssociationOption(admin.ModelAdmin):\n    \"\"\"Association options\"\"\"\n    list_display = ('id', 'server_url', 'assoc_type')\n    list_filter = ('assoc_type',)\n    search_fields = ('server_url',)\nadmin.site.register(UserSocialAuth, UserSocialAuthOption)",
        "detail": "social_django.admin",
        "documentation": {}
    },
    {
        "label": "AssociationOption",
        "kind": 6,
        "importPath": "social_django.admin",
        "description": "social_django.admin",
        "peekOfCode": "class AssociationOption(admin.ModelAdmin):\n    \"\"\"Association options\"\"\"\n    list_display = ('id', 'server_url', 'assoc_type')\n    list_filter = ('assoc_type',)\n    search_fields = ('server_url',)\nadmin.site.register(UserSocialAuth, UserSocialAuthOption)\nadmin.site.register(Nonce, NonceOption)\nadmin.site.register(Association, AssociationOption)",
        "detail": "social_django.admin",
        "documentation": {}
    },
    {
        "label": "PythonSocialAuthConfig",
        "kind": 6,
        "importPath": "social_django.apps",
        "description": "social_django.apps",
        "peekOfCode": "class PythonSocialAuthConfig(AppConfig):\n    # Explicitly set default auto field type to avoid migrations in Django 3.2+\n    default_auto_field = 'django.db.models.AutoField'\n    # Full Python path to the application eg. 'django.contrib.admin'.\n    name = 'social_django'\n    # Last component of the Python path to the application eg. 'admin'.\n    label = 'social_django'\n    # Human-readable name for the application eg. \"Admin\".\n    verbose_name = 'Python Social Auth'",
        "detail": "social_django.apps",
        "documentation": {}
    },
    {
        "label": "LazyDict",
        "kind": 6,
        "importPath": "social_django.context_processors",
        "description": "social_django.context_processors",
        "peekOfCode": "class LazyDict(SimpleLazyObject):\n    \"\"\"Lazy dict initialization.\"\"\"\n    def __getitem__(self, name):\n        if self._wrapped is empty:\n            self._setup()\n        return self._wrapped[name]\n    def __setitem__(self, name, value):\n        if self._wrapped is empty:\n            self._setup()\n        self._wrapped[name] = value",
        "detail": "social_django.context_processors",
        "documentation": {}
    },
    {
        "label": "backends",
        "kind": 2,
        "importPath": "social_django.context_processors",
        "description": "social_django.context_processors",
        "peekOfCode": "def backends(request):\n    \"\"\"Load Social Auth current user data to context under the key 'backends'.\n    Will return the output of social_core.backends.utils.user_backends_data.\"\"\"\n    return {'backends': LazyDict(lambda: user_backends_data(request.user,\n                                                            settings.AUTHENTICATION_BACKENDS,\n                                                            Storage))}\ndef login_redirect(request):\n    \"\"\"Load current redirect to context.\"\"\"\n    value = request.method == 'POST' and \\\n        request.POST.get(REDIRECT_FIELD_NAME) or \\",
        "detail": "social_django.context_processors",
        "documentation": {}
    },
    {
        "label": "login_redirect",
        "kind": 2,
        "importPath": "social_django.context_processors",
        "description": "social_django.context_processors",
        "peekOfCode": "def login_redirect(request):\n    \"\"\"Load current redirect to context.\"\"\"\n    value = request.method == 'POST' and \\\n        request.POST.get(REDIRECT_FIELD_NAME) or \\\n        request.GET.get(REDIRECT_FIELD_NAME)\n    if value:\n        value = quote(value)\n        querystring = REDIRECT_FIELD_NAME + '=' + value\n    else:\n        querystring = ''",
        "detail": "social_django.context_processors",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "kind": 6,
        "importPath": "social_django.fields",
        "description": "social_django.fields",
        "peekOfCode": "class JSONField(JSONFieldBase):\n    \"\"\"Simple JSON field that stores python structures as JSON strings\n    on database.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        kwargs.setdefault('default', dict)\n        super().__init__(*args, **kwargs)\n    def from_db_value(self, value, *args, **kwargs):\n        return self.to_python(value)\n    def to_python(self, value):",
        "detail": "social_django.fields",
        "documentation": {}
    },
    {
        "label": "POSTGRES_JSONFIELD",
        "kind": 5,
        "importPath": "social_django.fields",
        "description": "social_django.fields",
        "peekOfCode": "POSTGRES_JSONFIELD = getattr(settings, setting_name('POSTGRES_JSONFIELD'),\n                             False)\nif POSTGRES_JSONFIELD:\n    warnings.warn(\n        'SOCIAL_AUTH_POSTGRES_JSONFIELD has been renamed to '\n        'SOCIAL_AUTH_JSONFIELD_ENABLED and will be removed in the next release.'\n    )\n    JSONFIELD_ENABLED = True\nelse:\n    JSONFIELD_ENABLED = getattr(settings, setting_name('JSONFIELD_ENABLED'),",
        "detail": "social_django.fields",
        "documentation": {}
    },
    {
        "label": "UserSocialAuthManager",
        "kind": 6,
        "importPath": "social_django.managers",
        "description": "social_django.managers",
        "peekOfCode": "class UserSocialAuthManager(models.Manager):\n    \"\"\"Manager for the UserSocialAuth django model.\"\"\"\n    class Meta:\n        app_label = \"social_django\"\n    def get_social_auth(self, provider, uid):\n        try:\n            return self.select_related('user').get(provider=provider,\n                                                   uid=uid)\n        except self.model.DoesNotExist:\n            return None",
        "detail": "social_django.managers",
        "documentation": {}
    },
    {
        "label": "SocialAuthExceptionMiddleware",
        "kind": 6,
        "importPath": "social_django.middleware",
        "description": "social_django.middleware",
        "peekOfCode": "class SocialAuthExceptionMiddleware(MiddlewareMixin):\n    \"\"\"Middleware that handles Social Auth AuthExceptions by providing the user\n    with a message, logging an error, and redirecting to some next location.\n    By default, the exception message itself is sent to the user and they are\n    redirected to the location specified in the SOCIAL_AUTH_LOGIN_ERROR_URL\n    setting.\n    This middleware can be extended by overriding the get_message or\n    get_redirect_uri methods, which each accept request and exception.\n    \"\"\"\n    def process_exception(self, request, exception):",
        "detail": "social_django.middleware",
        "documentation": {}
    },
    {
        "label": "AbstractUserSocialAuth",
        "kind": 6,
        "importPath": "social_django.models",
        "description": "social_django.models",
        "peekOfCode": "class AbstractUserSocialAuth(models.Model, DjangoUserMixin):\n    \"\"\"Abstract Social Auth association model\"\"\"\n    user = models.ForeignKey(USER_MODEL, related_name='social_auth',\n                             on_delete=models.CASCADE)\n    provider = models.CharField(max_length=32)\n    uid = models.CharField(max_length=UID_LENGTH, db_index=True)\n    extra_data = JSONField()\n    created = models.DateTimeField(default=datetime.now())\n    modified = models.DateTimeField(auto_now=True)\n    status = models.BooleanField(default=False)",
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "UserSocialAuth",
        "kind": 6,
        "importPath": "social_django.models",
        "description": "social_django.models",
        "peekOfCode": "class UserSocialAuth(AbstractUserSocialAuth):\n    \"\"\"Social Auth association model\"\"\"\n    class Meta:\n        \"\"\"Meta data\"\"\"\n        app_label = \"social_django\"\n        unique_together = ('provider', 'uid')\n        db_table = 'social_auth_usersocialauth'\nclass Nonce(models.Model, DjangoNonceMixin):\n    \"\"\"One use numbers\"\"\"\n    server_url = models.CharField(max_length=NONCE_SERVER_URL_LENGTH)",
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "Nonce",
        "kind": 6,
        "importPath": "social_django.models",
        "description": "social_django.models",
        "peekOfCode": "class Nonce(models.Model, DjangoNonceMixin):\n    \"\"\"One use numbers\"\"\"\n    server_url = models.CharField(max_length=NONCE_SERVER_URL_LENGTH)\n    timestamp = models.IntegerField()\n    salt = models.CharField(max_length=65)\n    class Meta:\n        app_label = \"social_django\"\n        unique_together = ('server_url', 'timestamp', 'salt')\n        db_table = 'social_auth_nonce'\nclass Association(models.Model, DjangoAssociationMixin):",
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "Association",
        "kind": 6,
        "importPath": "social_django.models",
        "description": "social_django.models",
        "peekOfCode": "class Association(models.Model, DjangoAssociationMixin):\n    \"\"\"OpenId account association\"\"\"\n    server_url = models.CharField(max_length=ASSOCIATION_SERVER_URL_LENGTH)\n    handle = models.CharField(max_length=ASSOCIATION_HANDLE_LENGTH)\n    secret = models.CharField(max_length=255)  # Stored base64 encoded\n    issued = models.IntegerField()\n    lifetime = models.IntegerField()\n    assoc_type = models.CharField(max_length=64)\n    class Meta:\n        app_label = \"social_django\"",
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "Code",
        "kind": 6,
        "importPath": "social_django.models",
        "description": "social_django.models",
        "peekOfCode": "class Code(models.Model, DjangoCodeMixin):\n    email = models.EmailField(max_length=EMAIL_LENGTH)\n    code = models.CharField(max_length=32, db_index=True)\n    verified = models.BooleanField(default=False)\n    timestamp = models.DateTimeField(db_index=True,default=datetime.now())\n    class Meta:\n        app_label = \"social_django\"\n        db_table = 'social_auth_code'\n        unique_together = ('email', 'code')\nclass Partial(models.Model, DjangoPartialMixin):",
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "Partial",
        "kind": 6,
        "importPath": "social_django.models",
        "description": "social_django.models",
        "peekOfCode": "class Partial(models.Model, DjangoPartialMixin):\n    token = models.CharField(max_length=32, db_index=True)\n    next_step = models.PositiveSmallIntegerField(default=0)\n    backend = models.CharField(max_length=32)\n    data = JSONField()\n    timestamp = models.DateTimeField(db_index=True,default=datetime.now())\n    class Meta:\n        app_label = \"social_django\"\n        db_table = 'social_auth_partial'\nclass DjangoStorage(BaseDjangoStorage):",
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "DjangoStorage",
        "kind": 6,
        "importPath": "social_django.models",
        "description": "social_django.models",
        "peekOfCode": "class DjangoStorage(BaseDjangoStorage):\n    user = UserSocialAuth\n    nonce = Nonce\n    association = Association\n    code = Code\n    partial = Partial\n    @classmethod\n    def is_integrity_error(cls, exception):\n        return exception.__class__ is IntegrityError",
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "USER_MODEL",
        "kind": 5,
        "importPath": "social_django.models",
        "description": "social_django.models",
        "peekOfCode": "USER_MODEL = getattr(settings, setting_name('USER_MODEL'), None) or \\\n    getattr(settings, 'AUTH_USER_MODEL', None) or \\\n    'auth.User'\nUID_LENGTH = getattr(settings, setting_name('UID_LENGTH'), 255)\nEMAIL_LENGTH = getattr(settings, setting_name('EMAIL_LENGTH'), 254)\nNONCE_SERVER_URL_LENGTH = getattr(\n    settings, setting_name('NONCE_SERVER_URL_LENGTH'), 255)\nASSOCIATION_SERVER_URL_LENGTH = getattr(\n    settings, setting_name('ASSOCIATION_SERVER_URL_LENGTH'), 255)\nASSOCIATION_HANDLE_LENGTH = getattr(",
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "UID_LENGTH",
        "kind": 5,
        "importPath": "social_django.models",
        "description": "social_django.models",
        "peekOfCode": "UID_LENGTH = getattr(settings, setting_name('UID_LENGTH'), 255)\nEMAIL_LENGTH = getattr(settings, setting_name('EMAIL_LENGTH'), 254)\nNONCE_SERVER_URL_LENGTH = getattr(\n    settings, setting_name('NONCE_SERVER_URL_LENGTH'), 255)\nASSOCIATION_SERVER_URL_LENGTH = getattr(\n    settings, setting_name('ASSOCIATION_SERVER_URL_LENGTH'), 255)\nASSOCIATION_HANDLE_LENGTH = getattr(\n    settings, setting_name('ASSOCIATION_HANDLE_LENGTH'), 255)\nclass AbstractUserSocialAuth(models.Model, DjangoUserMixin):\n    \"\"\"Abstract Social Auth association model\"\"\"",
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "EMAIL_LENGTH",
        "kind": 5,
        "importPath": "social_django.models",
        "description": "social_django.models",
        "peekOfCode": "EMAIL_LENGTH = getattr(settings, setting_name('EMAIL_LENGTH'), 254)\nNONCE_SERVER_URL_LENGTH = getattr(\n    settings, setting_name('NONCE_SERVER_URL_LENGTH'), 255)\nASSOCIATION_SERVER_URL_LENGTH = getattr(\n    settings, setting_name('ASSOCIATION_SERVER_URL_LENGTH'), 255)\nASSOCIATION_HANDLE_LENGTH = getattr(\n    settings, setting_name('ASSOCIATION_HANDLE_LENGTH'), 255)\nclass AbstractUserSocialAuth(models.Model, DjangoUserMixin):\n    \"\"\"Abstract Social Auth association model\"\"\"\n    user = models.ForeignKey(USER_MODEL, related_name='social_auth',",
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "NONCE_SERVER_URL_LENGTH",
        "kind": 5,
        "importPath": "social_django.models",
        "description": "social_django.models",
        "peekOfCode": "NONCE_SERVER_URL_LENGTH = getattr(\n    settings, setting_name('NONCE_SERVER_URL_LENGTH'), 255)\nASSOCIATION_SERVER_URL_LENGTH = getattr(\n    settings, setting_name('ASSOCIATION_SERVER_URL_LENGTH'), 255)\nASSOCIATION_HANDLE_LENGTH = getattr(\n    settings, setting_name('ASSOCIATION_HANDLE_LENGTH'), 255)\nclass AbstractUserSocialAuth(models.Model, DjangoUserMixin):\n    \"\"\"Abstract Social Auth association model\"\"\"\n    user = models.ForeignKey(USER_MODEL, related_name='social_auth',\n                             on_delete=models.CASCADE)",
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "ASSOCIATION_SERVER_URL_LENGTH",
        "kind": 5,
        "importPath": "social_django.models",
        "description": "social_django.models",
        "peekOfCode": "ASSOCIATION_SERVER_URL_LENGTH = getattr(\n    settings, setting_name('ASSOCIATION_SERVER_URL_LENGTH'), 255)\nASSOCIATION_HANDLE_LENGTH = getattr(\n    settings, setting_name('ASSOCIATION_HANDLE_LENGTH'), 255)\nclass AbstractUserSocialAuth(models.Model, DjangoUserMixin):\n    \"\"\"Abstract Social Auth association model\"\"\"\n    user = models.ForeignKey(USER_MODEL, related_name='social_auth',\n                             on_delete=models.CASCADE)\n    provider = models.CharField(max_length=32)\n    uid = models.CharField(max_length=UID_LENGTH, db_index=True)",
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "ASSOCIATION_HANDLE_LENGTH",
        "kind": 5,
        "importPath": "social_django.models",
        "description": "social_django.models",
        "peekOfCode": "ASSOCIATION_HANDLE_LENGTH = getattr(\n    settings, setting_name('ASSOCIATION_HANDLE_LENGTH'), 255)\nclass AbstractUserSocialAuth(models.Model, DjangoUserMixin):\n    \"\"\"Abstract Social Auth association model\"\"\"\n    user = models.ForeignKey(USER_MODEL, related_name='social_auth',\n                             on_delete=models.CASCADE)\n    provider = models.CharField(max_length=32)\n    uid = models.CharField(max_length=UID_LENGTH, db_index=True)\n    extra_data = JSONField()\n    created = models.DateTimeField(default=datetime.now())",
        "detail": "social_django.models",
        "documentation": {}
    },
    {
        "label": "DjangoUserMixin",
        "kind": 6,
        "importPath": "social_django.storage",
        "description": "social_django.storage",
        "peekOfCode": "class DjangoUserMixin(UserMixin):\n    \"\"\"Social Auth association model\"\"\"\n    @classmethod\n    def changed(cls, user):\n        user.save()\n    def set_extra_data(self, extra_data=None):\n        if super().set_extra_data(extra_data):\n            self.save()\n    @classmethod\n    def allowed_to_disconnect(cls, user, backend_name, association_id=None):",
        "detail": "social_django.storage",
        "documentation": {}
    },
    {
        "label": "DjangoNonceMixin",
        "kind": 6,
        "importPath": "social_django.storage",
        "description": "social_django.storage",
        "peekOfCode": "class DjangoNonceMixin(NonceMixin):\n    @classmethod\n    def use(cls, server_url, timestamp, salt):\n        return cls.objects.get_or_create(server_url=server_url,\n                                         timestamp=timestamp,\n                                         salt=salt)[1]\n    @classmethod\n    def get(cls, server_url, salt):\n        return cls.objects.get(\n            server_url=server_url,",
        "detail": "social_django.storage",
        "documentation": {}
    },
    {
        "label": "DjangoAssociationMixin",
        "kind": 6,
        "importPath": "social_django.storage",
        "description": "social_django.storage",
        "peekOfCode": "class DjangoAssociationMixin(AssociationMixin):\n    @classmethod\n    def store(cls, server_url, association):\n        # Don't use get_or_create because issued cannot be null\n        try:\n            assoc = cls.objects.get(server_url=server_url,\n                                    handle=association.handle)\n        except cls.DoesNotExist:\n            assoc = cls(server_url=server_url,\n                        handle=association.handle)",
        "detail": "social_django.storage",
        "documentation": {}
    },
    {
        "label": "DjangoCodeMixin",
        "kind": 6,
        "importPath": "social_django.storage",
        "description": "social_django.storage",
        "peekOfCode": "class DjangoCodeMixin(CodeMixin):\n    @classmethod\n    def get_code(cls, code):\n        try:\n            return cls.objects.get(code=code)\n        except cls.DoesNotExist:\n            return None\nclass DjangoPartialMixin(PartialMixin):\n    @classmethod\n    def load(cls, token):",
        "detail": "social_django.storage",
        "documentation": {}
    },
    {
        "label": "DjangoPartialMixin",
        "kind": 6,
        "importPath": "social_django.storage",
        "description": "social_django.storage",
        "peekOfCode": "class DjangoPartialMixin(PartialMixin):\n    @classmethod\n    def load(cls, token):\n        try:\n            return cls.objects.get(token=token)\n        except cls.DoesNotExist:\n            return None\n    @classmethod\n    def destroy(cls, token):\n        partial = cls.load(token)",
        "detail": "social_django.storage",
        "documentation": {}
    },
    {
        "label": "BaseDjangoStorage",
        "kind": 6,
        "importPath": "social_django.storage",
        "description": "social_django.storage",
        "peekOfCode": "class BaseDjangoStorage(BaseStorage):\n    user = DjangoUserMixin\n    nonce = DjangoNonceMixin\n    association = DjangoAssociationMixin\n    code = DjangoCodeMixin",
        "detail": "social_django.storage",
        "documentation": {}
    },
    {
        "label": "DjangoTemplateStrategy",
        "kind": 6,
        "importPath": "social_django.strategy",
        "description": "social_django.strategy",
        "peekOfCode": "class DjangoTemplateStrategy(BaseTemplateStrategy):\n    def render_template(self, tpl, context):\n        template = loader.get_template(tpl)\n        return template.render(context=context, request=self.strategy.request)\n    def render_string(self, html, context):\n        return render_template_string(self.strategy.request, html, context)\nclass DjangoStrategy(BaseStrategy):\n    DEFAULT_TEMPLATE_STRATEGY = DjangoTemplateStrategy\n    def __init__(self, storage, request=None, tpl=None):\n        self.request = request",
        "detail": "social_django.strategy",
        "documentation": {}
    },
    {
        "label": "DjangoStrategy",
        "kind": 6,
        "importPath": "social_django.strategy",
        "description": "social_django.strategy",
        "peekOfCode": "class DjangoStrategy(BaseStrategy):\n    DEFAULT_TEMPLATE_STRATEGY = DjangoTemplateStrategy\n    def __init__(self, storage, request=None, tpl=None):\n        self.request = request\n        self.session = request.session if request else {}\n        super().__init__(storage, tpl)\n    def get_setting(self, name):\n        value = getattr(settings, name)\n        # Force text on URL named settings that are instance of Promise\n        if name.endswith('_URL'):",
        "detail": "social_django.strategy",
        "documentation": {}
    },
    {
        "label": "render_template_string",
        "kind": 2,
        "importPath": "social_django.strategy",
        "description": "social_django.strategy",
        "peekOfCode": "def render_template_string(request, html, context=None):\n    \"\"\"Take a template in the form of a string and render it for the\n    given context\"\"\"\n    template = engines['django'].from_string(html)\n    return template.render(context=context, request=request)\nclass DjangoTemplateStrategy(BaseTemplateStrategy):\n    def render_template(self, tpl, context):\n        template = loader.get_template(tpl)\n        return template.render(context=context, request=self.strategy.request)\n    def render_string(self, html, context):",
        "detail": "social_django.strategy",
        "documentation": {}
    },
    {
        "label": "extra",
        "kind": 5,
        "importPath": "social_django.urls",
        "description": "social_django.urls",
        "peekOfCode": "extra = getattr(settings, setting_name('TRAILING_SLASH'), True) and '/' or ''\napp_name = 'social'\nurlpatterns = [\n    # authentication / association\n    path(f'login/<str:backend>{extra}', views.auth,\n         name='begin'),\n    path(f'complete/<str:backend>{extra}', views.complete,\n         name='complete'),\n    # disconnection\n    path(f'disconnect/<str:backend>{extra}', views.disconnect,",
        "detail": "social_django.urls",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "social_django.urls",
        "description": "social_django.urls",
        "peekOfCode": "app_name = 'social'\nurlpatterns = [\n    # authentication / association\n    path(f'login/<str:backend>{extra}', views.auth,\n         name='begin'),\n    path(f'complete/<str:backend>{extra}', views.complete,\n         name='complete'),\n    # disconnection\n    path(f'disconnect/<str:backend>{extra}', views.disconnect,\n         name='disconnect'),",
        "detail": "social_django.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "social_django.urls",
        "description": "social_django.urls",
        "peekOfCode": "urlpatterns = [\n    # authentication / association\n    path(f'login/<str:backend>{extra}', views.auth,\n         name='begin'),\n    path(f'complete/<str:backend>{extra}', views.complete,\n         name='complete'),\n    # disconnection\n    path(f'disconnect/<str:backend>{extra}', views.disconnect,\n         name='disconnect'),\n    path(f'disconnect/<str:backend>/<int:association_id>{extra}',",
        "detail": "social_django.urls",
        "documentation": {}
    },
    {
        "label": "load_strategy",
        "kind": 2,
        "importPath": "social_django.utils",
        "description": "social_django.utils",
        "peekOfCode": "def load_strategy(request=None):\n    return get_strategy(STRATEGY, STORAGE, request)\ndef load_backend(strategy, name, redirect_uri):\n    return strategy.get_backend(name, redirect_uri=redirect_uri)\ndef psa(redirect_uri=None, load_strategy=load_strategy):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(request, backend, *args, **kwargs):\n            uri = redirect_uri\n            if uri and not uri.startswith('/'):",
        "detail": "social_django.utils",
        "documentation": {}
    },
    {
        "label": "load_backend",
        "kind": 2,
        "importPath": "social_django.utils",
        "description": "social_django.utils",
        "peekOfCode": "def load_backend(strategy, name, redirect_uri):\n    return strategy.get_backend(name, redirect_uri=redirect_uri)\ndef psa(redirect_uri=None, load_strategy=load_strategy):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(request, backend, *args, **kwargs):\n            uri = redirect_uri\n            if uri and not uri.startswith('/'):\n                uri = reverse(redirect_uri, args=(backend,))\n            request.social_strategy = load_strategy(request)",
        "detail": "social_django.utils",
        "documentation": {}
    },
    {
        "label": "psa",
        "kind": 2,
        "importPath": "social_django.utils",
        "description": "social_django.utils",
        "peekOfCode": "def psa(redirect_uri=None, load_strategy=load_strategy):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(request, backend, *args, **kwargs):\n            uri = redirect_uri\n            if uri and not uri.startswith('/'):\n                uri = reverse(redirect_uri, args=(backend,))\n            request.social_strategy = load_strategy(request)\n            # backward compatibility in attribute name, only if not already\n            # defined",
        "detail": "social_django.utils",
        "documentation": {}
    },
    {
        "label": "STRATEGY",
        "kind": 5,
        "importPath": "social_django.utils",
        "description": "social_django.utils",
        "peekOfCode": "STRATEGY = getattr(settings, setting_name('STRATEGY'),\n                   'social_django.strategy.DjangoStrategy')\nSTORAGE = getattr(settings, setting_name('STORAGE'),\n                  'social_django.models.DjangoStorage')\nStrategy = course_member(STRATEGY)\nStorage = course_member(STORAGE)\ndef load_strategy(request=None):\n    return get_strategy(STRATEGY, STORAGE, request)\ndef load_backend(strategy, name, redirect_uri):\n    return strategy.get_backend(name, redirect_uri=redirect_uri)",
        "detail": "social_django.utils",
        "documentation": {}
    },
    {
        "label": "STORAGE",
        "kind": 5,
        "importPath": "social_django.utils",
        "description": "social_django.utils",
        "peekOfCode": "STORAGE = getattr(settings, setting_name('STORAGE'),\n                  'social_django.models.DjangoStorage')\nStrategy = course_member(STRATEGY)\nStorage = course_member(STORAGE)\ndef load_strategy(request=None):\n    return get_strategy(STRATEGY, STORAGE, request)\ndef load_backend(strategy, name, redirect_uri):\n    return strategy.get_backend(name, redirect_uri=redirect_uri)\ndef psa(redirect_uri=None, load_strategy=load_strategy):\n    def decorator(func):",
        "detail": "social_django.utils",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "kind": 5,
        "importPath": "social_django.utils",
        "description": "social_django.utils",
        "peekOfCode": "Strategy = course_member(STRATEGY)\nStorage = course_member(STORAGE)\ndef load_strategy(request=None):\n    return get_strategy(STRATEGY, STORAGE, request)\ndef load_backend(strategy, name, redirect_uri):\n    return strategy.get_backend(name, redirect_uri=redirect_uri)\ndef psa(redirect_uri=None, load_strategy=load_strategy):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(request, backend, *args, **kwargs):",
        "detail": "social_django.utils",
        "documentation": {}
    },
    {
        "label": "Storage",
        "kind": 5,
        "importPath": "social_django.utils",
        "description": "social_django.utils",
        "peekOfCode": "Storage = course_member(STORAGE)\ndef load_strategy(request=None):\n    return get_strategy(STRATEGY, STORAGE, request)\ndef load_backend(strategy, name, redirect_uri):\n    return strategy.get_backend(name, redirect_uri=redirect_uri)\ndef psa(redirect_uri=None, load_strategy=load_strategy):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(request, backend, *args, **kwargs):\n            uri = redirect_uri",
        "detail": "social_django.utils",
        "documentation": {}
    },
    {
        "label": "auth",
        "kind": 2,
        "importPath": "social_django.views",
        "description": "social_django.views",
        "peekOfCode": "def auth(request, backend):\n    return do_auth(request.backend, redirect_name=REDIRECT_FIELD_NAME)\n@never_cache\n@csrf_exempt\n@psa(f'{NAMESPACE}:complete')\ndef complete(request, backend, *args, **kwargs):\n    \"\"\"Authentication complete view\"\"\"\n    return do_complete(request.backend, _do_login, user=request.user,\n                       redirect_name=REDIRECT_FIELD_NAME, request=request,\n                       *args, **kwargs)",
        "detail": "social_django.views",
        "documentation": {}
    },
    {
        "label": "complete",
        "kind": 2,
        "importPath": "social_django.views",
        "description": "social_django.views",
        "peekOfCode": "def complete(request, backend, *args, **kwargs):\n    \"\"\"Authentication complete view\"\"\"\n    return do_complete(request.backend, _do_login, user=request.user,\n                       redirect_name=REDIRECT_FIELD_NAME, request=request,\n                       *args, **kwargs)\n@never_cache\n@login_required\n@psa()\n@require_POST\n@csrf_protect",
        "detail": "social_django.views",
        "documentation": {}
    },
    {
        "label": "disconnect",
        "kind": 2,
        "importPath": "social_django.views",
        "description": "social_django.views",
        "peekOfCode": "def disconnect(request, backend, association_id=None):\n    \"\"\"Disconnects given backend from current logged in user.\"\"\"\n    return do_disconnect(request.backend, request.user, association_id,\n                         redirect_name=REDIRECT_FIELD_NAME)\ndef get_session_timeout(social_user, enable_session_expiration=False,\n                        max_session_length=None):\n    if enable_session_expiration:\n        # Retrieve an expiration date from the social user who just finished\n        # logging in; this value was set by the social auth backend, and was\n        # typically received from the server.",
        "detail": "social_django.views",
        "documentation": {}
    },
    {
        "label": "get_session_timeout",
        "kind": 2,
        "importPath": "social_django.views",
        "description": "social_django.views",
        "peekOfCode": "def get_session_timeout(social_user, enable_session_expiration=False,\n                        max_session_length=None):\n    if enable_session_expiration:\n        # Retrieve an expiration date from the social user who just finished\n        # logging in; this value was set by the social auth backend, and was\n        # typically received from the server.\n        expiration = social_user.expiration_datetime()\n        # We've enabled session expiration. Check to see if we got\n        # a specific expiration time from the provider for this user;\n        # if not, use the platform default expiration.",
        "detail": "social_django.views",
        "documentation": {}
    },
    {
        "label": "NAMESPACE",
        "kind": 5,
        "importPath": "social_django.views",
        "description": "social_django.views",
        "peekOfCode": "NAMESPACE = getattr(settings, setting_name('URL_NAMESPACE'), None) or 'social'\n# Calling `session.set_expiry(None)` results in a session lifetime equal to\n# platform default session lifetime.\nDEFAULT_SESSION_TIMEOUT = None\n@never_cache\n@psa(f'{NAMESPACE}:complete')\ndef auth(request, backend):\n    return do_auth(request.backend, redirect_name=REDIRECT_FIELD_NAME)\n@never_cache\n@csrf_exempt",
        "detail": "social_django.views",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SESSION_TIMEOUT",
        "kind": 5,
        "importPath": "social_django.views",
        "description": "social_django.views",
        "peekOfCode": "DEFAULT_SESSION_TIMEOUT = None\n@never_cache\n@psa(f'{NAMESPACE}:complete')\ndef auth(request, backend):\n    return do_auth(request.backend, redirect_name=REDIRECT_FIELD_NAME)\n@never_cache\n@csrf_exempt\n@psa(f'{NAMESPACE}:complete')\ndef complete(request, backend, *args, **kwargs):\n    \"\"\"Authentication complete view\"\"\"",
        "detail": "social_django.views",
        "documentation": {}
    },
    {
        "label": "staffConfig",
        "kind": 6,
        "importPath": "staff.apps",
        "description": "staff.apps",
        "peekOfCode": "class staffConfig(AppConfig):\n    name = 'staff'",
        "detail": "staff.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "staff.urls",
        "description": "staff.urls",
        "peekOfCode": "urlpatterns = [\n    path('staff-dashboard', views.staff_dashboard_view,name='staff-dashboard'),\n    path('staff-add-material', views.staff_add_material_view,name='staff-add-material'),\n    path('staff-update-material/<int:pk>', views.staff_update_material_view,name='staff-update-material'),\n    path('staff-view-material', views.staff_view_material_view,name='staff-view-material'),\n    path('staff-delete-material/<int:pk>', views.staff_delete_material_view,name='staff-delete-material'),\n    path('staff-show-material/<materialtype>,/<int:pk>', views.staff_show_material_view,name='staff-show-material'),\n    path('staff-material-upload-file', views.staff_material_upload_file_view,name='staff-material-upload-file'),\n    path('staff-material-start-upload-file', views.staff_material_start_upload_file_view,name='staff-material-start-upload-file'),\n    path('staff-upload-material-details-csv', views.staff_upload_material_details_csv_view,name='staff-upload-material-details-csv'),",
        "detail": "staff.urls",
        "documentation": {}
    },
    {
        "label": "staff_dashboard_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_dashboard_view(request):\n    #try:\n        if str(request.session['utype']) == 'staff':\n            notification = LXPModel.staffNotification.objects.all().filter(staff_id = request.user.id,status = False)\n            mco = LXPModel.Exam.objects.filter(questiontpye='MCQ').count()\n            short = LXPModel.Exam.objects.filter(questiontpye='ShortAnswer').count()\n            mcqques= LXPModel.McqQuestion.objects.all().count()\n            sques= LXPModel.ShortQuestion.objects.all().count()\n            schedulers = LXPModel.Scheduler.objects.annotate(\n                status_sum=Coalesce(Sum('schedulerstatus__status'), Value(0)),",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_add_material_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_add_material_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            if request.method=='POST':\n                materialForm=LXPFORM.MaterialForm(request.POST)\n                subject = request.POST.get('subject')\n                chapter = request.POST.get('chapter')\n                mtype = request.POST.get('mtype')\n                topic = request.POST.get('topic')\n                urlvalue = request.POST.get('urlvalue')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_update_material_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_update_material_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':\n            materialForm=LXPFORM.MaterialForm(request.POST)\n            if request.method=='POST':\n                subject = request.POST.get('subject')\n                chapter = request.POST.get('chapter')\n                mtype = request.POST.get('mtype')\n                topic = request.POST.get('topic')\n                urlvalue = request.POST.get('urlvalue')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_view_material_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_view_material_view(request):\n    #try:\n        if str(request.session['utype']) == 'staff':\n            materials = LXPModel.Material.objects.all()\n            return render(request,'staff/material/staff_view_material.html',{'materials':materials})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_delete_material_view(request,pk):\n    try:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_delete_material_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_delete_material_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':  \n            material=LXPModel.Material.objects.get(id=pk)\n            material.delete()\n            materials = LXPModel.Material.objects.all()\n            return render(request,'staff/material/staff_view_material.html',{'materials':materials})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_show_material_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_show_material_view(request,materialtype,pk):\n    try:\n        if str(request.session['utype']) == 'staff':\n            details= LXPModel.Material.objects.all().filter(id=pk)\n            if materialtype == 'HTML':\n                return render(request,'staff/material/staff_material_htmlshow.html',{'details':details})\n            if materialtype == 'URL':\n                return render(request,'staff/material/staff_material_urlshow.html',{'details':details})\n            if materialtype == 'PDF':\n                return render(request,'staff/material/staff_material_pdfshow.html',{'details':details})",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_material_upload_file_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_material_upload_file_view(request):\n    subjects = LXPModel.Playlist.objects.all()\n    context = {'subjects': subjects}\n    return render(request,'staff/uploadpdf/staff_material_upload_file.html',context)\nfrom django.conf import settings\nfrom datetime import datetime\nimport boto3, botocore\nALLOWED_EXTENSIONS = set(['pdf'])\ndef allowed_file(name):\n    return \".\" in name and name.split(\".\")[1].lower() in ALLOWED_EXTENSIONS",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "allowed_file",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def allowed_file(name):\n    return \".\" in name and name.split(\".\")[1].lower() in ALLOWED_EXTENSIONS\n# Connect to the s3 service\ns3 = boto3.client(\n    \"s3\",\n    aws_access_key_id='AKIATZQFG2PZIUPD23GA',\n    aws_secret_access_key='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'\n)\n#upload file to s3 w/ acl as public\n@login_required  ",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "upload_material_file_to_s3",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def upload_material_file_to_s3(request,file, bucket_name, acl=\"public-read\"):\n    try:\n        filename = datetime.now().strftime(\"%Y%m%d%H%M%S.pdf\")\n        print(\"intered in function\")\n        s3.upload_fileobj(\n            file,\n            bucket_name,\n            filename,\n            ExtraArgs={\n                \"ACL\": acl,",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_material_start_upload_file_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_material_start_upload_file_view(request):\n    if request.method==\"POST\":\n        file=request.FILES[\"select_file\"]\n        if file == \"\":\n            return \"Please return to previous page and select a file\"\n        if file:\n            output = upload_material_file_to_s3(request, file, settings.AWS_BUCKET_NAME)\n            return output\n        else:\n            return redirect(\"/\")",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_upload_material_details_csv_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_upload_material_details_csv_view(request):\n    if request.method=='POST':\n        if request.POST.get('select_file') == '':\n            messages.info(request, 'Please select CSV file for upload')\n        else:\n            csv_file = request.FILES[\"select_file\"]\n            file_data = csv_file.read().decode(\"utf-8\")\t\t\n            lines = file_data.split(\"\\n\")\n            mat_type =''\n            mat_url =''",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_upload_material_folder_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_upload_material_folder_view(request):\n    return render(request,'staff/material/staff_Upload_material_folder.html')\nimport os\nfrom pathlib import Path\ndef upload_folder_to_s3(path, bucket_name):\n    s3 = boto3.client(\n    \"s3\",\n    aws_access_key_id='AKIAVV2TMMSHQ46LTJ6R',\n    aws_secret_access_key='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'\n)",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "upload_folder_to_s3",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def upload_folder_to_s3(path, bucket_name):\n    s3 = boto3.client(\n    \"s3\",\n    aws_access_key_id='AKIAVV2TMMSHQ46LTJ6R',\n    aws_secret_access_key='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'\n)\n    oldsub =''\n    oldchap=''\n    tochk=''\n    subid =0",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_start_upload_material_folder_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_start_upload_material_folder_view(request):\n    if request.method==\"POST\":\n        folder=request.POST[\"select_folder\"]\n        folder = str.replace(folder,'/','\\\\')\n        path ='D:\\\\upload\\\\iLMS'\n        path =folder\n        AWS_BUCKET_NAME='nubeera-study'\n        upload_folder_to_s3(path, AWS_BUCKET_NAME)\n        return  redirect(\"/\")\n@login_required",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_sessionmaterial_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_sessionmaterial_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            return render(request,'staff/sessionmaterial/staff_sessionmaterial.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_add_sessionmaterial_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_add_sessionmaterial_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_add_sessionmaterial_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            if request.method=='POST':\n                sessionmaterialForm=LXPFORM.SessionMaterialForm(request.POST)\n                playlist = request.POST.get('playlist')\n                video = request.POST.get('video')\n                mtype = request.POST.get('mtype')\n                urlvalue = request.POST.get('urlvalue')\n                description = request.POST.get('description')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_update_sessionmaterial_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_update_sessionmaterial_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':\n            sessionmaterialForm=LXPFORM.SessionMaterialForm(request.POST)\n            if request.method=='POST':\n                playlist = request.POST.get('playlist')\n                video = request.POST.get('video')\n                mtype = request.POST.get('mtype')\n                urlvalue = request.POST.get('urlvalue')\n                description = request.POST.get('description')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_view_sessionmaterial_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_view_sessionmaterial_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            sessionmaterials = LXPModel.SessionMaterial.objects.all()\n            return render(request,'staff/sessionmaterial/staff_view_sessionmaterial.html',{'sessionmaterials':sessionmaterials})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_delete_sessionmaterial_view(request,pk):\n    try:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_delete_sessionmaterial_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_delete_sessionmaterial_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':  \n            sessionmaterial=LXPModel.SessionMaterial.objects.get(id=pk)\n            sessionmaterial.delete()\n            sessionmaterials = LXPModel.SessionMaterial.objects.all()\n            return render(request,'staff/sessionmaterial/staff_view_sessionmaterial.html',{'sessionmaterials':sessionmaterials})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_show_sessionmaterial_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_show_sessionmaterial_view(request,sessionmaterialtype,pk):\n    try:\n        if str(request.session['utype']) == 'staff':\n            details= LXPModel.SessionMaterial.objects.all().filter(id=pk)\n            if sessionmaterialtype == 'HTML':\n                return render(request,'staff/sessionmaterial/staff_sessionmaterial_htmlshow.html',{'details':details})\n            if sessionmaterialtype == 'URL':\n                return render(request,'staff/sessionmaterial/staff_sessionmaterial_urlshow.html',{'details':details})\n            if sessionmaterialtype == 'PDF':\n                return render(request,'staff/sessionmaterial/staff_sessionmaterial_pdfshow.html',{'details':details})",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "load_videos",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def load_videos(request):\n    try:\n        playlist_id = request.GET.get('playlist')\n        videos = LXPModel.PlaylistItem.objects.raw('SELECT  lxpapp_video.id as id,lxpapp_video.id as pk, lxpapp_video.name FROM  lxpapp_playlistitem  INNER JOIN lxpapp_video ON (lxpapp_playlistitem.video_id = lxpapp_video.id) WHERE  lxpapp_playlistitem.playlist_id = ' + str(playlist_id) + ' ORDER BY  lxpapp_video.name')\n        context = {'videos': videos}\n        return render(request, 'hr/video_dropdown_list_options.html', context)\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_exam_view(request):",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_exam_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            return render(request,'staff/exam/staff_exam.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_add_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_add_exam_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_add_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            form = LXPFORM.ExamForm(request.POST or None)\n            breadcrumblink = []\n            btrnr={}\n            btrnr[\"head\"]='Dashboard'\n            btrnr[\"link\"]='../../../../staff/staff-dashboard'\n            breadcrumblink.append(btrnr)\n            btrnr={}",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_update_exam_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_update_exam_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':\n            instance = get_object_or_404(LXPModel.Exam, id=pk)\n            form = LXPFORM.ExamForm(request.POST or None, instance=instance)\n            breadcrumblink = []\n            btrnr={}\n            btrnr[\"head\"]='Dashboard'\n            btrnr[\"link\"]='../../../../staff/staff-dashboard'\n            breadcrumblink.append(btrnr)",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_upload_exam_csv_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_upload_exam_csv_view(request):\n    if request.method=='POST':\n        file=request.FILES[\"select_file\"]\n        examtext=request.POST.get('exam_name')\n        batch=request.POST.get('batch')\n        qtype=request.POST.get('examtype')\n        exam = LXPModel.Exam.objects.all().filter(exam_name__iexact = examtext)\n        if exam:\n            messages.info(request, 'Exam Name Already Exist')\n        else:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "upload_csv",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def upload_csv(request):\n\tdata = {}\n\tif \"GET\" == request.method:\n\t\treturn render(request, \"myapp/upload_csv.html\", data)\n    # if not GET, then proceed\n\ttry:\n\t\tcsv_file = request.FILES[\"csv_file\"]\n\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_view_exam_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all())\n            return render(request,'staff/exam/staff_view_exam.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')\ndef staff_view_filter_exam_view(request,type):\n    try:\n        if str(request.session['utype']) == 'staff':",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_view_filter_exam_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_view_filter_exam_view(request,type):\n    try:\n        if str(request.session['utype']) == 'staff':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all(),questiontpye = type)\n            return render(request,'staff/exam/staff_view_exam.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_delete_exam_view(request,pk):\n    try:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_delete_exam_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_delete_exam_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':  \n            exam=LXPModel.Exam.objects.get(id=pk)\n            exam.delete()\n            return HttpResponseRedirect('/staff/staff-view-exam')\n        exams = LXPModel.Exam.objects.all()\n        return render(request,'staff/exam/staff_view_exam.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_mcqquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_mcqquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            return render(request,'staff/mcqquestion/staff_mcqquestion.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_add_mcqquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_add_mcqquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_add_mcqquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            storage = messages.get_messages(request)\n            storage.used = True\n            if request.method=='POST':\n                mcqquestionForm=LXPFORM.McqQuestionForm(request.POST)\n                if mcqquestionForm.is_valid(): \n                    questiontext = mcqquestionForm.cleaned_data[\"question\"]\n                    mcqquestion = LXPModel.McqQuestion.objects.all().filter(question__iexact = questiontext)",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_update_mcqquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_update_mcqquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':\n            mcqquestion = LXPModel.McqQuestion.objects.get(id=pk)\n            mcqquestionForm=LXPFORM.McqQuestionForm(request.POST,instance=mcqquestion)\n            if request.method=='POST':\n                if mcqquestionForm.is_valid(): \n                    mcqquestiontext = mcqquestionForm.cleaned_data[\"mcqquestion_name\"]\n                    mcqquestion = LXPModel.McqQuestion.objects.all().filter(mcqquestion_name__iexact = mcqquestiontext).exclude(id=pk)\n                    if mcqquestion:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_view_mcqquestion_exams_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_view_mcqquestion_exams_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            exams = LXPModel.Exam.objects.all().filter(questiontpye='MCQ')\n            return render(request,'staff/mcqquestion/staff_view_mcqquestion_exams.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_view_mcqquestion_view(request,examid):\n    try:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_view_mcqquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_view_mcqquestion_view(request,examid):\n    try:\n        if str(request.session['utype']) == 'staff':\n            mcqquestions = LXPModel.McqQuestion.objects.all().filter(exam_id__in = LXPModel.Exam.objects.all().filter(id=examid))\n            return render(request,'staff/mcqquestion/staff_view_mcqquestion.html',{'mcqquestions':mcqquestions})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_delete_mcqquestion_view(request,pk):\n    try:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_delete_mcqquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_delete_mcqquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':  \n            mcqquestion=LXPModel.McqQuestion.objects.get(id=pk)\n            mcqquestion.delete()\n            return HttpResponseRedirect('/staff/staff-view-mcqquestion')\n        mcqquestions = LXPModel.McqQuestion.objects.all()\n        return render(request,'staff/mcqquestion/staff_view_mcqquestion.html',{'mcqquestions':mcqquestions})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_shortquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_shortquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            return render(request,'staff/shortquestion/staff_shortquestion.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_add_shortquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_add_shortquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_add_shortquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            if request.method=='POST':\n                shortquestionForm=LXPFORM.ShortQuestionForm(request.POST)\n                if shortquestionForm.is_valid(): \n                    questiontext = shortquestionForm.cleaned_data[\"question\"]\n                    shortquestion = LXPModel.ShortQuestion.objects.all().filter(question__iexact = questiontext)\n                    if shortquestion:\n                        messages.info(request, 'Short Question Already Exist')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_update_shortquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_update_shortquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':\n            shortquestion = LXPModel.ShortQuestion.objects.get(id=pk)\n            shortquestionForm=LXPFORM.ShortQuestionForm(request.POST,instance=shortquestion)\n            if request.method=='POST':\n                if shortquestionForm.is_valid(): \n                    shortquestiontext = shortquestionForm.cleaned_data[\"question\"]\n                    shortquestion = LXPModel.ShortQuestion.objects.all().filter(question__iexact = shortquestiontext).exclude(id=pk)\n                    if shortquestion:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_view_shortquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_view_shortquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            shortquestions = LXPModel.ShortQuestion.objects.all().filter(exam_id__in = LXPModel.Exam.objects.all())\n            return render(request,'staff/shortquestion/staff_view_shortquestion.html',{'shortquestions':shortquestions})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_delete_shortquestion_view(request,pk):\n    try:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_delete_shortquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_delete_shortquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':  \n            shortquestion=LXPModel.ShortQuestion.objects.get(id=pk)\n            shortquestion.delete()\n            return HttpResponseRedirect('/staff/staff-view-shortquestion')\n        shortquestions = LXPModel.ShortQuestion.objects.all()\n        return render(request,'staff/shortquestion/staff_view_shortquestion.html',{'shortquestions':shortquestions})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_pending_short_exam_result_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_pending_short_exam_result_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            pending = LXPModel.ShortResult.objects.all().filter( learner_id__in = User.objects.all(),exam_id__in = LXPModel.Exam.objects.all(),status = False)\n            return render(request,'staff/shortexam/staff_pending_short_exam_reuslt.html',{'pending':pending})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_update_short_question_result_view(request,pk):\n    try:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_update_short_question_result_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_update_short_question_result_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':\n            resultdetails = LXPModel.ShortResultDetails.objects.all().filter( question_id__in = LXPModel.ShortQuestion.objects.all(),shortresult_id = pk)\n            return render(request,'staff/shortexam/staff_update_short_question_result.html',{'resultdetails':resultdetails})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_save_short_question_result_view(request,pk):\n    try:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_save_short_question_result_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_save_short_question_result_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':\n            if request.method==\"POST\":\n                feedback=request.POST['newfeedback']\n                marks=request.POST['newmarks']\n                rid=request.POST['newid']\n                qid=request.POST['newqid']\n                answer=request.POST['newanswer']\n                mainid=request.POST['newmainid']",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_ytexamquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_ytexamquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            return render(request,'staff/ytexamquestion/staff_ytexamquestion.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_add_ytexamquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_add_ytexamquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_add_ytexamquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            if request.method=='POST':\n                ytexamquestionForm=LXPFORM.YTExamQuestionForm(request.POST)\n                if ytexamquestionForm.is_valid(): \n                    questiontext = ytexamquestionForm.cleaned_data[\"question\"]\n                    ytexamquestion = LXPModel.YTExamQuestion.objects.all().filter(question__iexact = questiontext)\n                    if ytexamquestion:\n                        messages.info(request, 'Mcq Question Name Already Exist')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_update_ytexamquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_update_ytexamquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':\n            ytexamquestion = LXPModel.YTExamQuestion.objects.get(id=pk)\n            ytexamquestionForm=LXPFORM.YTExamQuestionForm(request.POST,instance=ytexamquestion)\n            if request.method=='POST':\n                if ytexamquestionForm.is_valid(): \n                    ytexamquestiontext = ytexamquestionForm.cleaned_data[\"ytexamquestion_name\"]\n                    ytexamquestion = LXPModel.YTExamQuestion.objects.all().filter(ytexamquestion_name__iexact = ytexamquestiontext).exclude(id=pk)\n                    if ytexamquestion:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_view_ytexamquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_view_ytexamquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            ytexamquestions = LXPModel.YTExamQuestion.objects.all().filter(playlist_id__in = LXPModel.Playlist.objects.all())\n            return render(request,'staff/ytexamquestion/staff_view_ytexamquestion.html',{'ytexamquestions':ytexamquestions})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_delete_ytexamquestion_view(request,pk):\n    try:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_delete_ytexamquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_delete_ytexamquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':  \n            ytexamquestion=LXPModel.YTExamQuestion.objects.get(id=pk)\n            ytexamquestion.delete()\n            return HttpResponseRedirect('/staff/staff-view-ytexamquestion')\n        ytexamquestions = LXPModel.YTExamQuestion.objects.all()\n        return render(request,'staff/ytexamquestion/staff_view_ytexamquestion.html',{'ytexamquestions':ytexamquestions})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_view_learner_video_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_view_learner_video_view(request):\n    #try:\n        if str(request.session['utype']) == 'staff':\n            learner = UserSocialAuth.objects.raw('SELECT social_auth_usersocialauth.id, social_auth_usersocialauth.user_id, social_auth_usersocialauth.pic, auth_user.first_name, auth_user.last_name, GROUP_CONCAT(DISTINCT lxpapp_playlist.name) AS courseset_name, lxpapp_learnerdetails.mobile FROM social_auth_usersocialauth LEFT OUTER JOIN auth_user ON (social_auth_usersocialauth.user_id = auth_user.id) LEFT OUTER JOIN lxpapp_batchlearner ON (auth_user.id = lxpapp_batchlearner.learner_id) LEFT OUTER JOIN lxpapp_batchrecordedvdolist ON (lxpapp_batchlearner.batch_id = lxpapp_batchrecordedvdolist.batch_id) LEFT OUTER JOIN lxpapp_playlist ON (lxpapp_batchrecordedvdolist.playlist_id = lxpapp_playlist.id) LEFT OUTER JOIN lxpapp_learnerdetails ON (auth_user.id = lxpapp_learnerdetails.learner_id) WHERE (social_auth_usersocialauth.utype = 0 OR social_auth_usersocialauth.utype = 2) AND social_auth_usersocialauth.status = 1 GROUP BY social_auth_usersocialauth.id, social_auth_usersocialauth.user_id, auth_user.first_name, auth_user.last_name, lxpapp_learnerdetails.mobile ')\n            return render(request,'staff/learnervideo/staff_view_learner_video.html',{'learner':learner})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_learner_video_Course_view(request,user_id,userfirstname,userlastname):\n#    try:    ",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_learner_video_Course_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_learner_video_Course_view(request,user_id,userfirstname,userlastname):\n#    try:    \n        if str(request.session['utype']) == 'staff':\n            videos1 = LXPModel.BatchCourseSet.objects.raw('SELECT DISTINCT lxpapp_courseset.id,  lxpapp_courseset.courseset_name,lxpapp_batchcourseset.batch_id FROM  lxpapp_batchcourseset   INNER JOIN lxpapp_courseset ON (lxpapp_batchcourseset.courseset_id = lxpapp_courseset.id)   INNER JOIN lxpapp_batch ON (lxpapp_batchcourseset.batch_id = lxpapp_batch.id)   INNER JOIN lxpapp_batchlearner ON (lxpapp_batchlearner.batch_id = lxpapp_batch.id) WHERE   lxpapp_batchlearner.learner_id = ' + str(user_id))\n            return render(request,'staff/learnervideo/staff_learner_video_course.html',{'videos':videos1,'userfirstname':userfirstname,'userlastname':userlastname,'user_id':user_id})\n #   except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_learner_video_Course_subject_view(request,user_id,userfirstname,userlastname):\n#    try:    ",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_learner_video_Course_subject_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_learner_video_Course_subject_view(request,user_id,userfirstname,userlastname):\n#    try:    \n        if str(request.session['utype']) == 'staff':\n            subject = LXPModel.Playlist.objects.raw('SELECT ID AS id, NAME, VTOTAL, Mtotal, SUM(VWATCHED) AS VWatched,((100*VWATCHED)/VTOTAL) as per, THUMBNAIL_URL FROM (SELECT YYY.ID, YYY.NAME, YYY.THUMBNAIL_URL, ( SELECT COUNT(XX.ID) FROM LXPAPP_PLAYLISTITEM XX WHERE XX.PLAYLIST_ID = YYY.ID ) AS Vtotal, ( SELECT COUNT(zz.ID) FROM LXPAPP_sessionmaterial zz WHERE zz.PLAYLIST_ID = YYY.ID ) AS Mtotal, (SELECT COUNT (LXPAPP_VIDEOWATCHED.ID) AS a FROM LXPAPP_PLAYLISTITEM GHGH LEFT OUTER JOIN LXPAPP_VIDEOWATCHED ON ( GHGH.VIDEO_ID = LXPAPP_VIDEOWATCHED.VIDEO_ID ) WHERE GHGH.PLAYLIST_ID = YYY.ID AND LXPAPP_VIDEOWATCHED.LEARNER_ID = ' + str( user_id) + ') AS VWatched FROM LXPAPP_BATCHLEARNER INNER JOIN LXPAPP_BATCH ON (LXPAPP_BATCHLEARNER.BATCH_ID = LXPAPP_BATCH.ID) INNER JOIN LXPAPP_BATCHRECORDEDVDOLIST ON (LXPAPP_BATCH.ID = LXPAPP_BATCHRECORDEDVDOLIST.BATCH_ID) INNER JOIN LXPAPP_PLAYLIST YYY ON (LXPAPP_BATCHRECORDEDVDOLIST.PLAYLIST_ID = YYY.ID) WHERE LXPAPP_BATCHLEARNER.LEARNER_ID = ' + str(user_id) + ') GROUP BY ID, NAME, VTOTAL ORDER BY NAME')\n            videocount = LXPModel.LearnerPlaylistCount.objects.all().filter(learner_id = user_id)\n            countpresent =False\n            if videocount:\n                countpresent = True\n            per = 0\n            tc = 0",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_learner_video_list_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_learner_video_list_view(request,subject_id,user_id):\n    try:     \n        if str(request.session['utype']) == 'staff':\n            subjectname = LXPModel.Playlist.objects.only('name').get(id=subject_id).name\n            list = LXPModel.PlaylistItem.objects.raw('SELECT DISTINCT mainvid.id, mainvid.name, IFNULL((SELECT lxpapp_videowatched.video_id FROM lxpapp_videowatched WHERE lxpapp_videowatched.learner_id = ' + str(user_id) + ' AND lxpapp_videowatched.video_id = mainvid.id), 0) AS watched, IFNULL((SELECT lxpapp_videotounlock.video_id FROM lxpapp_videotounlock WHERE lxpapp_videotounlock.learner_id = ' + str(user_id) + ' AND lxpapp_videotounlock.video_id = mainvid.id), 0) AS unlocked FROM lxpapp_video mainvid INNER JOIN lxpapp_playlistitem ON (mainvid.id = lxpapp_playlistitem.video_id) WHERE lxpapp_playlistitem.playlist_id = ' + str (subject_id) + ' AND mainvid.name <> \"Deleted video\"')  \n            return render(request,'staff/learnervideo/staff_learner_video_list.html',{'list':list,'subjectname':subjectname,'subject_id':subject_id,'user_id':user_id})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_learner_approve_video(request,pk,studid):",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_learner_approve_video",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_learner_approve_video(request,pk,studid):\n    try:\n        if str(request.session['utype']) == 'staff':\n            unlock = LXPModel.VideoToUnlock.objects.create(learner_id=studid,video_id=pk)\n            unlock.save()\n            return HttpResponseRedirect(request.META.get('HTTP_REFERER', '/'))\n    except:\n        return render(request,'lxpapp/404page.html') \n@login_required\ndef staff_learner_approveall_video(request,userid,subject_id):",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_learner_approveall_video",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_learner_approveall_video(request,userid,subject_id):\n    try:\n        if str(request.session['utype']) == 'staff':\n            videos=LXPModel.Playlist.objects.raw('SELECT   lxpapp_video.id FROM  lxpapp_playlistitem  INNER JOIN lxpapp_video ON (lxpapp_playlistitem.video_id = lxpapp_video.id) where lxpapp_playlistitem.playlist_id = ' + str (subject_id))\n            for x in videos:\n                unlock = LXPModel.VideoToUnlock.objects.create(learner_id=userid,video_id=x.id)\n                unlock.save()\n            return HttpResponseRedirect(request.META.get('HTTP_REFERER', '/'))\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_learner_show_video_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_learner_show_video_view(request,subject_id,video_id):\n    try:    \n        if str(request.session['utype']) == 'staff':\n            subjectname = LXPModel.Playlist.objects.only('name').get(id=subject_id).name\n            Videos=LXPModel.Video.objects.all().filter(id=video_id)\n            topicname =''\n            url=''\n            for x in Videos:\n                topicname =x.name\n                url = \"https://www.youtube.com/embed/\" + x.video_id",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_add_chapterquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_add_chapterquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            storage = messages.get_messages(request)\n            storage.used = True\n            if request.method=='POST':\n                chapterquestionForm=LXPFORM.ChapterQuestionForm(request.POST)\n                if chapterquestionForm.is_valid(): \n                    questiontext = chapterquestionForm.cleaned_data[\"question\"]\n                    chapterquestion = LXPModel.ChapterQuestion.objects.all().filter(question__iexact = questiontext)",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_update_chapterquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_update_chapterquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':\n            chapterquestion = LXPModel.ChapterQuestion.objects.get(id=pk)\n            chapterquestionForm=LXPFORM.ChapterQuestionForm(request.POST,instance=chapterquestion)\n            if request.method=='POST':\n                if chapterquestionForm.is_valid(): \n                    chapterquestiontext = chapterquestionForm.cleaned_data[\"chapterquestion_name\"]\n                    chapterquestion = LXPModel.ChapterQuestion.objects.all().filter(chapterquestion_name__iexact = chapterquestiontext).exclude(id=pk)\n                    if chapterquestion:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_view_chapterquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_view_chapterquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            chapterquestions = LXPModel.ChapterQuestion.objects.raw('SELECT DISTINCT  lxpapp_chapter.id,  lxpapp_subject.subject_name,  lxpapp_chapter.chapter_name FROM  lxpapp_chapterquestion  INNER JOIN lxpapp_chapter ON (lxpapp_chapterquestion.chapter_id = lxpapp_chapter.id)  INNER JOIN lxpapp_subject ON (lxpapp_chapterquestion.subject_id = lxpapp_subject.id)')\n            return render(request,'staff/chapterquestion/staff_view_chapterquestion.html',{'chapterquestions':chapterquestions})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_view_chapterquestion_chapter_view(request,chapter_id):\n    try:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_view_chapterquestion_chapter_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_view_chapterquestion_chapter_view(request,chapter_id):\n    try:\n        if str(request.session['utype']) == 'staff':\n            chapterquestions = LXPModel.ChapterQuestion.objects.all().filter(chapter_id__in = LXPModel.Chapter.objects.all().filter(id=chapter_id))\n            chapter_name = LXPModel.Chapter.objects.only('chapter_name').get(id=chapter_id).chapter_name\n            return render(request,'staff/chapterquestion/staff_view_chapterquestion_chapter.html',{'chapterquestions':chapterquestions,'chapter_name':chapter_name})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_delete_chapterquestion_view(request,pk):",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_delete_chapterquestion_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_delete_chapterquestion_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':  \n            chapterquestion=LXPModel.ChapterQuestion.objects.get(id=pk)\n            chapterquestion.delete()\n            return HttpResponseRedirect('/staff/staff-view-chapterquestion')\n        chapterquestions = LXPModel.ChapterQuestion.objects.all()\n        return render(request,'staff/chapterquestion/staff_view_chapterquestion.html',{'chapterquestions':chapterquestions})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_k8sterminal_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_k8sterminal_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            return render(request,'staff/labs/k8sterminal/staff_k8sterminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_add_k8sterminal_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_add_k8sterminal_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_add_k8sterminal_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            if request.method=='POST':\n                k8sterminalForm=LXPFORM.K8STerminalForm(request.POST)\n                learner_id = request.POST['user_name']\n                usagevalue = request.POST.get('usagevalue')\n                password1 = request.POST.get(\"password\")\n                password2 = request.POST.get(\"confirmpassword\")\n                if password1 and password2 and password1 != password2:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_update_k8sterminal_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_update_k8sterminal_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':\n            k8sterminal = LXPModel.K8STerminal.objects.get(id=pk)\n            k8sterminalForm=LXPFORM.K8STerminalForm(request.POST,instance=k8sterminal)\n            if request.method=='POST':\n                if k8sterminalForm.is_valid(): \n                    k8sterminaltext = k8sterminalForm.cleaned_data[\"k8sterminal_name\"]\n                    chaptertext = k8sterminalForm.cleaned_data[\"chapterID\"]\n                    subjecttext = k8sterminalForm.cleaned_data[\"subjectID\"]",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_view_k8sterminal_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_view_k8sterminal_view(request):\n    #try:\n        if str(request.session['utype']) == 'staff':\n            k8sterminals = LXPModel.K8STerminal.objects.all().filter(learner_id__in = User.objects.all().order_by('first_name').filter(id__in=UserSocialAuth.objects.all()))\n            return render(request,'staff/labs/k8sterminal/staff_view_k8sterminal.html',{'k8sterminals':k8sterminals})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_delete_k8sterminal_view(request,pk):\n    try:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_delete_k8sterminal_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_delete_k8sterminal_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'staff':  \n            k8sterminal=LXPModel.K8STerminal.objects.get(id=pk)\n            k8sterminal.delete()\n            return HttpResponseRedirect('/staff/staff-view-k8sterminal')\n        k8sterminals = LXPModel.K8STerminal.objects.all()\n        return render(request,'staff/labs/k8sterminal/staff_view_k8sterminal.html',{'k8sterminals':k8sterminals})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_python_terminal_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_python_terminal_view(request):\n    #try:\n        if str(request.session['utype']) == 'staff':  \n            return render(request,'staff/labs/python/staff_python_terminal.html')\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_linux_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':  ",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_linux_terminal_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_linux_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':  \n            return render(request,'staff/labs/linux/staff_linux_terminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef staff_cloudshell_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':  ",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "staff_cloudshell_terminal_view",
        "kind": 2,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "def staff_cloudshell_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':  \n            return render(request,'staff/labs/cloudshell/staff_cloudshell_terminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "ALLOWED_EXTENSIONS",
        "kind": 5,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "ALLOWED_EXTENSIONS = set(['pdf'])\ndef allowed_file(name):\n    return \".\" in name and name.split(\".\")[1].lower() in ALLOWED_EXTENSIONS\n# Connect to the s3 service\ns3 = boto3.client(\n    \"s3\",\n    aws_access_key_id='AKIATZQFG2PZIUPD23GA',\n    aws_secret_access_key='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'\n)\n#upload file to s3 w/ acl as public",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 5,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "s3 = boto3.client(\n    \"s3\",\n    aws_access_key_id='AKIATZQFG2PZIUPD23GA',\n    aws_secret_access_key='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'\n)\n#upload file to s3 w/ acl as public\n@login_required  \ndef upload_material_file_to_s3(request,file, bucket_name, acl=\"public-read\"):\n    try:\n        filename = datetime.now().strftime(\"%Y%m%d%H%M%S.pdf\")",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "\tdata",
        "kind": 5,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "\tdata = {}\n\tif \"GET\" == request.method:\n\t\treturn render(request, \"myapp/upload_csv.html\", data)\n    # if not GET, then proceed\n\ttry:\n\t\tcsv_file = request.FILES[\"csv_file\"]\n\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "\t\tcsv_file",
        "kind": 5,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "\t\tcsv_file = request.FILES[\"csv_file\"]\n\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t\n\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "\t\tfile_data",
        "kind": 5,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t\n\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "\t\tlines",
        "kind": 5,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t\n\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tfields",
        "kind": 5,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef staff_view_exam_view(request):",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict",
        "kind": 5,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef staff_view_exam_view(request):\n    try:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict[\"name\"]",
        "kind": 5,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef staff_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict[\"start_date_time\"]",
        "kind": 5,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef staff_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all())",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict[\"end_date_time\"]",
        "kind": 5,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef staff_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all())\n            return render(request,'staff/exam/staff_view_exam.html',{'exams':exams})",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict[\"notes\"]",
        "kind": 5,
        "importPath": "staff.views",
        "description": "staff.views",
        "peekOfCode": "\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef staff_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'staff':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all())\n            return render(request,'staff/exam/staff_view_exam.html',{'exams':exams})\n    except:",
        "detail": "staff.views",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "templates.test",
        "description": "templates.test",
        "peekOfCode": "name = input(\"Enter Name \")\npwd = input(\"Enter Password \")\nage = input(\"Enter Age\")\n#print(type(name))\nif name == \"john\" and pwd == \"abc\":\n    if int(age) < 18:\n        print(\"not allowed\")\n    else:\n        print(\"allowed\")\n        print(\"welcome john\")",
        "detail": "templates.test",
        "documentation": {}
    },
    {
        "label": "pwd",
        "kind": 5,
        "importPath": "templates.test",
        "description": "templates.test",
        "peekOfCode": "pwd = input(\"Enter Password \")\nage = input(\"Enter Age\")\n#print(type(name))\nif name == \"john\" and pwd == \"abc\":\n    if int(age) < 18:\n        print(\"not allowed\")\n    else:\n        print(\"allowed\")\n        print(\"welcome john\")\nelif name == \"ram\" and pwd == \"xyz\":",
        "detail": "templates.test",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "templates.test",
        "description": "templates.test",
        "peekOfCode": "age = input(\"Enter Age\")\n#print(type(name))\nif name == \"john\" and pwd == \"abc\":\n    if int(age) < 18:\n        print(\"not allowed\")\n    else:\n        print(\"allowed\")\n        print(\"welcome john\")\nelif name == \"ram\" and pwd == \"xyz\":\n    print(\"welcome ram\")",
        "detail": "templates.test",
        "documentation": {}
    },
    {
        "label": "TrainerConfig",
        "kind": 6,
        "importPath": "trainer.apps",
        "description": "trainer.apps",
        "peekOfCode": "class TrainerConfig(AppConfig):\n    name = 'trainer'",
        "detail": "trainer.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "trainer.urls",
        "description": "trainer.urls",
        "peekOfCode": "urlpatterns = [\n    path('trainer-dashboard', views.trainer_dashboard_view,name='trainer-dashboard'),\n    path('trainer-view-material', views.trainer_view_material_view,name='trainer-view-material'),\n    path('trainer-show-material/<materialtype>,/<int:pk>', views.trainer_show_material_view,name='trainer-show-material'),\n    path('trainer-view-sessionmaterial', views.trainer_view_sessionmaterial_view,name='trainer-view-sessionmaterial'),\n    path('trainer-show-sessionmaterial/<sessionmaterialtype>,/<int:pk>', views.trainer_show_sessionmaterial_view,name='trainer-show-sessionmaterial'),\n    path('ajax/load-videos/', views.load_videos, name='ajax_load_videos'),\n    path('trainer-exam', views.trainer_exam_view,name='trainer-exam'),\n    path('trainer-add-exam', views.trainer_add_exam_view,name='trainer-add-exam'),\n    path('trainer-update-exam/<int:pk>', views.trainer_update_exam_view,name='trainer-update-exam'),",
        "detail": "trainer.urls",
        "documentation": {}
    },
    {
        "label": "trainer_dashboard_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_dashboard_view(request):\n    #try:\n        if str(request.session['utype']) == 'trainer':\n            notification = LXPModel.TrainerNotification.objects.all().filter(trainer_id = request.user.id,status = False)\n            mco = LXPModel.Exam.objects.filter(questiontpye='MCQ').count()\n            short = LXPModel.Exam.objects.filter(questiontpye='ShortAnswer').count()\n            mcqques= LXPModel.McqQuestion.objects.all().count()\n            sques= LXPModel.ShortQuestion.objects.all().count()\n            schedulers = LXPModel.Scheduler.objects.annotate(\n                status_sum=Coalesce(Sum('schedulerstatus__status'), Value(0)),",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_view_material_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_view_material_view(request):\n    #try:\n        if str(request.session['utype']) == 'trainer':\n            materials = LXPModel.Material.objects.all()\n            return render(request,'trainer/material/trainer_view_material.html',{'materials':materials})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_show_material_view(request,materialtype,pk):\n    try:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_show_material_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_show_material_view(request,materialtype,pk):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            details= LXPModel.Material.objects.all().filter(id=pk)\n            if materialtype == 'HTML':\n                return render(request,'trainer/material/trainer_material_htmlshow.html',{'details':details})\n            if materialtype == 'URL':\n                return render(request,'trainer/material/trainer_material_urlshow.html',{'details':details})\n            if materialtype == 'PDF':\n                return render(request,'trainer/material/trainer_material_pdfshow.html',{'details':details})",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_view_sessionmaterial_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_view_sessionmaterial_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            sessionmaterials = LXPModel.SessionMaterial.objects.all()\n            return render(request,'trainer/sessionmaterial/trainer_view_sessionmaterial.html',{'sessionmaterials':sessionmaterials})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_show_sessionmaterial_view(request,sessionmaterialtype,pk):\n    try:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_show_sessionmaterial_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_show_sessionmaterial_view(request,sessionmaterialtype,pk):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            details= LXPModel.SessionMaterial.objects.all().filter(id=pk)\n            if sessionmaterialtype == 'HTML':\n                return render(request,'trainer/sessionmaterial/trainer_sessionmaterial_htmlshow.html',{'details':details})\n            if sessionmaterialtype == 'URL':\n                return render(request,'trainer/sessionmaterial/trainer_sessionmaterial_urlshow.html',{'details':details})\n            if sessionmaterialtype == 'PDF':\n                return render(request,'trainer/sessionmaterial/trainer_sessionmaterial_pdfshow.html',{'details':details})",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "load_videos",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def load_videos(request):\n    try:\n        playlist_id = request.GET.get('playlist')\n        videos = LXPModel.PlaylistItem.objects.raw('SELECT  lxpapp_video.id as id,lxpapp_video.id as pk, lxpapp_video.name FROM  lxpapp_playlistitem  INNER JOIN lxpapp_video ON (lxpapp_playlistitem.video_id = lxpapp_video.id) WHERE  lxpapp_playlistitem.playlist_id = ' + str(playlist_id) + ' ORDER BY  lxpapp_video.name')\n        context = {'videos': videos}\n        return render(request, 'hr/video_dropdown_list_options.html', context)\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_exam_view(request):",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_exam_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            return render(request,'trainer/exam/trainer_exam.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_add_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_add_exam_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_add_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            form = LXPFORM.ExamForm(request.POST or None)\n            breadcrumblink = []\n            btrnr={}\n            btrnr[\"head\"]='Dashboard'\n            btrnr[\"link\"]='../../../../trainer/trainer-dashboard'\n            breadcrumblink.append(btrnr)\n            btrnr={}",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_update_exam_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_update_exam_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            instance = get_object_or_404(LXPModel.Exam, id=pk)\n            form = LXPFORM.ExamForm(request.POST or None, instance=instance)\n            breadcrumblink = []\n            btrnr={}\n            btrnr[\"head\"]='Dashboard'\n            btrnr[\"link\"]='../../../../trainer/trainer-dashboard'\n            breadcrumblink.append(btrnr)",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_upload_exam_csv_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_upload_exam_csv_view(request):\n    if request.method=='POST':\n        file=request.FILES[\"select_file\"]\n        examtext=request.POST.get('exam_name')\n        batch=request.POST.get('batch')\n        qtype=request.POST.get('examtype')\n        exam = LXPModel.Exam.objects.all().filter(exam_name__iexact = examtext)\n        if exam:\n            messages.info(request, 'Exam Name Already Exist')\n        else:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "upload_csv",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def upload_csv(request):\n\tdata = {}\n\tif \"GET\" == request.method:\n\t\treturn render(request, \"myapp/upload_csv.html\", data)\n    # if not GET, then proceed\n\ttry:\n\t\tcsv_file = request.FILES[\"csv_file\"]\n\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_view_exam_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all())\n            return render(request,'trainer/exam/trainer_view_exam.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')\ndef trainer_view_filter_exam_view(request,type):\n    try:\n        if str(request.session['utype']) == 'trainer':",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_view_filter_exam_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_view_filter_exam_view(request,type):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all(),questiontpye = type)\n            return render(request,'trainer/exam/trainer_view_exam.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_delete_exam_view(request,pk):\n    try:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_delete_exam_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_delete_exam_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'trainer':  \n            exam=LXPModel.Exam.objects.get(id=pk)\n            exam.delete()\n            return HttpResponseRedirect('/trainer/trainer-view-exam')\n        exams = LXPModel.Exam.objects.all()\n        return render(request,'trainer/exam/trainer_view_exam.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_mcqquestion_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_mcqquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            return render(request,'trainer/mcqquestion/trainer_mcqquestion.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_view_mcqquestion_exams_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_view_mcqquestion_exams_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_view_mcqquestion_exams_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            exams = LXPModel.Exam.objects.all().filter(questiontpye='MCQ')\n            return render(request,'trainer/mcqquestion/trainer_view_mcqquestion_exams.html',{'exams':exams})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_view_mcqquestion_view(request,examid):\n    try:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_view_mcqquestion_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_view_mcqquestion_view(request,examid):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            mcqquestions = LXPModel.McqQuestion.objects.all().filter(exam_id__in = LXPModel.Exam.objects.all().filter(id=examid))\n            return render(request,'trainer/mcqquestion/trainer_view_mcqquestion.html',{'mcqquestions':mcqquestions})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_shortquestion_view(request):\n    try:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_shortquestion_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_shortquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            return render(request,'trainer/shortquestion/trainer_shortquestion.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_view_shortquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_view_shortquestion_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_view_shortquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            shortquestions = LXPModel.ShortQuestion.objects.all().filter(exam_id__in = LXPModel.Exam.objects.all())\n            return render(request,'trainer/shortquestion/trainer_view_shortquestion.html',{'shortquestions':shortquestions})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_pending_short_exam_result_view(request):\n    try:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_pending_short_exam_result_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_pending_short_exam_result_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            pending = LXPModel.ShortResult.objects.all().filter( learner_id__in = User.objects.all(),exam_id__in = LXPModel.Exam.objects.all(),status = False)\n            return render(request,'trainer/shortexam/trainer_pending_short_exam_reuslt.html',{'pending':pending})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_update_short_question_result_view(request,pk):\n    try:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_update_short_question_result_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_update_short_question_result_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            resultdetails = LXPModel.ShortResultDetails.objects.all().filter( question_id__in = LXPModel.ShortQuestion.objects.all(),shortresult_id = pk)\n            return render(request,'trainer/shortexam/trainer_update_short_question_result.html',{'resultdetails':resultdetails})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_save_short_question_result_view(request,pk):\n    try:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_save_short_question_result_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_save_short_question_result_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            if request.method==\"POST\":\n                feedback=request.POST['newfeedback']\n                marks=request.POST['newmarks']\n                rid=request.POST['newid']\n                qid=request.POST['newqid']\n                answer=request.POST['newanswer']\n                mainid=request.POST['newmainid']",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_ytexamquestion_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_ytexamquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            return render(request,'trainer/ytexamquestion/trainer_ytexamquestion.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_view_ytexamquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_view_ytexamquestion_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_view_ytexamquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            ytexamquestions = LXPModel.YTExamQuestion.objects.all().filter(playlist_id__in = LXPModel.Playlist.objects.all())\n            return render(request,'trainer/ytexamquestion/trainer_view_ytexamquestion.html',{'ytexamquestions':ytexamquestions})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_view_learner_video_view(request):\n    #try:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_view_learner_video_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_view_learner_video_view(request):\n    #try:\n        if str(request.session['utype']) == 'trainer':\n            learner = UserSocialAuth.objects.raw('SELECT social_auth_usersocialauth.id, social_auth_usersocialauth.user_id, social_auth_usersocialauth.pic, auth_user.first_name, auth_user.last_name, GROUP_CONCAT(DISTINCT lxpapp_playlist.name) AS courseset_name, lxpapp_learnerdetails.mobile FROM social_auth_usersocialauth LEFT OUTER JOIN auth_user ON (social_auth_usersocialauth.user_id = auth_user.id) LEFT OUTER JOIN lxpapp_batchlearner ON (auth_user.id = lxpapp_batchlearner.learner_id) LEFT OUTER JOIN lxpapp_batchrecordedvdolist ON (lxpapp_batchlearner.batch_id = lxpapp_batchrecordedvdolist.batch_id) LEFT OUTER JOIN lxpapp_playlist ON (lxpapp_batchrecordedvdolist.playlist_id = lxpapp_playlist.id) LEFT OUTER JOIN lxpapp_learnerdetails ON (auth_user.id = lxpapp_learnerdetails.learner_id) WHERE (social_auth_usersocialauth.utype = 0 OR social_auth_usersocialauth.utype = 2) AND social_auth_usersocialauth.status = 1 GROUP BY social_auth_usersocialauth.id, social_auth_usersocialauth.user_id, auth_user.first_name, auth_user.last_name, lxpapp_learnerdetails.mobile ')\n            return render(request,'trainer/learnervideo/trainer_view_learner_video.html',{'learner':learner})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_learner_video_Course_view(request,user_id,userfirstname,userlastname):\n#    try:    ",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_learner_video_Course_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_learner_video_Course_view(request,user_id,userfirstname,userlastname):\n#    try:    \n        if str(request.session['utype']) == 'trainer':\n            videos1 = LXPModel.BatchCourseSet.objects.raw('SELECT DISTINCT lxpapp_courseset.id,  lxpapp_courseset.courseset_name,lxpapp_batchcourseset.batch_id FROM  lxpapp_batchcourseset   INNER JOIN lxpapp_courseset ON (lxpapp_batchcourseset.courseset_id = lxpapp_courseset.id)   INNER JOIN lxpapp_batch ON (lxpapp_batchcourseset.batch_id = lxpapp_batch.id)   INNER JOIN lxpapp_batchlearner ON (lxpapp_batchlearner.batch_id = lxpapp_batch.id) WHERE   lxpapp_batchlearner.learner_id = ' + str(user_id))\n            return render(request,'trainer/learnervideo/trainer_learner_video_course.html',{'videos':videos1,'userfirstname':userfirstname,'userlastname':userlastname,'user_id':user_id})\n #   except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_learner_video_Course_subject_view(request,user_id,userfirstname,userlastname):\n#    try:    ",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_learner_video_Course_subject_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_learner_video_Course_subject_view(request,user_id,userfirstname,userlastname):\n#    try:    \n        if str(request.session['utype']) == 'trainer':\n            subject = LXPModel.Playlist.objects.raw('SELECT ID AS id, NAME, VTOTAL, Mtotal, SUM(VWATCHED) AS VWatched,((100*VWATCHED)/VTOTAL) as per, THUMBNAIL_URL FROM (SELECT YYY.ID, YYY.NAME, YYY.THUMBNAIL_URL, ( SELECT COUNT(XX.ID) FROM LXPAPP_PLAYLISTITEM XX WHERE XX.PLAYLIST_ID = YYY.ID ) AS Vtotal, ( SELECT COUNT(zz.ID) FROM LXPAPP_sessionmaterial zz WHERE zz.PLAYLIST_ID = YYY.ID ) AS Mtotal, (SELECT COUNT (LXPAPP_VIDEOWATCHED.ID) AS a FROM LXPAPP_PLAYLISTITEM GHGH LEFT OUTER JOIN LXPAPP_VIDEOWATCHED ON ( GHGH.VIDEO_ID = LXPAPP_VIDEOWATCHED.VIDEO_ID ) WHERE GHGH.PLAYLIST_ID = YYY.ID AND LXPAPP_VIDEOWATCHED.LEARNER_ID = ' + str( user_id) + ') AS VWatched FROM LXPAPP_BATCHLEARNER INNER JOIN LXPAPP_BATCH ON (LXPAPP_BATCHLEARNER.BATCH_ID = LXPAPP_BATCH.ID) INNER JOIN LXPAPP_BATCHRECORDEDVDOLIST ON (LXPAPP_BATCH.ID = LXPAPP_BATCHRECORDEDVDOLIST.BATCH_ID) INNER JOIN LXPAPP_PLAYLIST YYY ON (LXPAPP_BATCHRECORDEDVDOLIST.PLAYLIST_ID = YYY.ID) WHERE LXPAPP_BATCHLEARNER.LEARNER_ID = ' + str(user_id) + ') GROUP BY ID, NAME, VTOTAL ORDER BY NAME')\n            videocount = LXPModel.LearnerPlaylistCount.objects.all().filter(learner_id = user_id)\n            countpresent =False\n            if videocount:\n                countpresent = True\n            per = 0\n            tc = 0",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_learner_video_list_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_learner_video_list_view(request,subject_id,user_id):\n    try:     \n        if str(request.session['utype']) == 'trainer':\n            subjectname = LXPModel.Playlist.objects.only('name').get(id=subject_id).name\n            list = LXPModel.PlaylistItem.objects.raw('SELECT DISTINCT mainvid.id, mainvid.name, IFNULL((SELECT lxpapp_videowatched.video_id FROM lxpapp_videowatched WHERE lxpapp_videowatched.learner_id = ' + str(user_id) + ' AND lxpapp_videowatched.video_id = mainvid.id), 0) AS watched, IFNULL((SELECT lxpapp_videotounlock.video_id FROM lxpapp_videotounlock WHERE lxpapp_videotounlock.learner_id = ' + str(user_id) + ' AND lxpapp_videotounlock.video_id = mainvid.id), 0) AS unlocked FROM lxpapp_video mainvid INNER JOIN lxpapp_playlistitem ON (mainvid.id = lxpapp_playlistitem.video_id) WHERE lxpapp_playlistitem.playlist_id = ' + str (subject_id) + ' AND mainvid.name <> \"Deleted video\"')  \n            return render(request,'trainer/learnervideo/trainer_learner_video_list.html',{'list':list,'subjectname':subjectname,'subject_id':subject_id,'user_id':user_id})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_learner_approve_video(request,pk,studid):",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_learner_approve_video",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_learner_approve_video(request,pk,studid):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            unlock = LXPModel.VideoToUnlock.objects.create(learner_id=studid,video_id=pk)\n            unlock.save()\n            return HttpResponseRedirect(request.META.get('HTTP_REFERER', '/'))\n    except:\n        return render(request,'lxpapp/404page.html') \n@login_required\ndef trainer_learner_approveall_video(request,userid,subject_id):",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_learner_approveall_video",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_learner_approveall_video(request,userid,subject_id):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            videos=LXPModel.Playlist.objects.raw('SELECT   lxpapp_video.id FROM  lxpapp_playlistitem  INNER JOIN lxpapp_video ON (lxpapp_playlistitem.video_id = lxpapp_video.id) where lxpapp_playlistitem.playlist_id = ' + str (subject_id))\n            for x in videos:\n                unlock = LXPModel.VideoToUnlock.objects.create(learner_id=userid,video_id=x.id)\n                unlock.save()\n            return HttpResponseRedirect(request.META.get('HTTP_REFERER', '/'))\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_learner_show_video_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_learner_show_video_view(request,subject_id,video_id):\n    try:    \n        if str(request.session['utype']) == 'trainer':\n            subjectname = LXPModel.Playlist.objects.only('name').get(id=subject_id).name\n            Videos=LXPModel.Video.objects.all().filter(id=video_id)\n            topicname =''\n            url=''\n            for x in Videos:\n                topicname =x.name\n                url = \"https://www.youtube.com/embed/\" + x.video_id",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_view_chapterquestion_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_view_chapterquestion_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            chapterquestions = LXPModel.ChapterQuestion.objects.raw('SELECT DISTINCT  lxpapp_chapter.id,  lxpapp_subject.subject_name,  lxpapp_chapter.chapter_name FROM  lxpapp_chapterquestion  INNER JOIN lxpapp_chapter ON (lxpapp_chapterquestion.chapter_id = lxpapp_chapter.id)  INNER JOIN lxpapp_subject ON (lxpapp_chapterquestion.subject_id = lxpapp_subject.id)')\n            return render(request,'trainer/chapterquestion/trainer_view_chapterquestion.html',{'chapterquestions':chapterquestions})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_view_chapterquestion_chapter_view(request,chapter_id):\n    try:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_view_chapterquestion_chapter_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_view_chapterquestion_chapter_view(request,chapter_id):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            chapterquestions = LXPModel.ChapterQuestion.objects.all().filter(chapter_id__in = LXPModel.Chapter.objects.all().filter(id=chapter_id))\n            chapter_name = LXPModel.Chapter.objects.only('chapter_name').get(id=chapter_id).chapter_name\n            return render(request,'trainer/chapterquestion/trainer_view_chapterquestion_chapter.html',{'chapterquestions':chapterquestions,'chapter_name':chapter_name})\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_k8sterminal_view(request):",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_k8sterminal_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_k8sterminal_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            return render(request,'trainer/labs/k8sterminal/trainer_k8sterminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_add_k8sterminal_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_add_k8sterminal_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_add_k8sterminal_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            if request.method=='POST':\n                k8sterminalForm=LXPFORM.K8STerminalForm(request.POST)\n                learner_id = request.POST['user_name']\n                usagevalue = request.POST.get('usagevalue')\n                password1 = request.POST.get(\"password\")\n                password2 = request.POST.get(\"confirmpassword\")\n                if password1 and password2 and password1 != password2:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_update_k8sterminal_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_update_k8sterminal_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            k8sterminal = LXPModel.K8STerminal.objects.get(id=pk)\n            k8sterminalForm=LXPFORM.K8STerminalForm(request.POST,instance=k8sterminal)\n            if request.method=='POST':\n                if k8sterminalForm.is_valid(): \n                    k8sterminaltext = k8sterminalForm.cleaned_data[\"k8sterminal_name\"]\n                    chaptertext = k8sterminalForm.cleaned_data[\"chapterID\"]\n                    subjecttext = k8sterminalForm.cleaned_data[\"subjectID\"]",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_view_k8sterminal_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_view_k8sterminal_view(request):\n    #try:\n        if str(request.session['utype']) == 'trainer':\n            k8sterminals = LXPModel.K8STerminal.objects.all().filter(learner_id__in = User.objects.all().order_by('first_name').filter(id__in=UserSocialAuth.objects.all()))\n            return render(request,'trainer/labs/k8sterminal/trainer_view_k8sterminal.html',{'k8sterminals':k8sterminals})\n    #except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_delete_k8sterminal_view(request,pk):\n    try:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_delete_k8sterminal_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_delete_k8sterminal_view(request,pk):\n    try:\n        if str(request.session['utype']) == 'trainer':  \n            k8sterminal=LXPModel.K8STerminal.objects.get(id=pk)\n            k8sterminal.delete()\n            return HttpResponseRedirect('/trainer/trainer-view-k8sterminal')\n        k8sterminals = LXPModel.K8STerminal.objects.all()\n        return render(request,'trainer/labs/k8sterminal/trainer_view_k8sterminal.html',{'k8sterminals':k8sterminals})\n    except:\n        return render(request,'lxpapp/404page.html')",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_python_terminal_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_python_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':  \n            return render(request,'trainer/labs/python/trainer_python_terminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_python_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':  ",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_python_terminal_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_python_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':  \n            return render(request,'trainer/labs/python/trainer_python_terminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_linux_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':  ",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_linux_terminal_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_linux_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':  \n            return render(request,'trainer/labs/linux/trainer_linux_terminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_cloudshell_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':  ",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_cloudshell_terminal_view",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_cloudshell_terminal_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':  \n            return render(request,'trainer/labs/cloudshell/trainer_cloudshell_terminal.html')\n    except:\n        return render(request,'lxpapp/404page.html')\n@login_required\ndef trainer_scheduler_calender(request):\n    schedulers = LXPModel.Scheduler.objects.annotate(\n        status_sum=Coalesce(Sum('schedulerstatus__status'), Value(0)),",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_scheduler_calender",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_scheduler_calender(request):\n    schedulers = LXPModel.Scheduler.objects.annotate(\n        status_sum=Coalesce(Sum('schedulerstatus__status'), Value(0)),\n        completion_date=Case(\n            When(status_sum__gte=100, then=Max('schedulerstatus__date')),\n            default=Value(None),\n        )\n    ).filter(trainer_id = request.user.id)\n    return render(request, 'trainer/calender/trainer_calender.html', {'schedulers': schedulers})\n@login_required",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_calender",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_calender(request):\n    # Get schedulers for the logged-in trainer and use Coalesce to replace None with 0 for status_sum\n    schedulers = LXPModel.Scheduler.objects.filter(\n        trainer_id=request.user.id\n    ).annotate(\n        status_sum=Coalesce(Sum('schedulerstatus__status'), Value(0))\n    )\n    return render(request, 'trainer/scheduler/trainer_calender.html', {'schedulers': schedulers})\n# Display list of schedulerstatus\n@login_required",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_schedulerstatus_list",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_schedulerstatus_list(request):\n    if str(request.session['utype']) == 'trainer':\n        schedulerstatus = LXPModel.SchedulerStatus.objects.all()\n        return render(request, 'trainer/schedulerstatus/trainer_schedulerstatus_list.html', {'schedulerstatus': schedulerstatus})\n    else:\n        return render(request,'loginrelated/diffrentuser.html')\n# Create a new schedulerstatus\n@login_required\ndef schedulerstatus_create(request):\n    if str(request.session['utype']) == 'trainer':",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "schedulerstatus_create",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def schedulerstatus_create(request):\n    if str(request.session['utype']) == 'trainer':\n        if request.method == 'POST':\n            scheduler = request.POST.get('scheduler')\n            status = request.POST.get('status')\n            tdate_str = request.POST.get('tdate')\n            status_sum = LXPModel.SchedulerStatus.objects.filter(scheduler_id = scheduler).aggregate(Sum('status'))['status__sum']\n            value = status\n            if status_sum:\n                if (float(status) < float(status_sum)) :",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "get_scheduler_status_sum",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def get_scheduler_status_sum(request):\n    # Check if the request is AJAX using the appropriate header\n    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n        scheduler_id = request.GET.get(\"scheduler_id\")\n        # Get the sum of 'status' values for the given scheduler\n        status_sum = LXPModel.SchedulerStatus.objects.filter(scheduler_id=scheduler_id).aggregate(Sum('status'))['status__sum']\n        # If no statuses exist, set sum to 0\n        if status_sum is None:\n            status_sum = 0\n        # Log the status_sum for debugging (you can remove this in production)",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "schedulerstatus_delete",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def schedulerstatus_delete(request, id):\n    if str(request.session['utype']) == 'trainer':\n        schedulerstatus = get_object_or_404(LXPModel.SchedulerStatus, id=id)\n        # Now delete the schedulerstatus instance\n        schedulerstatus.delete()\n        return redirect('trainer-schedulerstatus-list')\n    else:\n        return render(request,'loginrelated/diffrentuser.html')\nimport json\nfrom  datetime import datetime",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "trainer_schedulerstatus_mark_done",
        "kind": 2,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "def trainer_schedulerstatus_mark_done(request):\n    if request.method == 'POST':\n        try:\n            data = json.loads(request.body)\n            status_id = int(data.get('id'))  # Convert ID to integer\n            # Get sum of all status values for this scheduler\n            total_status = LXPModel.SchedulerStatus.objects.filter(scheduler_id=status_id).aggregate(\n                total=Sum('status')\n            )['total'] or 0\n            if total_status < 100:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "\tdata",
        "kind": 5,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "\tdata = {}\n\tif \"GET\" == request.method:\n\t\treturn render(request, \"myapp/upload_csv.html\", data)\n    # if not GET, then proceed\n\ttry:\n\t\tcsv_file = request.FILES[\"csv_file\"]\n\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "\t\tcsv_file",
        "kind": 5,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "\t\tcsv_file = request.FILES[\"csv_file\"]\n\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t\n\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "\t\tfile_data",
        "kind": 5,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t\n\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "\t\tlines",
        "kind": 5,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "\t\tlines = file_data.split(\"\\n\")\n\t\t#loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t\n\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tfields",
        "kind": 5,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef trainer_view_exam_view(request):",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict",
        "kind": 5,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "\t\t\tdata_dict = {}\n\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef trainer_view_exam_view(request):\n    try:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict[\"name\"]",
        "kind": 5,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "\t\t\tdata_dict[\"name\"] = fields[0]\n\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef trainer_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict[\"start_date_time\"]",
        "kind": 5,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "\t\t\tdata_dict[\"start_date_time\"] = fields[1]\n\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef trainer_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all())",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict[\"end_date_time\"]",
        "kind": 5,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "\t\t\tdata_dict[\"end_date_time\"] = fields[2]\n\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef trainer_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all())\n            return render(request,'trainer/exam/trainer_view_exam.html',{'exams':exams})",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict[\"notes\"]",
        "kind": 5,
        "importPath": "trainer.views",
        "description": "trainer.views",
        "peekOfCode": "\t\t\tdata_dict[\"notes\"] = fields[3]\n\texcept Exception as e:\n\t\tmessages.error(request,\"Unable to upload file. \"+repr(e))\n@login_required\ndef trainer_view_exam_view(request):\n    try:\n        if str(request.session['utype']) == 'trainer':\n            exams = LXPModel.Exam.objects.all().filter(batch_id__in = LXPModel.Batch.objects.all())\n            return render(request,'trainer/exam/trainer_view_exam.html',{'exams':exams})\n    except:",
        "detail": "trainer.views",
        "documentation": {}
    },
    {
        "label": "bind",
        "kind": 5,
        "importPath": "gunicorn_config",
        "description": "gunicorn_config",
        "peekOfCode": "bind = \"0.0.0.0:8000\"\nworkers = multiprocessing.cpu_count() * 2 + 1\nerrorlog = \"errorlog/gunicorn_error.log\"  # Specify the path to your error log file relative to the root folder\nloglevel = \"info\"\n# Optional: Daemonize Gunicorn\ndaemon = True\npidfile = \"gunicorn.pid\"  # Specify the path to the PID file relative to the root folder",
        "detail": "gunicorn_config",
        "documentation": {}
    },
    {
        "label": "workers",
        "kind": 5,
        "importPath": "gunicorn_config",
        "description": "gunicorn_config",
        "peekOfCode": "workers = multiprocessing.cpu_count() * 2 + 1\nerrorlog = \"errorlog/gunicorn_error.log\"  # Specify the path to your error log file relative to the root folder\nloglevel = \"info\"\n# Optional: Daemonize Gunicorn\ndaemon = True\npidfile = \"gunicorn.pid\"  # Specify the path to the PID file relative to the root folder",
        "detail": "gunicorn_config",
        "documentation": {}
    },
    {
        "label": "errorlog",
        "kind": 5,
        "importPath": "gunicorn_config",
        "description": "gunicorn_config",
        "peekOfCode": "errorlog = \"errorlog/gunicorn_error.log\"  # Specify the path to your error log file relative to the root folder\nloglevel = \"info\"\n# Optional: Daemonize Gunicorn\ndaemon = True\npidfile = \"gunicorn.pid\"  # Specify the path to the PID file relative to the root folder",
        "detail": "gunicorn_config",
        "documentation": {}
    },
    {
        "label": "loglevel",
        "kind": 5,
        "importPath": "gunicorn_config",
        "description": "gunicorn_config",
        "peekOfCode": "loglevel = \"info\"\n# Optional: Daemonize Gunicorn\ndaemon = True\npidfile = \"gunicorn.pid\"  # Specify the path to the PID file relative to the root folder",
        "detail": "gunicorn_config",
        "documentation": {}
    },
    {
        "label": "daemon",
        "kind": 5,
        "importPath": "gunicorn_config",
        "description": "gunicorn_config",
        "peekOfCode": "daemon = True\npidfile = \"gunicorn.pid\"  # Specify the path to the PID file relative to the root folder",
        "detail": "gunicorn_config",
        "documentation": {}
    },
    {
        "label": "pidfile",
        "kind": 5,
        "importPath": "gunicorn_config",
        "description": "gunicorn_config",
        "peekOfCode": "pidfile = \"gunicorn.pid\"  # Specify the path to the PID file relative to the root folder",
        "detail": "gunicorn_config",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'LXP.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "my_view",
        "kind": 2,
        "importPath": "message",
        "description": "message",
        "peekOfCode": "def my_view(request):\n    # Perform some action\n    # ...\n    # Display an informational message\n    messages.info(request, 'This is an informational message.')\n    # Clear any existing messages from the session\n    storage = messages.get_messages(request)\n    storage.used = True\n    # Redirect to a different URL\n    return redirect('my_other_view')",
        "detail": "message",
        "documentation": {}
    },
    {
        "label": "root_dir",
        "kind": 5,
        "importPath": "ren",
        "description": "ren",
        "peekOfCode": "root_dir = r\"D:\\nubeera\\LXP\\templates\\staff\"\n# Walk through all files in the root directory and its subdirectories\nfor dirpath, dirnames, filenames in os.walk(root_dir):\n    for filename in filenames:\n        # Check if the filename starts with 'trainer_'\n        if filename.startswith(\"mentor_\"):\n            # Construct the full file path\n            old_file_path = os.path.join(dirpath, filename)\n            # Create the new filename by replacing 'trainer_' with 'mentor_'\n            new_filename = \"staff_\" + filename[len(\"mentor_\"):]",
        "detail": "ren",
        "documentation": {}
    },
    {
        "label": "getHumanizedTimeString",
        "kind": 2,
        "importPath": "util",
        "description": "util",
        "peekOfCode": "def getHumanizedTimeString(seconds):\n    return humanize.precisedelta(\n        datetime.timedelta(seconds=seconds)).upper(). \\\n        replace(\" month\".upper(), \"m.\").replace(\" months\".upper(), \"m.\").replace(\" days\".upper(), \"d.\").replace(\n        \" day\".upper(), \"d.\").replace(\" hours\".upper(), \"hrs.\").replace(\" hour\".upper(), \"hr.\").replace(\n        \" minutes\".upper(), \"mins.\").replace(\" minute\".upper(), \"min.\").replace(\n        \"and\".upper(), \"\").replace(\" seconds\".upper(), \"secs.\").replace(\" second\".upper(), \"sec.\").replace(\",\", \"\")\n# input => [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", ..., \"100\"]  <- array of 100 video ids\n# output => [\"1,2,3,4,...,50\", \"51,52,53,...,100\"]  <- array of 2 video id strings, each with upto 50 comma sperated video ids\ndef getVideoIdsStrings(video_ids):",
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "getVideoIdsStrings",
        "kind": 2,
        "importPath": "util",
        "description": "util",
        "peekOfCode": "def getVideoIdsStrings(video_ids):\n    output = []\n    i = 0\n    while i < len(video_ids):\n        output.append(\",\".join(video_ids[i:i + 50]))\n        i += 50\n    return output\n# input: array of youtube video duration strings => [\"24M23S\", \"2H2M2S\", ...]\n# output:integer => seconds\ndef calculateDuration(vid_durations):",
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "calculateDuration",
        "kind": 2,
        "importPath": "util",
        "description": "util",
        "peekOfCode": "def calculateDuration(vid_durations):\n    hours_pattern = re.compile(r'(\\d+)H')\n    minutes_pattern = re.compile(r'(\\d+)M')\n    seconds_pattern = re.compile(r'(\\d+)S')\n    total_seconds = 0\n    for duration in vid_durations:\n        hours = hours_pattern.search(duration)  # returns matches in the form \"24H\"\n        mins = minutes_pattern.search(duration)  # \"24M\"\n        secs = seconds_pattern.search(duration)  # \"24S\"\n        hours = int(hours.group(1)) if hours else 0  # returns 24",
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "getThumbnailURL",
        "kind": 2,
        "importPath": "util",
        "description": "util",
        "peekOfCode": "def getThumbnailURL(thumbnails):\n    priority = (\"maxres\", \"standard\", \"high\", \"medium\", \"default\")\n    for quality in priority:\n        if quality in thumbnails:\n            return thumbnails[quality][\"url\"]\n    return ''\n# generates a message in the form of \"1 / 19 watched! 31mins. 15secs. left to go!\"\ndef generateWatchingMessage(playlist):\n    \"\"\"\n    This is the message that will be seen when a playlist is set to watching.",
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "generateWatchingMessage",
        "kind": 2,
        "importPath": "util",
        "description": "util",
        "peekOfCode": "def generateWatchingMessage(playlist):\n    \"\"\"\n    This is the message that will be seen when a playlist is set to watching.\n    Takes in the playlist object and calculates the watch time left by looping over unwatched video\n    and using their durations\n    \"\"\"\n    pass\ndef getVideoId(video_link):\n    \"\"\"\n    takes in a valid video link and returns a video id",
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "getVideoId",
        "kind": 2,
        "importPath": "util",
        "description": "util",
        "peekOfCode": "def getVideoId(video_link):\n    \"\"\"\n    takes in a valid video link and returns a video id\n    \"\"\"\n    if \"?\" not in video_link:\n        return video_link\n    temp = video_link.split(\"?\")[-1].split(\"&\")\n    for el in temp:\n        if \"v=\" in el:\n            return el.split(\"v=\")[-1]",
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "increment_tag_views",
        "kind": 2,
        "importPath": "util",
        "description": "util",
        "peekOfCode": "def increment_tag_views(playlist_tags):\n    \"\"\"\n    Increments playlist tag overall views and views per week. If its been a week, views per week is reset to\n    zero.\n    \"\"\"\n    for tag in playlist_tags:\n        # reset tag views if its been a week\n        if tag.last_views_reset + datetime.timedelta(days=7) < datetime.datetime.now(pytz.utc):\n            tag.times_viewed_per_week = 0\n            tag.last_views_reset = datetime.datetime.now(pytz.utc)",
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "SECRETS",
        "kind": 5,
        "importPath": "util",
        "description": "util",
        "peekOfCode": "SECRETS = {\"SECRET_KEY\": 'django-insecure-ycs22y+20sq67y(6dm6ynqw=dlhg!)%vuqpd@$p6rf3!#1h$u=',\n           \"YOUTUBE_V3_API_KEY\": 'AIzaSyCBOucAIJ5PdLeqzTfkTQ_6twsjNaMecS8',\n           \"GOOGLE_OAUTH_CLIENT_ID\": \"699466001074-biu4pjifnphoh1raipgi5mm5bf72h1ot.apps.googleusercontent.com\",\n           \"GOOGLE_OAUTH_CLIENT_SECRET\": \"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\",\n           \"GOOGLE_OAUTH_SCOPES\": ['https://www.googleapis.com/auth/youtube']}\ndef getHumanizedTimeString(seconds):\n    return humanize.precisedelta(\n        datetime.timedelta(seconds=seconds)).upper(). \\\n        replace(\" month\".upper(), \"m.\").replace(\" months\".upper(), \"m.\").replace(\" days\".upper(), \"d.\").replace(\n        \" day\".upper(), \"d.\").replace(\" hours\".upper(), \"hrs.\").replace(\" hour\".upper(), \"hr.\").replace(",
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "PlaylistManager",
        "kind": 6,
        "importPath": "youtubemanager",
        "description": "youtubemanager",
        "peekOfCode": "class PlaylistManager(models.Manager):\n    def getCredentials(self):\n        os.environ[\"OAUTHLIB_INSECURE_TRANSPORT\"] = \"1\"\n        api_service_name = \"youtube\"\n        api_version = \"v3\"\n        client_secrets_file = \"GoogleCredV1.json\"\n        # Get credentials and create an API client\n        flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(\n            client_secrets_file, scopes)\n        flow.run_local_server()",
        "detail": "youtubemanager",
        "documentation": {}
    },
    {
        "label": "get_message_from_httperror",
        "kind": 2,
        "importPath": "youtubemanager",
        "description": "youtubemanager",
        "peekOfCode": "def get_message_from_httperror(e):\n    return e.error_details[0]['message']\nclass PlaylistManager(models.Manager):\n    def getCredentials(self):\n        os.environ[\"OAUTHLIB_INSECURE_TRANSPORT\"] = \"1\"\n        api_service_name = \"youtube\"\n        api_version = \"v3\"\n        client_secrets_file = \"GoogleCredV1.json\"\n        # Get credentials and create an API client\n        flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(",
        "detail": "youtubemanager",
        "documentation": {}
    },
    {
        "label": "scopes",
        "kind": 5,
        "importPath": "youtubemanager",
        "description": "youtubemanager",
        "peekOfCode": "scopes = [\"https://www.googleapis.com/auth/youtube.readonly\"]\ndef get_message_from_httperror(e):\n    return e.error_details[0]['message']\nclass PlaylistManager(models.Manager):\n    def getCredentials(self):\n        os.environ[\"OAUTHLIB_INSECURE_TRANSPORT\"] = \"1\"\n        api_service_name = \"youtube\"\n        api_version = \"v3\"\n        client_secrets_file = \"GoogleCredV1.json\"\n        # Get credentials and create an API client",
        "detail": "youtubemanager",
        "documentation": {}
    }
]